---
information_for_contributors:
  - "The source of this file is https://github.com/JohnnyMorganz/Luau.tmLanguage/blob/main/Luau.YAML-tmLanguage"
  - "If you want to provide a fix or improvement, please create a pull request against the original repository."
  - "Once accepted there, we are happy to receive an update request."

name: Luau
scopeName: source.lua
fileTypes: [luau]

patterns:
  - begin: "\\b(?:(local)\\s+)?(function)\\b(?![,:])"
    beginCaptures:
      "1": { name: keyword.local.lua }
      "2": { name: keyword.control.lua }
    end: "(?<=[\\)\\-{}\\[\\]\"'])"
    name: meta.function.lua
    patterns:
      - include: "#comment"
      - begin: "(\\()"
        beginCaptures:
          "1": { name: punctuation.definition.parameters.begin.lua }
        end: "(\\))|(?=[\\-\\.{}\\[\\]\"'])"
        endCaptures:
          "1": { name: punctuation.definition.parameters.end.lua }
        name: meta.parameter.lua
        patterns:
          - include: "#comment"
          - match: "[a-zA-Z_][a-zA-Z0-9_]*"
            name: variable.parameter.function.lua
          - match: ","
            name: punctuation.separator.arguments.lua
          - begin: ":"
            beginCaptures:
              "0": { name: punctuation.separator.arguments.lua }
            end: "(?=[\\),])"
            # TODO:
            # patterns:
            #   - include: "#type"
      - match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b\\s*(?=:)"
        name: entity.name.class.lua
      - match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        name: entity.name.function.lua
  # TODO:
  # - include: "#number"
  - match: "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(\\.[0-9A-Fa-f]*)?([eE]-?\\d*)?([pP][-+]\\d+)?"
    name: "constant.numeric.float.hexadecimal.lua"
  - match: "(?<![\\w\\d.])0[xX]\\.[0-9A-Fa-f]+([eE]-?\\d*)?([pP][-+]\\d+)?"
    name: "constant.numeric.float.hexadecimal.lua"
  - match: "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])"
    name: "constant.numeric.integer.hexadecimal.lua"
  - match: "(?<![\\w\\d.])\\d+(\\.\\d*)?([eE]-?\\d*)?"
    name: "constant.numeric.float.lua"
  - match: "(?<![\\w\\d.])\\.\\d+([eE]-?\\d*)?"
    name: "constant.numeric.float.lua"
  - match: "(?<![\\w\\d.])\\d+(?![pPeE.0-9])"
    name: "constant.numeric.integer.lua"
  - include: "#string"
  # TODO:
  # - include: "#shebang"
  - captures:
      "1": { name: punctuation.definition.comment.lua }
    match: "\\A(#!).*$\\n?"
    name: comment.line.shebang.lua
  - include: "#comment"
  - match: "\\<[a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*\\>"
    name: storage.type.generic.lua
  - match: "\\b(break|do|else|for|if|elseif|return|then|repeat|while|until|end|in|continue)\\b"
    name: keyword.control.lua
  - match: "\\b(local)\\b"
    name: storage.modifier.local.lua
  - match: "\\b(function)\\b(?![,:])"
    name: keyword.control.lua
  - match: "(?<![^.]\\.|:)\\b(false|nil(?!:)|true|_ENV|_G|_VERSION|math\\.(pi|huge|maxinteger|mininteger)|utf8\\.charpattern|io\\.(stdin|stdout|stderr)|package\\.(config|cpath|loaded|loaders|path|preload|searchers))\\b|(?<![.])\\.{3}(?!\\.)"
    name: constant.language.lua
  - match: "(?<![^.]\\.|:)\\b(self)\\b"
    name: variable.language.self.lua
  - match: "(?<![^.]\\.|:)\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|load|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawlen|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b(?!\\s*=(?!=))"
    name: support.function.lua
  # TODO: remove
  - match: "(?<![^.]\\.|:)\\b(async)\\b(?!\\s*=(?!=))"
    name: entity.name.tag.lua
  - match: "(?<![^.]\\.|:)\\b(coroutine\\.(create|isyieldable|close|resume|running|status|wrap|yield)|string\\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|sub|unpack|upper)|table\\.(concat|insert|maxn|move|pack|remove|sort|unpack)|math\\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?|tointeger|type)|io\\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(loadlib|seeall|searchpath)|debug\\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|[gs]etuservalue|set[Cc]stacklimit|traceback|upvalueid|upvaluejoin)|bit32\\.(arshift|band|bnot|bor|btest|bxor|extract|replace|lrotate|lshift|rrotate|rshift)|utf8\\.(char|codes|codepoint|len|offset))\\b(?!\\s*=(?!=))"
    name: support.function.library.lua
  - match: "\\b(and|or|not|\\|\\||\\&\\&|\\!)\\b" # TODO: fix
    name: keyword.operator.lua
  - match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({\"']|\\[\\[))"
    name: support.function.any-method.lua
  - match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*\\??:)"
    name: entity.name.class.lua
  - match: "(?<=[^.]\\.|:)\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*=\\s*\\b(function)\\b)"
    name: entity.other.attribute.lua
  - match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*=\\s*\\b(function)\\b)"
    name: variable.other.lua
  - match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*=\\s*\\b(function)\\b)"
    name: entity.name.function.lua
  - match: "\\+|-|%|#|\\*|\\/|\\^|==?|~=|!=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)" # TODO: fix
    name: keyword.operator.lua

repository:
  # TODO:
  # shebang:
  #   name: comment.line.shebang.lua
  #   match: "\\A(#!).*(?=$)"
  #   captures:
  #     "1": { name: punctuation.definition.comment.lua }
  string_escape:
    patterns:
      # As it turns out, because backslashes have to be escaped in both JSON and Regex, a single backslash is represented as 4 here
      - name: constant.character.escape.lua
        match: "\\\\[abfnrtvz'\"`{\\\\]"
      - name: constant.character.escape.lua
        match: "\\\\\\d{1,3}"
      - name: constant.character.escape.lua
        match: "\\\\x[0-9a-fA-F]{2}"
      - name: constant.character.escape.lua
        match: "\\\\u\\{[0-9a-fA-F]*\\}"
  # TODO:
  # number:
  #   patterns:
  #     - name: constant.numeric.hex.lua
  #       match: "\\b0_*[xX]_*[\\da-fA-F_]*(?:[eE][\\+\\-]?_*\\d[\\d_]*(?:\\.[\\d_]*)?)?"
  #     - name: constant.numeric.binary.lua
  #       match: "\\b0_*[bB][01_]+(?:[eE][\\+\\-]?_*\\d[\\d_]*(?:\\.[\\d_]*)?)?"
  #     - name: constant.numeric.decimal.lua
  #       match: "(?:\\d[\\d_]*(?:\\.[\\d_]*)?|\\.\\d[\\d_]*)(?:[eE][\\+\\-]?_*\\d[\\d_]*(?:\\.[\\d_]*)?)?"
  string:
    patterns:
      - name: string.quoted.double.lua
        begin: '"'
        end: '"'
        patterns:
          - include: "#string_escape"
      - name: string.quoted.single.lua
        begin: "'"
        end: "'"
        patterns:
          - include: "#string_escape"
      - name: string.other.multiline.lua
        begin: "\\[(=*)\\["
        end: "\\]\\1\\]"
      # TODO:
      # - name: string.interpolated.lua
      #   begin: "`"
      #   end: "`"
      #   patterns:
      #     - include: "#interpolated-string-expression"
      #     - include: "#string_escape"

  # TODO:
  # interpolated-string-expression:
  #   name: meta.template.expression.lua
  #   contentName: meta.embedded.line.lua
  #   begin: "\\{"
  #   end: "\\}"
  #   beginCaptures:
  #     "0":
  #       name: punctuation.definition.interpolated-string-expression.begin.lua
  #   endCaptures:
  #     "0":
  #       { name: punctuation.definition.interpolated-string-expression.end.lua }
  #   patterns:
  #     - include: "source.lua"

  comment:
    patterns:
      - name: comment.block.lua
        begin: "--\\[(=*)\\["
        end: "\\]\\1\\]"
        patterns:
          - name: keyword.operator.other.lua
            begin: "(```lua)\\s+"
            end: "(```)"
            beginCaptures:
              "1": { name: comment.lua }
            endCaptures:
              "1": { name: comment.lua }
            patterns:
              - include: "source.lua"
          - include: "#doc_comment_tags"
      - name: comment.line.double-dash.documentation.lua
        begin: "---"
        end: "\\n"
        patterns:
          - include: "#doc_comment_tags"
      - name: comment.line.double-dash.lua
        begin: "--"
        end: "\\n"

  doc_comment_tags:
    patterns:
      - name: storage.type.class.luadoc.lua
        match: "@\\w+"
      - match: "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s)+(\\b\\w+\\b)"
        captures:
          "1": { name: storage.type.class.luadoc.lua }
          "2": { name: variable.parameter.lua }

  # type:
