---
information_for_contributors:
  - "The source of this file is https://github.com/JohnnyMorganz/Luau.tmLanguage/blob/main/Luau.YAML-tmLanguage"
  - "If you want to provide a fix or improvement, please create a pull request against the original repository."
  - "Once accepted there, we are happy to receive an update request."

name: Luau
scopeName: source.luau
fileTypes: [luau]

# TODO: type assertions
# TODO: function return types
# TODO: check if we really need to assign 'keyword.operator.type.luau' for ':'
# TODO: comment not matching appropriately in function args - ' ((any) -> () | PromiseLike<T>)? -- reject', seems to not pick up the comma

variables:
  lookAheadNotFunctionToken: (?!\\s*=\\s*\\b(function)\\b)
  matchingParentheses: (\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))

patterns:
  - begin: "\\b(?:(local)\\s+)?(function)\\b(?![,:])"
    beginCaptures:
      "1": { name: storage.modifier.local.luau } # OLD: keyword.local.luau
      "2": { name: keyword.control.luau }
    end: "(?<=[\\)\\-{}\\[\\]\"'])"
    name: meta.function.luau
    patterns:
      - include: "#comment"
      - include: "#generics-declaration"
      - begin: "(\\()"
        beginCaptures:
          "1": { name: punctuation.definition.parameters.begin.luau }
        end: "(\\))" # TODO: return type
        endCaptures:
          "1": { name: punctuation.definition.parameters.end.luau }
        name: meta.parameter.luau
        patterns:
          # TODO: need to support varargs annotation in function '...'
          - include: "#comment"
          - match: "\\.\\.\\."
            name: variable.parameter.function.varargs.luau
          - match: "[a-zA-Z_][a-zA-Z0-9_]*"
            name: variable.parameter.function.luau
          - match: ","
            name: punctuation.separator.arguments.luau
          - begin: ":"
            beginCaptures:
              "0": { name: keyword.operator.type.luau }
            end: "(?=[\\),])" # TODO: potentially buggy
            patterns:
              - include: "#type_literal"
      - match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b\\s*(?=:)"
        name: entity.name.class.luau
      - match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        name: entity.name.function.luau
  # TODO:
  - include: "#number"
  - include: "#string"
  - include: "#shebang"
  - include: "#comment"
  - match: "\\<[a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*\\>"
    name: storage.type.generic.luau
  - include: "#local-declaration"
  - include: "#for-loop"
  - include: "#type-alias-declaration"
  - match: "\\b(break|do|else|for|if|elseif|return|then|repeat|while|until|end|in|continue)\\b"
    name: keyword.control.luau
  - match: "\\b(local)\\b"
    name: storage.modifier.local.luau
  - match: "\\b(function)\\b(?![,:])"
    name: keyword.control.luau
  - include: "#language_constant"
  - match: "(?<![^.]\\.|:)\\b(self)\\b"
    name: variable.language.self.luau
  - match: "(?<![^.]\\.|:)\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|load|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawlen|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b(?!\\s*=(?!=))"
    name: support.function.luau
  - match: "(?<![^.]\\.|:)\\b(coroutine\\.(create|isyieldable|close|resume|running|status|wrap|yield)|string\\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|sub|unpack|upper)|table\\.(concat|insert|maxn|move|pack|remove|sort|unpack)|math\\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?|tointeger|type)|io\\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(loadlib|seeall|searchpath)|debug\\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|[gs]etuservalue|set[Cc]stacklimit|traceback|upvalueid|upvaluejoin)|bit32\\.(arshift|band|bnot|bor|btest|bxor|extract|replace|lrotate|lshift|rrotate|rshift)|utf8\\.(char|codes|codepoint|len|offset))\\b(?!\\s*=(?!=))"
    name: support.function.library.luau
  - match: "\\b(and|or|not)\\b"
    name: keyword.operator.logical.luau keyword.operator.wordlike.luau
  - include: "#identifier"
  - include: "#operator"

repository:
  local-declaration:
    begin: "\\b(local)\\b"
    end: "(?=\\s*do\\b|\\s*[=;]|\\s*$)"
    beginCaptures:
      "1": { name: storage.modifier.local.luau }
    patterns:
      - begin: "(:)"
        beginCaptures:
          "1": { name: keyword.operator.type.luau }
        end: "(?=\\s*do\\b|\\s*[=;,]|\\s*$)"
        patterns:
          - include: "#type_literal"
      - name: variable.other.constant.luau
        match: "\\b([A-Z_][A-Z0-9_]*)\\b"
      - name: variable.other.readwrite.luau # TODO: should this be something different? old was just variable.other.luau
        match: "\\b([a-zA-Z_]\\w*)\\b"

  for-loop:
    begin: "\\b(for)\\b"
    beginCaptures:
      "1": { name: keyword.control.luau }
    end: "\\b(in)\\b|(=)"
    endCaptures:
      "1": { name: keyword.control.luau }
      "2": { name: keyword.operator.assignment.luau }
    patterns:
      - begin: "(:)"
        beginCaptures:
          "1": { name: keyword.operator.type.luau }
        end: "(?=\\s*in\\b|\\s*[=,]|\\s*$)"
        patterns:
          - include: "#type_literal"
      - name: variable.parameter.luau
        match: "\\b([a-zA-Z_]\\w*)\\b"

  # TODO:
  shebang:
    captures:
      "1": { name: punctuation.definition.comment.luau }
    match: "\\A(#!).*$\\n?"
    name: comment.line.shebang.luau
    # name: comment.line.shebang.luau
    # match: "\\A(#!).*(?=$)"
    # captures:
    #   "1": { name: punctuation.definition.comment.luau }

  string_escape:
    patterns:
      # As it turns out, because backslashes have to be escaped in both JSON and Regex, a single backslash is represented as 4 here
      - name: constant.character.escape.luau
        match: "\\\\[abfnrtvz'\"`{\\\\]"
      - name: constant.character.escape.luau
        match: "\\\\\\d{1,3}"
      - name: constant.character.escape.luau
        match: "\\\\x[0-9a-fA-F]{2}"
      - name: constant.character.escape.luau
        match: "\\\\u\\{[0-9a-fA-F]*\\}"
  number:
    patterns:
      - name: constant.numeric.hex.luau
        match: "\\b0_*[xX]_*[\\da-fA-F_]*(?:[eE][\\+\\-]?_*\\d[\\d_]*(?:\\.[\\d_]*)?)?"
      - name: constant.numeric.binary.luau
        match: "\\b0_*[bB][01_]+(?:[eE][\\+\\-]?_*\\d[\\d_]*(?:\\.[\\d_]*)?)?"
      - name: constant.numeric.decimal.luau
        match: "(?:\\d[\\d_]*(?:\\.[\\d_]*)?|\\.\\d[\\d_]*)(?:[eE][\\+\\-]?_*\\d[\\d_]*(?:\\.[\\d_]*)?)?"
  string:
    patterns:
      - name: string.quoted.double.luau
        begin: '"'
        end: '"'
        patterns:
          - include: "#string_escape"
      - name: string.quoted.single.luau
        begin: "'"
        end: "'"
        patterns:
          - include: "#string_escape"
      - name: string.other.multiline.luau
        begin: "\\[(=*)\\["
        end: "\\]\\1\\]"
      - name: string.interpolated.luau
        begin: "`"
        end: "`"
        patterns:
          - include: "#interpolated_string_expression"
          - include: "#string_escape"

  interpolated_string_expression:
    name: meta.template.expression.luau
    contentName: meta.embedded.line.luau
    begin: "\\{"
    end: "\\}"
    beginCaptures:
      "0":
        {
          name: punctuation.definition.interpolated-string-expression.begin.luau,
        }
    endCaptures:
      "0":
        { name: punctuation.definition.interpolated-string-expression.end.luau }
    patterns:
      - include: "source.luau"

  identifier:
    patterns:
      - match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({\"']|\\[\\[))"
        name: entity.name.function.luau # OLD: support.function.any-method.luau
      - match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*\\??:)"
        name: entity.name.class.luau
      - match: "(?<=[^.]\\.|:)\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b{{lookAheadNotFunctionToken}}"
        name: variable.other.property.luau # OLD: entity.other.attribute.luau
      - match: "\\b([A-Z_][A-Z0-9_]*)\\b{{lookAheadNotFunctionToken}}"
        name: variable.other.constant.luau
      - match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b{{lookAheadNotFunctionToken}}"
        name: variable.other.readwrite.luau # OLD: variable.other.luau

  operator:
    patterns:
      - match: "\\+|-|%|\\*|\\/|\\^"
        name: "keyword.operator.arithmetic.luau"
      - match: "==|~=|!=|<=?|>=?"
        name: keyword.operator.comparison.luau
      - match: "\\+=|-=|/=|\\*=|%=|\\^=|\\.\\.=|="
        name: keyword.operator.assignment.luau
      - match: "#|(?<!\\.)\\.{2}(?!\\.)"
        name: keyword.operator.other.luau

  language_constant:
    patterns:
      - match: "(?<![^.]\\.|:)\\b(false)\\b"
        name: constant.language.boolean.false.luau
      - match: "(?<![^.]\\.|:)\\b(true)\\b"
        name: constant.language.boolean.true.luau
      - match: "(?<![^.]\\.|:)\\b(nil(?!:))\\b"
        name: constant.language.nil.luau
      - match: "(?<![^.]\\.|:)\\b(_ENV|_G|_VERSION|math\\.(pi|huge|maxinteger|mininteger)|utf8\\.charpattern|io\\.(stdin|stdout|stderr)|package\\.(config|cpath|loaded|loaders|path|preload|searchers))\\b|(?<![.])\\.{3}(?!\\.)"
        name: constant.language.luau

  comment:
    patterns:
      - name: comment.block.luau
        begin: "--\\[(=*)\\["
        end: "\\]\\1\\]"
        patterns:
          - name: keyword.operator.other.luau
            begin: "(```lua)\\s+"
            end: "(```)"
            beginCaptures:
              "1": { name: comment.luau }
            endCaptures:
              "1": { name: comment.luau }
            patterns:
              - include: "source.luau"
          - include: "#doc_comment_tags"
      - name: comment.line.double-dash.documentation.luau
        begin: "---"
        end: "\\n"
        patterns:
          - include: "#doc_comment_tags"
      - name: comment.line.double-dash.luau
        begin: "--"
        end: "\\n"

  doc_comment_tags:
    patterns:
      - name: storage.type.class.luadoc.luau
        match: "@\\w+"
      - match: "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s)+(\\b\\w+\\b)"
        captures:
          "1": { name: storage.type.class.luadoc.luau }
          "2": { name: variable.parameter.luau }

  generics-declaration:
    begin: "(<)"
    # TODO:
    # beginCaptures:
    #  "1": { name: punctuation.definition.generics.begin.luau }
    end: "(>)"
    # endCaptures:
    #  "1": { name: punctuation.definition.generics.end.luau }
    # name: meta.generic.luau
    patterns:
      - match: "[a-zA-Z_][a-zA-Z0-9_]*"
        name: entity.name.type.luau
      # - match: ","
      # name: punctuation.separator.generics.luau

  type-alias-declaration:
    begin: "\\b(?:(export)\\s+)?(type)\\s+([^=]+)\\s*(=)"
    end: "(?=\\s*$)|(?=\\s*;)"
    beginCaptures:
      "1": { name: storage.modifier.visibility.luau }
      "2": { name: storage.type.luau }
      "3":
        patterns:
          # TODO: generics-declaration
          - name: keyword.operator.type.luau
            match: "[<>]"
          - name: entity.name.type.alias.luau
            match: "\\b[a-zA-Z_]\\w*\\b"
      "4": { name: keyword.operator.assignment.luau }
    patterns:
      - include: "#type_literal"

  type_literal:
    patterns:
      - include: "#comment"
      - include: "#string"
      - match: "\\?|\\&|\\|"
        name: keyword.operator.type.luau
      - match: "->"
        name: keyword.operator.type.luau
      - match: "\\b(false)\\b"
        name: constant.language.boolean.false.luau
      - match: "\\b(true)\\b"
        name: constant.language.boolean.true.luau
      - name: support.type.primitive.luau
        match: "\\b(nil|string|number|boolean|thread|userdata|symbol|any)\\b"
      - begin: "\\b(typeof)\\b\\(" # TODO: assign scope to punctuation?
        beginCaptures:
          "1": { name: support.function.luau }
        end: "\\)"
        patterns:
          - include: "source.luau"
      - begin: "(<)"
        end: "(>)"
        beginCaptures:
          "1": { name: keyword.operator.type.luau }
        endCaptures:
          "1": { name: keyword.operator.type.luau }
        patterns:
          - include: "#type_literal"
      - match: "\\b([a-zA-Z]\\w*)\\b"
        name: entity.name.type.luau
      - begin: "\\{"
        end: "\\}"
        patterns:
          - begin: "\\["
            end: "\\]" # TODO: do we need to match the ':' afterwards?
            patterns:
              - include: "#type_literal"
          - match: "\\b([a-zA-Z_]\\w*)\\b(:)"
            captures:
              "1": { name: variable.property.luau }
              "2": { name: keyword.operator.type.luau }
          - include: "#type_literal"
          - match: "[,;]"
            name: punctuation.separator.fields.type.luau
      - begin: "\\("
        end: "\\)"
        patterns:
          - name: variable.parameter.luau
            match: "\\b([a-zA-Z_]\\w*)\\b(:)"
            captures:
              "1": { name: variable.parameter.luau }
              "2": { name: keyword.operator.type.luau }
          - include: "#type_literal"
