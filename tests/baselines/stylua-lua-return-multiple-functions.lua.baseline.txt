original file
-----------------------------------
-- https://github.com/JohnnyMorganz/StyLua/issues/302
return function()
  if overrides == nil then
  	setupOverrides()
  end

  if overrides[key] == nil then
  	return value
  end

  return overrides[key]
end, function(callback)
  overrideWatchers[key] = callback
end

-----------------------------------

>-- https://github.com/JohnnyMorganz/StyLua/issues/302
 ^^
 source.luau comment.line.double-dash.luau
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   source.luau comment.line.double-dash.luau
>return function()
 ^^^^^^
 source.luau keyword.control.luau
       ^
       source.luau
        ^^^^^^^^
        source.luau meta.function.luau keyword.control.luau
                ^
                source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                 ^
                 source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  if overrides == nil then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^^^^^^
      source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^^
                source.luau keyword.operator.comparison.luau
                  ^
                  source.luau
                   ^^^
                   source.luau constant.language.nil.luau
                      ^
                      source.luau
                       ^^^^
                       source.luau keyword.control.luau
>  	setupOverrides()
 ^^^
 source.luau
    ^^^^^^^^^^^^^^
    source.luau entity.name.function.luau
                  ^
                  source.luau punctuation.arguments.begin.luau
                   ^
                   source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  if overrides[key] == nil then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^^^^^^
      source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^^^
                source.luau variable.other.readwrite.luau
                   ^^
                   source.luau
                     ^^
                     source.luau keyword.operator.comparison.luau
                       ^
                       source.luau
                        ^^^
                        source.luau constant.language.nil.luau
                           ^
                           source.luau
                            ^^^^
                            source.luau keyword.control.luau
>  	return value
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^
           source.luau variable.other.readwrite.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  return overrides[key]
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^^^
          source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^^^
                    source.luau variable.other.readwrite.luau
                       ^^
                       source.luau
>end, function(callback)
 ^^^
 source.luau keyword.control.luau
    ^^
    source.luau
      ^^^^^^^^
      source.luau meta.function.luau keyword.control.luau
              ^
              source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
               ^^^^^^^^
               source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                       ^
                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  overrideWatchers[key] = callback
 ^^
 source.luau
   ^^^^^^^^^^^^^^^^
   source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^^^
                    source.luau variable.other.readwrite.luau
                       ^^
                       source.luau
                         ^
                         source.luau keyword.operator.assignment.luau
                          ^
                          source.luau
                           ^^^^^^^^
                           source.luau variable.other.readwrite.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau