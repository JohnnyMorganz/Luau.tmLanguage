original file
-----------------------------------
--[[
  Taken from: https://github.com/evaera/roblox-lua-promise

  MIT License

  Copyright (c) 2019 Eryn L. K.

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

  An implementation of Promises similar to Promise/A+.
]]

local ERROR_NON_PROMISE_IN_LIST = "Non-promise value passed into %s at index %s"
local ERROR_NON_LIST = "Please pass a list of promises to %s"
local ERROR_NON_FUNCTION = "Please pass a handler function to %s!"
local MODE_KEY_METATABLE = {__mode = "k"}

--[[
  Creates an enum dictionary with some metamethods to prevent common mistakes.
]]
local function makeEnum(enumName, members)
  local enum = {}

  for _, memberName in ipairs(members) do
  	enum[memberName] = memberName
  end

  return setmetatable(enum, {
  	__index = function(_, k)
  		error(string.format("%s is not in %s!", k, enumName), 2)
  	end,
  	__newindex = function()
  		error(string.format("Creating new members in %s is not allowed!", enumName), 2)
  	end,
  })
end

--[[
  An object to represent runtime errors that occur during execution.
  Promises that experience an error like this will be rejected with
  an instance of this object.
]]
local Error do
  Error = {
  	Kind = makeEnum("Promise.Error.Kind", {
  		"ExecutionError",
  		"AlreadyCancelled",
  		"NotResolvedInTime",
  		"TimedOut",
  	}),
  }
  Error.__index = Error

  function Error.new(options, parent)
  	options = options or {}
  	return setmetatable({
  		error = tostring(options.error) or "[This error has no error text.]",
  		trace = options.trace,
  		context = options.context,
  		kind = options.kind,
  		parent = parent,
  		createdTick = os.clock(),
  		createdTrace = debug.traceback(),
  	}, Error)
  end

  function Error.is(anything)
  	if type(anything) == "table" then
  		local metatable = getmetatable(anything)

  		if type(metatable) == "table" then
  			return rawget(anything, "error") ~= nil and type(rawget(metatable, "extend")) == "function"
  		end
  	end

  	return false
  end

  function Error.isKind(anything, kind)
  	assert(kind ~= nil, "Argument #2 to Promise.Error.isKind must not be nil")

  	return Error.is(anything) and anything.kind == kind
  end

  function Error:extend(options)
  	options = options or {}

  	options.kind = options.kind or self.kind

  	return Error.new(options, self)
  end

  function Error:getErrorChain()
  	local runtimeErrors = { self }

  	while runtimeErrors[#runtimeErrors].parent do
  		table.insert(runtimeErrors, runtimeErrors[#runtimeErrors].parent)
  	end

  	return runtimeErrors
  end

  function Error:__tostring()
  	local errorStrings = {
  		string.format("-- Promise.Error(%s) --", self.kind or "?"),
  	}

  	for _, runtimeError in ipairs(self:getErrorChain()) do
  		table.insert(errorStrings, table.concat({
  			runtimeError.trace or runtimeError.error,
  			runtimeError.context,
  		}, "\n"))
  	end

  	return table.concat(errorStrings, "\n")
  end
end

--[[
  Packs a number of arguments into a table and returns its length.

  Used to cajole varargs without dropping sparse values.
]]
local function pack(...)
  return select("#", ...), { ... }
end

--[[
  Returns first value (success), and packs all following values.
]]
local function packResult(success, ...)
  return success, select("#", ...), { ... }
end


local function makeErrorHandler(traceback)
  assert(traceback ~= nil)

  return function(err)
  	-- If the error object is already a table, forward it directly.
  	-- Should we extend the error here and add our own trace?

  	if type(err) == "table" then
  		return err
  	end

  	return Error.new({
  		error = err,
  		kind = Error.Kind.ExecutionError,
  		trace = debug.traceback(tostring(err), 2),
  		context = "Promise created at:\n\n" .. traceback,
  	})
  end
end

--[[
  Calls a Promise executor with error handling.
]]
local function runExecutor(traceback, callback, ...)
  return packResult(xpcall(callback, makeErrorHandler(traceback), ...))
end

--[[
  Creates a function that invokes a callback with correct error handling and
  resolution mechanisms.
]]
local function createAdvancer(traceback, callback, resolve, reject)
  return function(...)
  	local ok, resultLength, result = runExecutor(traceback, callback, ...)

  	if ok then
  		resolve(unpack(result, 1, resultLength))
  	else
  		reject(result[1])
  	end
  end
end

local function isEmpty(t)
  return next(t) == nil
end

local Promise = {
  Error = Error,
  Status = makeEnum("Promise.Status", {"Started", "Resolved", "Rejected", "Cancelled"}),
  _getTime = os.clock,
  _timeEvent = game:GetService("RunService").Heartbeat,
}
Promise.prototype = {}
Promise.__index = Promise.prototype

--[[
  Constructs a new Promise with the given initializing callback.

  This is generally only called when directly wrapping a non-promise API into
  a promise-based version.

  The callback will receive 'resolve' and 'reject' methods, used to start
  invoking the promise chain.

  Second parameter, parent, is used internally for tracking the "parent" in a
  promise chain. External code shouldn't need to worry about this.
]]
function Promise._new(traceback, callback, parent)
  if parent ~= nil and not Promise.is(parent) then
  	error("Argument #2 to Promise.new must be a promise or nil", 2)
  end

  local self = {
  	-- Used to locate where a promise was created
  	_source = traceback,

  	_status = Promise.Status.Started,

  	-- A table containing a list of all results, whether success or failure.
  	-- Only valid if _status is set to something besides Started
  	_values = nil,

  	-- Lua doesn't like sparse arrays very much, so we explicitly store the
  	-- length of _values to handle middle nils.
  	_valuesLength = -1,

  	-- Tracks if this Promise has no error observers..
  	_unhandledRejection = true,

  	-- Queues representing functions we should invoke when we update!
  	_queuedResolve = {},
  	_queuedReject = {},
  	_queuedFinally = {},

  	-- The function to run when/if this promise is cancelled.
  	_cancellationHook = nil,

  	-- The "parent" of this promise in a promise chain. Required for
  	-- cancellation propagation upstream.
  	_parent = parent,

  	-- Consumers are Promises that have chained onto this one.
  	-- We track them for cancellation propagation downstream.
  	_consumers = setmetatable({}, MODE_KEY_METATABLE),
  }

  if parent and parent._status == Promise.Status.Started then
  	parent._consumers[self] = true
  end

  setmetatable(self, Promise)

  local function resolve(...)
  	self:_resolve(...)
  end

  local function reject(...)
  	self:_reject(...)
  end

  local function onCancel(cancellationHook)
  	if cancellationHook then
  		if self._status == Promise.Status.Cancelled then
  			cancellationHook()
  		else
  			self._cancellationHook = cancellationHook
  		end
  	end

  	return self._status == Promise.Status.Cancelled
  end

  coroutine.wrap(function()
  	local ok, _, result = runExecutor(
  		self._source,
  		callback,
  		resolve,
  		reject,
  		onCancel
  	)

  	if not ok then
  		reject(result[1])
  	end
  end)()

  return self
end

function Promise.new(executor)
  return Promise._new(debug.traceback(nil, 2), executor)
end

function Promise:__tostring()
  return string.format("Promise(%s)", self:getStatus())
end

--[[
  Promise.new, except pcall on a new thread is automatic.
]]
function Promise.defer(callback)
  local traceback = debug.traceback(nil, 2)
  local promise
  promise = Promise._new(traceback, function(resolve, reject, onCancel)
  	local connection
  	connection = Promise._timeEvent:Connect(function()
  		connection:Disconnect()
  		local ok, _, result = runExecutor(traceback, callback, resolve, reject, onCancel)

  		if not ok then
  			reject(result[1])
  		end
  	end)
  end)

  return promise
end

-- Backwards compatibility
Promise.async = Promise.defer

--[[
  Create a promise that represents the immediately resolved value.
]]
function Promise.resolve(...)
  local length, values = pack(...)
  return Promise._new(debug.traceback(nil, 2), function(resolve)
  	resolve(unpack(values, 1, length))
  end)
end

--[[
  Create a promise that represents the immediately rejected value.
]]
function Promise.reject(...)
  local length, values = pack(...)
  return Promise._new(debug.traceback(nil, 2), function(_, reject)
  	reject(unpack(values, 1, length))
  end)
end

--[[
  Runs a non-promise-returning function as a Promise with the
  given arguments.
]]
function Promise._try(traceback, callback, ...)
  local valuesLength, values = pack(...)

  return Promise._new(traceback, function(resolve)
  	resolve(callback(unpack(values, 1, valuesLength)))
  end)
end

--[[
  Begins a Promise chain, turning synchronous errors into rejections.
]]
function Promise.try(...)
  return Promise._try(debug.traceback(nil, 2), ...)
end

--[[
  Returns a new promise that:
  	* is resolved when all input promises resolve
  	* is rejected if ANY input promises reject
]]
function Promise._all(traceback, promises, amount)
  if type(promises) ~= "table" then
  	error(string.format(ERROR_NON_LIST, "Promise.all"), 3)
  end

  -- We need to check that each value is a promise here so that we can produce
  -- a proper error rather than a rejected promise with our error.
  for i, promise in pairs(promises) do
  	if not Promise.is(promise) then
  		error(string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.all", tostring(i)), 3)
  	end
  end

  -- If there are no values then return an already resolved promise.
  if #promises == 0 or amount == 0 then
  	return Promise.resolve({})
  end

  return Promise._new(traceback, function(resolve, reject, onCancel)
  	-- An array to contain our resolved values from the given promises.
  	local resolvedValues = {}
  	local newPromises = {}

  	-- Keep a count of resolved promises because just checking the resolved
  	-- values length wouldn't account for promises that resolve with nil.
  	local resolvedCount = 0
  	local rejectedCount = 0
  	local done = false

  	local function cancel()
  		for _, promise in ipairs(newPromises) do
  			promise:cancel()
  		end
  	end

  	-- Called when a single value is resolved and resolves if all are done.
  	local function resolveOne(i, ...)
  		if done then
  			return
  		end

  		resolvedCount = resolvedCount + 1

  		if amount == nil then
  			resolvedValues[i] = ...
  		else
  			resolvedValues[resolvedCount] = ...
  		end

  		if resolvedCount >= (amount or #promises) then
  			done = true
  			resolve(resolvedValues)
  			cancel()
  		end
  	end

  	onCancel(cancel)

  	-- We can assume the values inside `promises` are all promises since we
  	-- checked above.
  	for i, promise in ipairs(promises) do
  		newPromises[i] = promise:andThen(
  			function(...)
  				resolveOne(i, ...)
  			end,
  			function(...)
  				rejectedCount = rejectedCount + 1

  				if amount == nil or #promises - rejectedCount < amount then
  					cancel()
  					done = true

  					reject(...)
  				end
  			end
  		)
  	end

  	if done then
  		cancel()
  	end
  end)
end

function Promise.all(promises)
  return Promise._all(debug.traceback(nil, 2), promises)
end

function Promise.fold(list, callback, initialValue)
  assert(type(list) == "table", "Bad argument #1 to Promise.fold: must be a table")
  assert(type(callback) == "function", "Bad argument #2 to Promise.fold: must be a function")

  local accumulator = Promise.resolve(initialValue)
  return Promise.each(list, function(resolvedElement, i)
  	accumulator = accumulator:andThen(function(previousValueResolved)
  		return callback(previousValueResolved, resolvedElement, i)
  	end)
  end):andThenReturn(accumulator)
end

function Promise.some(promises, amount)
  assert(type(amount) == "number", "Bad argument #2 to Promise.some: must be a number")

  return Promise._all(debug.traceback(nil, 2), promises, amount)
end

function Promise.any(promises)
  return Promise._all(debug.traceback(nil, 2), promises, 1):andThen(function(values)
  	return values[1]
  end)
end

function Promise.allSettled(promises)
  if type(promises) ~= "table" then
  	error(string.format(ERROR_NON_LIST, "Promise.allSettled"), 2)
  end

  -- We need to check that each value is a promise here so that we can produce
  -- a proper error rather than a rejected promise with our error.
  for i, promise in pairs(promises) do
  	if not Promise.is(promise) then
  		error(string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.allSettled", tostring(i)), 2)
  	end
  end

  -- If there are no values then return an already resolved promise.
  if #promises == 0 then
  	return Promise.resolve({})
  end

  return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
  	-- An array to contain our resolved values from the given promises.
  	local fates = {}
  	local newPromises = {}

  	-- Keep a count of resolved promises because just checking the resolved
  	-- values length wouldn't account for promises that resolve with nil.
  	local finishedCount = 0

  	-- Called when a single value is resolved and resolves if all are done.
  	local function resolveOne(i, ...)
  		finishedCount = finishedCount + 1

  		fates[i] = ...

  		if finishedCount >= #promises then
  			resolve(fates)
  		end
  	end

  	onCancel(function()
  		for _, promise in ipairs(newPromises) do
  			promise:cancel()
  		end
  	end)

  	-- We can assume the values inside `promises` are all promises since we
  	-- checked above.
  	for i, promise in ipairs(promises) do
  		newPromises[i] = promise:finally(
  			function(...)
  				resolveOne(i, ...)
  			end
  		)
  	end
  end)
end

--[[
  Races a set of Promises and returns the first one that resolves,
  cancelling the others.
]]
function Promise.race(promises)
  assert(type(promises) == "table", string.format(ERROR_NON_LIST, "Promise.race"))

  for i, promise in pairs(promises) do
  	assert(Promise.is(promise), string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.race", tostring(i)))
  end

  return Promise._new(debug.traceback(nil, 2), function(resolve, reject, onCancel)
  	local newPromises = {}
  	local finished = false

  	local function cancel()
  		for _, promise in ipairs(newPromises) do
  			promise:cancel()
  		end
  	end

  	local function finalize(callback)
  		return function (...)
  			cancel()
  			finished = true
  			return callback(...)
  		end
  	end

  	if onCancel(finalize(reject)) then
  		return
  	end

  	for i, promise in ipairs(promises) do
  		newPromises[i] = promise:andThen(finalize(resolve), finalize(reject))
  	end

  	if finished then
  		cancel()
  	end
  end)
end

--[[
  Iterates serially over the given an array of values, calling the predicate callback on each before continuing.
  If the predicate returns a Promise, we wait for that Promise to resolve before continuing to the next item
  in the array. If the Promise the predicate returns rejects, the Promise from Promise.each is also rejected with
  the same value.

  Returns a Promise containing an array of the return values from the predicate for each item in the original list.
]]
function Promise.each(list, predicate)
  assert(type(list) == "table", string.format(ERROR_NON_LIST, "Promise.each"))
  assert(type(predicate) == "function", string.format(ERROR_NON_FUNCTION, "Promise.each"))

  return Promise._new(debug.traceback(nil, 2), function(resolve, reject, onCancel)
  	local results = {}
  	local promisesToCancel = {}

  	local cancelled = false

  	local function cancel()
  		for _, promiseToCancel in ipairs(promisesToCancel) do
  			promiseToCancel:cancel()
  		end
  	end

  	onCancel(function()
  		cancelled = true

  		cancel()
  	end)

  	-- We need to preprocess the list of values and look for Promises.
  	-- If we find some, we must register our andThen calls now, so that those Promises have a consumer
  	-- from us registered. If we don't do this, those Promises might get cancelled by something else
  	-- before we get to them in the series because it's not possible to tell that we plan to use it
  	-- unless we indicate it here.

  	local preprocessedList = {}

  	for index, value in ipairs(list) do
  		if Promise.is(value) then
  			if value:getStatus() == Promise.Status.Cancelled then
  				cancel()
  				return reject(Error.new({
  					error = "Promise is cancelled",
  					kind = Error.Kind.AlreadyCancelled,
  					context = string.format(
  						"The Promise that was part of the array at index %d passed into Promise.each was already cancelled when Promise.each began.\n\nThat Promise was created at:\n\n%s",
  						index,
  						value._source
  					),
  				}))
  			elseif value:getStatus() == Promise.Status.Rejected then
  				cancel()
  				return reject(select(2, value:await()))
  			end

  			-- Chain a new Promise from this one so we only cancel ours
  			local ourPromise = value:andThen(function(...)
  				return ...
  			end)

  			table.insert(promisesToCancel, ourPromise)
  			preprocessedList[index] = ourPromise
  		else
  			preprocessedList[index] = value
  		end
  	end

  	for index, value in ipairs(preprocessedList) do
  		if Promise.is(value) then
  			local success
  			success, value = value:await()

  			if not success then
  				cancel()
  				return reject(value)
  			end
  		end

  		if cancelled then
  			return
  		end

  		local predicatePromise = Promise.resolve(predicate(value, index))

  		table.insert(promisesToCancel, predicatePromise)

  		local success, result = predicatePromise:await()

  		if not success then
  			cancel()
  			return reject(result)
  		end

  		results[index] = result
  	end

  	resolve(results)
  end)
end

--[[
  Is the given object a Promise instance?
]]
function Promise.is(object)
  if type(object) ~= "table" then
  	return false
  end

  local objectMetatable = getmetatable(object)

  if objectMetatable == Promise then
  	-- The Promise came from this library.
  	return true
  elseif objectMetatable == nil then
  	-- No metatable, but we should still chain onto tables with andThen methods
  	return type(object.andThen) == "function"
  elseif
  	type(objectMetatable) == "table"
  	and type(rawget(objectMetatable, "__index")) == "table"
  	and type(rawget(rawget(objectMetatable, "__index"), "andThen")) == "function"
  then
  	-- Maybe this came from a different or older Promise library.
  	return true
  end

  return false
end

--[[
  Converts a yielding function into a Promise-returning one.
]]
function Promise.promisify(callback)
  return function(...)
  	return Promise._try(debug.traceback(nil, 2), callback, ...)
  end
end

--[[
  Creates a Promise that resolves after given number of seconds.
]]
do
  -- uses a sorted doubly linked list (queue) to achieve O(1) remove operations and O(n) for insert

  -- the initial node in the linked list
  local first
  local connection

  function Promise.delay(seconds)
  	assert(type(seconds) == "number", "Bad argument #1 to Promise.delay, must be a number.")
  	-- If seconds is -INF, INF, NaN, or less than 1 / 60, assume seconds is 1 / 60.
  	-- This mirrors the behavior of wait()
  	if not (seconds >= 1 / 60) or seconds == math.huge then
  		seconds = 1 / 60
  	end

  	return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
  		local startTime = Promise._getTime()
  		local endTime = startTime + seconds

  		local node = {
  			resolve = resolve,
  			startTime = startTime,
  			endTime = endTime,
  		}

  		if connection == nil then -- first is nil when connection is nil
  			first = node
  			connection = Promise._timeEvent:Connect(function()
  				local threadStart = Promise._getTime()

  				while first ~= nil and first.endTime < threadStart do
  					local current = first
  					first = current.next

  					if first == nil then
  						connection:Disconnect()
  						connection = nil
  					else
  						first.previous = nil
  					end

  					current.resolve(Promise._getTime() - current.startTime)
  				end
  			end)
  		else -- first is non-nil
  			if first.endTime < endTime then -- if `node` should be placed after `first`
  				-- we will insert `node` between `current` and `next`
  				-- (i.e. after `current` if `next` is nil)
  				local current = first
  				local next = current.next

  				while next ~= nil and next.endTime < endTime do
  					current = next
  					next = current.next
  				end

  				-- `current` must be non-nil, but `next` could be `nil` (i.e. last item in list)
  				current.next = node
  				node.previous = current

  				if next ~= nil then
  					node.next = next
  					next.previous = node
  				end
  			else
  				-- set `node` to `first`
  				node.next = first
  				first.previous = node
  				first = node
  			end
  		end

  		onCancel(function()
  			-- remove node from queue
  			local next = node.next

  			if first == node then
  				if next == nil then -- if `node` is the first and last
  					connection:Disconnect()
  					connection = nil
  				else -- if `node` is `first` and not the last
  					next.previous = nil
  				end
  				first = next
  			else
  				local previous = node.previous
  				-- since `node` is not `first`, then we know `previous` is non-nil
  				previous.next = next

  				if next ~= nil then
  					next.previous = previous
  				end
  			end
  		end)
  	end)
  end
end

--[[
  Rejects the promise after `seconds` seconds.
]]
function Promise.prototype:timeout(seconds, rejectionValue)
  local traceback = debug.traceback(nil, 2)

  return Promise.race({
  	Promise.delay(seconds):andThen(function()
  		return Promise.reject(rejectionValue == nil and Error.new({
  			kind = Error.Kind.TimedOut,
  			error = "Timed out",
  			context = string.format(
  				"Timeout of %d seconds exceeded.\n:timeout() called at:\n\n%s",
  				seconds,
  				traceback
  			),
  		}) or rejectionValue)
  	end),
  	self,
  })
end

function Promise.prototype:getStatus()
  return self._status
end

--[[
  Creates a new promise that receives the result of this promise.

  The given callbacks are invoked depending on that result.
]]
function Promise.prototype:_andThen(traceback, successHandler, failureHandler)
  self._unhandledRejection = false

  -- Create a new promise to follow this part of the chain
  return Promise._new(traceback, function(resolve, reject)
  	-- Our default callbacks just pass values onto the next promise.
  	-- This lets success and failure cascade correctly!

  	local successCallback = resolve
  	if successHandler then
  		successCallback = createAdvancer(
  			traceback,
  			successHandler,
  			resolve,
  			reject
  		)
  	end

  	local failureCallback = reject
  	if failureHandler then
  		failureCallback = createAdvancer(
  			traceback,
  			failureHandler,
  			resolve,
  			reject
  		)
  	end

  	if self._status == Promise.Status.Started then
  		-- If we haven't resolved yet, put ourselves into the queue
  		table.insert(self._queuedResolve, successCallback)
  		table.insert(self._queuedReject, failureCallback)
  	elseif self._status == Promise.Status.Resolved then
  		-- This promise has already resolved! Trigger success immediately.
  		successCallback(unpack(self._values, 1, self._valuesLength))
  	elseif self._status == Promise.Status.Rejected then
  		-- This promise died a terrible death! Trigger failure immediately.
  		failureCallback(unpack(self._values, 1, self._valuesLength))
  	elseif self._status == Promise.Status.Cancelled then
  		-- We don't want to call the success handler or the failure handler,
  		-- we just reject this promise outright.
  		reject(Error.new({
  			error = "Promise is cancelled",
  			kind = Error.Kind.AlreadyCancelled,
  			context = "Promise created at\n\n" .. traceback,
  		}))
  	end
  end, self)
end

function Promise.prototype:andThen(successHandler, failureHandler)
  assert(
  	successHandler == nil or type(successHandler) == "function",
  	string.format(ERROR_NON_FUNCTION, "Promise:andThen")
  )
  assert(
  	failureHandler == nil or type(failureHandler) == "function",
  	string.format(ERROR_NON_FUNCTION, "Promise:andThen")
  )

  return self:_andThen(debug.traceback(nil, 2), successHandler, failureHandler)
end

--[[
  Used to catch any errors that may have occurred in the promise.
]]
function Promise.prototype:catch(failureCallback)
  assert(
  	failureCallback == nil or type(failureCallback) == "function",
  	string.format(ERROR_NON_FUNCTION, "Promise:catch")
  )
  return self:_andThen(debug.traceback(nil, 2), nil, failureCallback)
end

--[[
  Like andThen, but the value passed into the handler is also the
  value returned from the handler.
]]
function Promise.prototype:tap(tapCallback)
  assert(type(tapCallback) == "function", string.format(ERROR_NON_FUNCTION, "Promise:tap"))
  return self:_andThen(debug.traceback(nil, 2), function(...)
  	local callbackReturn = tapCallback(...)

  	if Promise.is(callbackReturn) then
  		local length, values = pack(...)
  		return callbackReturn:andThen(function()
  			return unpack(values, 1, length)
  		end)
  	end

  	return ...
  end)
end

--[[
  Calls a callback on `andThen` with specific arguments.
]]
function Promise.prototype:andThenCall(callback, ...)
  assert(type(callback) == "function", string.format(ERROR_NON_FUNCTION, "Promise:andThenCall"))
  local length, values = pack(...)
  return self:_andThen(debug.traceback(nil, 2), function()
  	return callback(unpack(values, 1, length))
  end)
end

--[[
  Shorthand for an andThen handler that returns the given value.
]]
function Promise.prototype:andThenReturn(...)
  local length, values = pack(...)
  return self:_andThen(debug.traceback(nil, 2), function()
  	return unpack(values, 1, length)
  end)
end

--[[
  Cancels the promise, disallowing it from rejecting or resolving, and calls
  the cancellation hook if provided.
]]
function Promise.prototype:cancel()
  if self._status ~= Promise.Status.Started then
  	return
  end

  self._status = Promise.Status.Cancelled

  if self._cancellationHook then
  	self._cancellationHook()
  end

  if self._parent then
  	self._parent:_consumerCancelled(self)
  end

  for child in pairs(self._consumers) do
  	child:cancel()
  end

  self:_finalize()
end

--[[
  Used to decrease the number of consumers by 1, and if there are no more,
  cancel this promise.
]]
function Promise.prototype:_consumerCancelled(consumer)
  if self._status ~= Promise.Status.Started then
  	return
  end

  self._consumers[consumer] = nil

  if next(self._consumers) == nil then
  	self:cancel()
  end
end

--[[
  Used to set a handler for when the promise resolves, rejects, or is
  cancelled. Returns a new promise chained from this promise.
]]
function Promise.prototype:_finally(traceback, finallyHandler, onlyOk)
  if not onlyOk then
  	self._unhandledRejection = false
  end

  -- Return a promise chained off of this promise
  return Promise._new(traceback, function(resolve, reject)
  	local finallyCallback = resolve
  	if finallyHandler then
  		finallyCallback = createAdvancer(
  			traceback,
  			finallyHandler,
  			resolve,
  			reject
  		)
  	end

  	if onlyOk then
  		local callback = finallyCallback
  		finallyCallback = function(...)
  			if self._status == Promise.Status.Rejected then
  				return resolve(self)
  			end

  			return callback(...)
  		end
  	end

  	if self._status == Promise.Status.Started then
  		-- The promise is not settled, so queue this.
  		table.insert(self._queuedFinally, finallyCallback)
  	else
  		-- The promise already settled or was cancelled, run the callback now.
  		finallyCallback(self._status)
  	end
  end, self)
end

function Promise.prototype:finally(finallyHandler)
  assert(
  	finallyHandler == nil or type(finallyHandler) == "function",
  	string.format(ERROR_NON_FUNCTION, "Promise:finally")
  )
  return self:_finally(debug.traceback(nil, 2), finallyHandler)
end

--[[
  Calls a callback on `finally` with specific arguments.
]]
function Promise.prototype:finallyCall(callback, ...)
  assert(type(callback) == "function", string.format(ERROR_NON_FUNCTION, "Promise:finallyCall"))
  local length, values = pack(...)
  return self:_finally(debug.traceback(nil, 2), function()
  	return callback(unpack(values, 1, length))
  end)
end

--[[
  Shorthand for a finally handler that returns the given value.
]]
function Promise.prototype:finallyReturn(...)
  local length, values = pack(...)
  return self:_finally(debug.traceback(nil, 2), function()
  	return unpack(values, 1, length)
  end)
end

--[[
  Similar to finally, except rejections are propagated through it.
]]
function Promise.prototype:done(finallyHandler)
  assert(
  	finallyHandler == nil or type(finallyHandler) == "function",
  	string.format(ERROR_NON_FUNCTION, "Promise:done")
  )
  return self:_finally(debug.traceback(nil, 2), finallyHandler, true)
end

--[[
  Calls a callback on `done` with specific arguments.
]]
function Promise.prototype:doneCall(callback, ...)
  assert(type(callback) == "function", string.format(ERROR_NON_FUNCTION, "Promise:doneCall"))
  local length, values = pack(...)
  return self:_finally(debug.traceback(nil, 2), function()
  	return callback(unpack(values, 1, length))
  end, true)
end

--[[
  Shorthand for a done handler that returns the given value.
]]
function Promise.prototype:doneReturn(...)
  local length, values = pack(...)
  return self:_finally(debug.traceback(nil, 2), function()
  	return unpack(values, 1, length)
  end, true)
end

--[[
  Yield until the promise is completed.

  This matches the execution model of normal Roblox functions.
]]
function Promise.prototype:awaitStatus()
  self._unhandledRejection = false

  if self._status == Promise.Status.Started then
  	local bindable = Instance.new("BindableEvent")

  	self:finally(function()
  		bindable:Fire()
  	end)

  	bindable.Event:Wait()
  	bindable:Destroy()
  end

  if self._status == Promise.Status.Resolved then
  	return self._status, unpack(self._values, 1, self._valuesLength)
  elseif self._status == Promise.Status.Rejected then
  	return self._status, unpack(self._values, 1, self._valuesLength)
  end

  return self._status
end

local function awaitHelper(status, ...)
  return status == Promise.Status.Resolved, ...
end

--[[
  Calls awaitStatus internally, returns (isResolved, values...)
]]
function Promise.prototype:await()
  return awaitHelper(self:awaitStatus())
end

local function expectHelper(status, ...)
  if status ~= Promise.Status.Resolved then
  	error((...) == nil and "Expected Promise rejected with no value." or (...), 3)
  end

  return ...
end

--[[
  Calls await and only returns if the Promise resolves.
  Throws if the Promise rejects or gets cancelled.
]]
function Promise.prototype:expect()
  return expectHelper(self:awaitStatus())
end

-- Backwards compatibility
Promise.prototype.awaitValue = Promise.prototype.expect

--[[
  Intended for use in tests.

  Similar to await(), but instead of yielding if the promise is unresolved,
  _unwrap will throw. This indicates an assumption that a promise has
  resolved.
]]
function Promise.prototype:_unwrap()
  if self._status == Promise.Status.Started then
  	error("Promise has not resolved or rejected.", 2)
  end

  local success = self._status == Promise.Status.Resolved

  return success, unpack(self._values, 1, self._valuesLength)
end

function Promise.prototype:_resolve(...)
  if self._status ~= Promise.Status.Started then
  	if Promise.is((...)) then
  		(...):_consumerCancelled(self)
  	end
  	return
  end

  -- If the resolved value was a Promise, we chain onto it!
  if Promise.is((...)) then
  	-- Without this warning, arguments sometimes mysteriously disappear
  	if select("#", ...) > 1 then
  		local message = string.format(
  			"When returning a Promise from andThen, extra arguments are " ..
  			"discarded! See:\n\n%s",
  			self._source
  		)
  		warn(message)
  	end

  	local chainedPromise = ...

  	local promise = chainedPromise:andThen(
  		function(...)
  			self:_resolve(...)
  		end,
  		function(...)
  			local maybeRuntimeError = chainedPromise._values[1]

  			-- Backwards compatibility < v2
  			if chainedPromise._error then
  				maybeRuntimeError = Error.new({
  					error = chainedPromise._error,
  					kind = Error.Kind.ExecutionError,
  					context = "[No stack trace available as this Promise originated from an older version of the Promise library (< v2)]",
  				})
  			end

  			if Error.isKind(maybeRuntimeError, Error.Kind.ExecutionError) then
  				return self:_reject(maybeRuntimeError:extend({
  					error = "This Promise was chained to a Promise that errored.",
  					trace = "",
  					context = string.format(
  						"The Promise at:\n\n%s\n...Rejected because it was chained to the following Promise, which encountered an error:\n",
  						self._source
  					),
  				}))
  			end

  			self:_reject(...)
  		end
  	)

  	if promise._status == Promise.Status.Cancelled then
  		self:cancel()
  	elseif promise._status == Promise.Status.Started then
  		-- Adopt ourselves into promise for cancellation propagation.
  		self._parent = promise
  		promise._consumers[self] = true
  	end

  	return
  end

  self._status = Promise.Status.Resolved
  self._valuesLength, self._values = pack(...)

  -- We assume that these callbacks will not throw errors.
  for _, callback in ipairs(self._queuedResolve) do
  	coroutine.wrap(callback)(...)
  end

  self:_finalize()
end

function Promise.prototype:_reject(...)
  if self._status ~= Promise.Status.Started then
  	return
  end

  self._status = Promise.Status.Rejected
  self._valuesLength, self._values = pack(...)

  -- If there are any rejection handlers, call those!
  if not isEmpty(self._queuedReject) then
  	-- We assume that these callbacks will not throw errors.
  	for _, callback in ipairs(self._queuedReject) do
  		coroutine.wrap(callback)(...)
  	end
  else
  	-- At this point, no one was able to observe the error.
  	-- An error handler might still be attached if the error occurred
  	-- synchronously. We'll wait one tick, and if there are still no
  	-- observers, then we should put a message in the console.

  	local err = tostring((...))

  	coroutine.wrap(function()
  		Promise._timeEvent:Wait()

  		-- Someone observed the error, hooray!
  		if not self._unhandledRejection then
  			return
  		end

  		-- Build a reasonable message
  		local message = string.format(
  			"Unhandled Promise rejection:\n\n%s\n\n%s",
  			err,
  			self._source
  		)

  		if Promise.TEST then
  			-- Don't spam output when we're running tests.
  			return
  		end

  		warn(message)
  	end)()
  end

  self:_finalize()
end

--[[
  Calls any :finally handlers. We need this to be a separate method and
  queue because we must call all of the finally callbacks upon a success,
  failure, *and* cancellation.
]]
function Promise.prototype:_finalize()
  for _, callback in ipairs(self._queuedFinally) do
  	-- Purposefully not passing values to callbacks here, as it could be the
  	-- resolved values, or rejected errors. If the developer needs the values,
  	-- they should use :andThen or :catch explicitly.
  	coroutine.wrap(callback)(self._status)
  end

  self._queuedFinally = nil
  self._queuedReject = nil
  self._queuedResolve = nil

  -- Clear references to other Promises to allow gc
  if not Promise.TEST then
  	self._parent = nil
  	self._consumers = nil
  end
end

--[[
  Chains a Promise from this one that is resolved if this Promise is
  resolved, and rejected if it is not resolved.
]]
function Promise.prototype:now(rejectionValue)
  local traceback = debug.traceback(nil, 2)
  if self:getStatus() == Promise.Status.Resolved then
  	return self:_andThen(traceback, function(...)
  		return ...
  	end)
  else
  	return Promise.reject(rejectionValue == nil and Error.new({
  		kind = Error.Kind.NotResolvedInTime,
  		error = "This Promise was not resolved in time for :now()",
  		context = ":now() was called at:\n\n" .. traceback,
  	}) or rejectionValue)
  end
end

--[[
  Retries a Promise-returning callback N times until it succeeds.
]]
function Promise.retry(callback, times, ...)
  assert(type(callback) == "function", "Parameter #1 to Promise.retry must be a function")
  assert(type(times) == "number", "Parameter #2 to Promise.retry must be a number")

  local args, length = {...}, select("#", ...)

  return Promise.resolve(callback(...)):catch(function(...)
  	if times > 0 then
  		return Promise.retry(callback, times - 1, unpack(args, 1, length))
  	else
  		return Promise.reject(...)
  	end
  end)
end

--[[
  Converts an event into a Promise with an optional predicate
]]
function Promise.fromEvent(event, predicate)
  predicate = predicate or function()
  	return true
  end

  return Promise._new(debug.traceback(nil, 2), function(resolve, reject, onCancel)
  	local connection
  	local shouldDisconnect = false

  	local function disconnect()
  		connection:Disconnect()
  		connection = nil
  	end

  	-- We use shouldDisconnect because if the callback given to Connect is called before
  	-- Connect returns, connection will still be nil. This happens with events that queue up
  	-- events when there's nothing connected, such as RemoteEvents

  	connection = event:Connect(function(...)
  		local callbackValue = predicate(...)

  		if callbackValue == true then
  			resolve(...)

  			if connection then
  				disconnect()
  			else
  				shouldDisconnect = true
  			end
  		elseif type(callbackValue) ~= "boolean" then
  			error("Promise.fromEvent predicate should always return a boolean")
  		end
  	end)

  	if shouldDisconnect and connection then
  		return disconnect()
  	end

  	onCancel(function()
  		disconnect()
  	end)
  end)
end

return Promise
-----------------------------------

>--[[
 ^^^^
 source.luau comment.block.luau
>  Taken from: https://github.com/evaera/roblox-lua-promise
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>
 ^
 source.luau comment.block.luau
>  MIT License
 ^^^^^^^^^^^^^^
 source.luau comment.block.luau
>
 ^
 source.luau comment.block.luau
>  Copyright (c) 2019 Eryn L. K.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>
 ^
 source.luau comment.block.luau
>  Permission is hereby granted, free of charge, to any person obtaining a copy
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  of this software and associated documentation files (the "Software"), to deal
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  in the Software without restriction, including without limitation the rights
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  copies of the Software, and to permit persons to whom the Software is
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  furnished to do so, subject to the following conditions:
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>
 ^
 source.luau comment.block.luau
>  The above copyright notice and this permission notice shall be included in all
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  copies or substantial portions of the Software.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>
 ^
 source.luau comment.block.luau
>  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  SOFTWARE.
 ^^^^^^^^^^^^
 source.luau comment.block.luau
>
 ^
 source.luau comment.block.luau
>  An implementation of Promises similar to Promise/A+.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>
 ^
 source.luau
>local ERROR_NON_PROMISE_IN_LIST = "Non-promise value passed into %s at index %s"
 ^^^^^
 source.luau storage.modifier.local.luau
      ^
      source.luau
       ^^^^^^^^^^^^^^^^^^^^^^^^^
       source.luau variable.other.constant.luau
                                ^
                                source.luau
                                 ^
                                 source.luau keyword.operator.assignment.luau
                                  ^
                                  source.luau
                                   ^
                                   source.luau string.quoted.double.luau
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                    source.luau string.quoted.double.luau
                                                                                ^
                                                                                source.luau string.quoted.double.luau
>local ERROR_NON_LIST = "Please pass a list of promises to %s"
 ^^^^^
 source.luau storage.modifier.local.luau
      ^
      source.luau
       ^^^^^^^^^^^^^^
       source.luau variable.other.constant.luau
                     ^
                     source.luau
                      ^
                      source.luau keyword.operator.assignment.luau
                       ^
                       source.luau
                        ^
                        source.luau string.quoted.double.luau
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                         source.luau string.quoted.double.luau
                                                             ^
                                                             source.luau string.quoted.double.luau
>local ERROR_NON_FUNCTION = "Please pass a handler function to %s!"
 ^^^^^
 source.luau storage.modifier.local.luau
      ^
      source.luau
       ^^^^^^^^^^^^^^^^^^
       source.luau variable.other.constant.luau
                         ^
                         source.luau
                          ^
                          source.luau keyword.operator.assignment.luau
                           ^
                           source.luau
                            ^
                            source.luau string.quoted.double.luau
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             source.luau string.quoted.double.luau
                                                                  ^
                                                                  source.luau string.quoted.double.luau
>local MODE_KEY_METATABLE = {__mode = "k"}
 ^^^^^
 source.luau storage.modifier.local.luau
      ^
      source.luau
       ^^^^^^^^^^^^^^^^^^
       source.luau variable.other.constant.luau
                         ^
                         source.luau
                          ^
                          source.luau keyword.operator.assignment.luau
                           ^
                           source.luau
                            ^
                            source.luau punctuation.table.begin.luau
                             ^^^^^^
                             source.luau variable.other.readwrite.luau
                                   ^
                                   source.luau
                                    ^
                                    source.luau keyword.operator.assignment.luau
                                     ^
                                     source.luau
                                      ^
                                      source.luau string.quoted.double.luau
                                       ^
                                       source.luau string.quoted.double.luau
                                        ^
                                        source.luau string.quoted.double.luau
                                         ^
                                         source.luau punctuation.table.end.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Creates an enum dictionary with some metamethods to prevent common mistakes.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>local function makeEnum(enumName, members)
 ^^^^^
 source.luau meta.function.luau storage.modifier.local.luau
      ^
      source.luau meta.function.luau
       ^^^^^^^^
       source.luau meta.function.luau keyword.control.luau
               ^
               source.luau meta.function.luau
                ^^^^^^^^
                source.luau meta.function.luau entity.name.function.luau
                        ^
                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                         ^^^^^^^^
                         source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                 ^
                                 source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                  ^
                                  source.luau meta.function.luau meta.parameter.luau
                                   ^^^^^^^
                                   source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                          ^
                                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  local enum = {}
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^
         source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^
              source.luau keyword.operator.assignment.luau
               ^
               source.luau
                ^
                source.luau punctuation.table.begin.luau
                 ^
                 source.luau punctuation.table.end.luau
>
 ^
 source.luau
>  for _, memberName in ipairs(members) do
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau
       ^
       source.luau variable.parameter.luau
        ^^
        source.luau
          ^^^^^^^^^^
          source.luau variable.parameter.luau
                    ^
                    source.luau
                     ^^
                     source.luau keyword.control.luau
                       ^
                       source.luau
                        ^^^^^^
                        source.luau support.function.luau
                              ^
                              source.luau punctuation.arguments.begin.luau
                               ^^^^^^^
                               source.luau variable.other.readwrite.luau
                                      ^
                                      source.luau punctuation.arguments.end.luau
                                       ^
                                       source.luau
                                        ^^
                                        source.luau keyword.control.luau
>  	enum[memberName] = memberName
 ^^^
 source.luau
    ^^^^
    source.luau variable.other.readwrite.luau
        ^
        source.luau
         ^^^^^^^^^^
         source.luau variable.other.readwrite.luau
                   ^^
                   source.luau
                     ^
                     source.luau keyword.operator.assignment.luau
                      ^
                      source.luau
                       ^^^^^^^^^^
                       source.luau variable.other.readwrite.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  return setmetatable(enum, {
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^^^^^^
          source.luau support.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^
                       source.luau variable.other.readwrite.luau
                           ^
                           source.luau punctuation.separator.arguments.luau
                            ^
                            source.luau
                             ^
                             source.luau punctuation.table.begin.luau
>  	__index = function(_, k)
 ^^^
 source.luau
    ^^^^^^^
    source.luau variable.other.readwrite.luau
           ^
           source.luau
            ^
            source.luau keyword.operator.assignment.luau
             ^
             source.luau
              ^^^^^^^^
              source.luau meta.function.luau keyword.control.luau
                      ^
                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                       ^
                       source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                        ^
                        source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                         ^
                         source.luau meta.function.luau meta.parameter.luau
                          ^
                          source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                           ^
                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		error(string.format("%s is not in %s!", k, enumName), 2)
 ^^^^
 source.luau
     ^^^^^
     source.luau support.function.luau
          ^
          source.luau punctuation.arguments.begin.luau
           ^^^^^^^^^^^^^
           source.luau support.function.luau
                        ^
                        source.luau punctuation.arguments.begin.luau
                         ^
                         source.luau string.quoted.double.luau
                          ^^^^^^^^^^^^^^^^
                          source.luau string.quoted.double.luau
                                          ^
                                          source.luau string.quoted.double.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^
                                             source.luau variable.other.readwrite.luau
                                              ^
                                              source.luau punctuation.separator.arguments.luau
                                               ^
                                               source.luau
                                                ^^^^^^^^
                                                source.luau variable.other.readwrite.luau
                                                        ^
                                                        source.luau punctuation.arguments.end.luau
                                                         ^
                                                         source.luau punctuation.separator.arguments.luau
                                                          ^
                                                          source.luau
                                                           ^
                                                           source.luau constant.numeric.decimal.luau
                                                            ^
                                                            source.luau punctuation.arguments.end.luau
>  	end,
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau punctuation.separator.fields.luau
>  	__newindex = function()
 ^^^
 source.luau
    ^^^^^^^^^^
    source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^
               source.luau keyword.operator.assignment.luau
                ^
                source.luau
                 ^^^^^^^^
                 source.luau meta.function.luau keyword.control.luau
                         ^
                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                          ^
                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		error(string.format("Creating new members in %s is not allowed!", enumName), 2)
 ^^^^
 source.luau
     ^^^^^
     source.luau support.function.luau
          ^
          source.luau punctuation.arguments.begin.luau
           ^^^^^^^^^^^^^
           source.luau support.function.luau
                        ^
                        source.luau punctuation.arguments.begin.luau
                         ^
                         source.luau string.quoted.double.luau
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                          source.luau string.quoted.double.luau
                                                                    ^
                                                                    source.luau string.quoted.double.luau
                                                                     ^
                                                                     source.luau punctuation.separator.arguments.luau
                                                                      ^
                                                                      source.luau
                                                                       ^^^^^^^^
                                                                       source.luau variable.other.readwrite.luau
                                                                               ^
                                                                               source.luau punctuation.arguments.end.luau
                                                                                ^
                                                                                source.luau punctuation.separator.arguments.luau
                                                                                 ^
                                                                                 source.luau
                                                                                  ^
                                                                                  source.luau constant.numeric.decimal.luau
                                                                                   ^
                                                                                   source.luau punctuation.arguments.end.luau
>  	end,
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau punctuation.separator.fields.luau
>  })
 ^^
 source.luau
   ^
   source.luau punctuation.table.end.luau
    ^
    source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  An object to represent runtime errors that occur during execution.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  Promises that experience an error like this will be rejected with
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  an instance of this object.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>local Error do
 ^^^^^
 source.luau storage.modifier.local.luau
      ^
      source.luau
       ^^^^^
       source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^^
             source.luau keyword.control.luau
>  Error = {
 ^^
 source.luau
   ^^^^^
   source.luau variable.other.readwrite.luau
        ^
        source.luau
         ^
         source.luau keyword.operator.assignment.luau
          ^
          source.luau
           ^
           source.luau punctuation.table.begin.luau
>  	Kind = makeEnum("Promise.Error.Kind", {
 ^^^
 source.luau
    ^^^^
    source.luau variable.other.readwrite.luau
        ^
        source.luau
         ^
         source.luau keyword.operator.assignment.luau
          ^
          source.luau
           ^^^^^^^^
           source.luau entity.name.function.luau
                   ^
                   source.luau punctuation.arguments.begin.luau
                    ^
                    source.luau string.quoted.double.luau
                     ^^^^^^^^^^^^^^^^^^
                     source.luau string.quoted.double.luau
                                       ^
                                       source.luau string.quoted.double.luau
                                        ^
                                        source.luau punctuation.separator.arguments.luau
                                         ^
                                         source.luau
                                          ^
                                          source.luau punctuation.table.begin.luau
>  		"ExecutionError",
 ^^^^
 source.luau
     ^
     source.luau string.quoted.double.luau
      ^^^^^^^^^^^^^^
      source.luau string.quoted.double.luau
                    ^
                    source.luau string.quoted.double.luau
                     ^
                     source.luau punctuation.separator.fields.luau
>  		"AlreadyCancelled",
 ^^^^
 source.luau
     ^
     source.luau string.quoted.double.luau
      ^^^^^^^^^^^^^^^^
      source.luau string.quoted.double.luau
                      ^
                      source.luau string.quoted.double.luau
                       ^
                       source.luau punctuation.separator.fields.luau
>  		"NotResolvedInTime",
 ^^^^
 source.luau
     ^
     source.luau string.quoted.double.luau
      ^^^^^^^^^^^^^^^^^
      source.luau string.quoted.double.luau
                       ^
                       source.luau string.quoted.double.luau
                        ^
                        source.luau punctuation.separator.fields.luau
>  		"TimedOut",
 ^^^^
 source.luau
     ^
     source.luau string.quoted.double.luau
      ^^^^^^^^
      source.luau string.quoted.double.luau
              ^
              source.luau string.quoted.double.luau
               ^
               source.luau punctuation.separator.fields.luau
>  	}),
 ^^^
 source.luau
    ^
    source.luau punctuation.table.end.luau
     ^
     source.luau punctuation.arguments.end.luau
      ^
      source.luau punctuation.separator.fields.luau
>  }
 ^^
 source.luau
   ^
   source.luau punctuation.table.end.luau
>  Error.__index = Error
 ^^
 source.luau
   ^^^^^
   source.luau variable.other.readwrite.luau
        ^
        source.luau
         ^^^^^^^
         source.luau variable.language.metamethod.luau
                ^
                source.luau
                 ^
                 source.luau keyword.operator.assignment.luau
                  ^
                  source.luau
                   ^^^^^
                   source.luau variable.other.readwrite.luau
>
 ^
 source.luau
>  function Error.new(options, parent)
 ^^
 source.luau
   ^^^^^^^^
   source.luau meta.function.luau keyword.control.luau
           ^
           source.luau meta.function.luau
            ^^^^^
            source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^
                  source.luau meta.function.luau entity.name.function.luau
                     ^
                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                      ^^^^^^^
                      source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                             ^
                             source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                              ^
                              source.luau meta.function.luau meta.parameter.luau
                               ^^^^^^
                               source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                     ^
                                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	options = options or {}
 ^^^
 source.luau
    ^^^^^^^
    source.luau variable.other.readwrite.luau
           ^
           source.luau
            ^
            source.luau keyword.operator.assignment.luau
             ^
             source.luau
              ^^^^^^^
              source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^^
                      source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                        ^
                        source.luau
                         ^
                         source.luau punctuation.table.begin.luau
                          ^
                          source.luau punctuation.table.end.luau
>  	return setmetatable({
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^^^^^^^
           source.luau support.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^
                        source.luau punctuation.table.begin.luau
>  		error = tostring(options.error) or "[This error has no error text.]",
 ^^^^
 source.luau
     ^^^^^
     source.luau support.function.luau
          ^
          source.luau
           ^
           source.luau keyword.operator.assignment.luau
            ^
            source.luau
             ^^^^^^^^
             source.luau support.function.luau
                     ^
                     source.luau punctuation.arguments.begin.luau
                      ^^^^^^^
                      source.luau variable.other.readwrite.luau
                             ^
                             source.luau
                              ^^^^^
                              source.luau variable.other.property.luau
                                   ^
                                   source.luau punctuation.arguments.end.luau
                                    ^
                                    source.luau
                                     ^^
                                     source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                                       ^
                                       source.luau
                                        ^
                                        source.luau string.quoted.double.luau
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                         source.luau string.quoted.double.luau
                                                                        ^
                                                                        source.luau string.quoted.double.luau
                                                                         ^
                                                                         source.luau punctuation.separator.fields.luau
>  		trace = options.trace,
 ^^^^
 source.luau
     ^^^^^
     source.luau variable.other.readwrite.luau
          ^
          source.luau
           ^
           source.luau keyword.operator.assignment.luau
            ^
            source.luau
             ^^^^^^^
             source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^^^^^
                     source.luau variable.other.property.luau
                          ^
                          source.luau punctuation.separator.fields.luau
>  		context = options.context,
 ^^^^
 source.luau
     ^^^^^^^
     source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^
             source.luau keyword.operator.assignment.luau
              ^
              source.luau
               ^^^^^^^
               source.luau variable.other.readwrite.luau
                      ^
                      source.luau
                       ^^^^^^^
                       source.luau variable.other.property.luau
                              ^
                              source.luau punctuation.separator.fields.luau
>  		kind = options.kind,
 ^^^^
 source.luau
     ^^^^
     source.luau variable.other.readwrite.luau
         ^
         source.luau
          ^
          source.luau keyword.operator.assignment.luau
           ^
           source.luau
            ^^^^^^^
            source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^^^^
                    source.luau variable.other.property.luau
                        ^
                        source.luau punctuation.separator.fields.luau
>  		parent = parent,
 ^^^^
 source.luau
     ^^^^^^
     source.luau variable.other.readwrite.luau
           ^
           source.luau
            ^
            source.luau keyword.operator.assignment.luau
             ^
             source.luau
              ^^^^^^
              source.luau variable.other.readwrite.luau
                    ^
                    source.luau punctuation.separator.fields.luau
>  		createdTick = os.clock(),
 ^^^^
 source.luau
     ^^^^^^^^^^^
     source.luau variable.other.readwrite.luau
                ^
                source.luau
                 ^
                 source.luau keyword.operator.assignment.luau
                  ^
                  source.luau
                   ^^^^^^^^
                   source.luau support.function.luau
                           ^
                           source.luau punctuation.arguments.begin.luau
                            ^
                            source.luau punctuation.arguments.end.luau
                             ^
                             source.luau punctuation.separator.fields.luau
>  		createdTrace = debug.traceback(),
 ^^^^
 source.luau
     ^^^^^^^^^^^^
     source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^
                  source.luau keyword.operator.assignment.luau
                   ^
                   source.luau
                    ^^^^^^^^^^^^^^^
                    source.luau support.function.luau
                                   ^
                                   source.luau punctuation.arguments.begin.luau
                                    ^
                                    source.luau punctuation.arguments.end.luau
                                     ^
                                     source.luau punctuation.separator.fields.luau
>  	}, Error)
 ^^^
 source.luau
    ^
    source.luau punctuation.table.end.luau
     ^
     source.luau punctuation.separator.arguments.luau
      ^
      source.luau
       ^^^^^
       source.luau variable.other.readwrite.luau
            ^
            source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  function Error.is(anything)
 ^^
 source.luau
   ^^^^^^^^
   source.luau meta.function.luau keyword.control.luau
           ^
           source.luau meta.function.luau
            ^^^^^
            source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^
                  source.luau meta.function.luau entity.name.function.luau
                    ^
                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                     ^^^^^^^^
                     source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                             ^
                             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	if type(anything) == "table" then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^
       source.luau support.function.luau
           ^
           source.luau punctuation.arguments.begin.luau
            ^^^^^^^^
            source.luau variable.other.readwrite.luau
                    ^
                    source.luau punctuation.arguments.end.luau
                     ^
                     source.luau
                      ^^
                      source.luau keyword.operator.comparison.luau
                        ^
                        source.luau
                         ^
                         source.luau string.quoted.double.luau
                          ^^^^^
                          source.luau string.quoted.double.luau
                               ^
                               source.luau string.quoted.double.luau
                                ^
                                source.luau
                                 ^^^^
                                 source.luau keyword.control.luau
>  		local metatable = getmetatable(anything)
 ^^^^
 source.luau
     ^^^^^
     source.luau storage.modifier.local.luau
          ^
          source.luau
           ^^^^^^^^^
           source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^
                     source.luau keyword.operator.assignment.luau
                      ^
                      source.luau
                       ^^^^^^^^^^^^
                       source.luau support.function.luau
                                   ^
                                   source.luau punctuation.arguments.begin.luau
                                    ^^^^^^^^
                                    source.luau variable.other.readwrite.luau
                                            ^
                                            source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  		if type(metatable) == "table" then
 ^^^^
 source.luau
     ^^
     source.luau keyword.control.luau
       ^
       source.luau
        ^^^^
        source.luau support.function.luau
            ^
            source.luau punctuation.arguments.begin.luau
             ^^^^^^^^^
             source.luau variable.other.readwrite.luau
                      ^
                      source.luau punctuation.arguments.end.luau
                       ^
                       source.luau
                        ^^
                        source.luau keyword.operator.comparison.luau
                          ^
                          source.luau
                           ^
                           source.luau string.quoted.double.luau
                            ^^^^^
                            source.luau string.quoted.double.luau
                                 ^
                                 source.luau string.quoted.double.luau
                                  ^
                                  source.luau
                                   ^^^^
                                   source.luau keyword.control.luau
>  			return rawget(anything, "error") ~= nil and type(rawget(metatable, "extend")) == "function"
 ^^^^^
 source.luau
      ^^^^^^
      source.luau keyword.control.luau
            ^
            source.luau
             ^^^^^^
             source.luau entity.name.function.luau
                   ^
                   source.luau punctuation.arguments.begin.luau
                    ^^^^^^^^
                    source.luau variable.other.readwrite.luau
                            ^
                            source.luau punctuation.separator.arguments.luau
                             ^
                             source.luau
                              ^
                              source.luau string.quoted.double.luau
                               ^^^^^
                               source.luau string.quoted.double.luau
                                    ^
                                    source.luau string.quoted.double.luau
                                     ^
                                     source.luau punctuation.arguments.end.luau
                                      ^
                                      source.luau
                                       ^^
                                       source.luau keyword.operator.comparison.luau
                                         ^
                                         source.luau
                                          ^^^
                                          source.luau constant.language.nil.luau
                                             ^
                                             source.luau
                                              ^^^
                                              source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                                                 ^
                                                 source.luau
                                                  ^^^^
                                                  source.luau support.function.luau
                                                      ^
                                                      source.luau punctuation.arguments.begin.luau
                                                       ^^^^^^
                                                       source.luau entity.name.function.luau
                                                             ^
                                                             source.luau punctuation.arguments.begin.luau
                                                              ^^^^^^^^^
                                                              source.luau variable.other.readwrite.luau
                                                                       ^
                                                                       source.luau punctuation.separator.arguments.luau
                                                                        ^
                                                                        source.luau
                                                                         ^
                                                                         source.luau string.quoted.double.luau
                                                                          ^^^^^^
                                                                          source.luau string.quoted.double.luau
                                                                                ^
                                                                                source.luau string.quoted.double.luau
                                                                                 ^
                                                                                 source.luau punctuation.arguments.end.luau
                                                                                  ^
                                                                                  source.luau punctuation.arguments.end.luau
                                                                                   ^
                                                                                   source.luau
                                                                                    ^^
                                                                                    source.luau keyword.operator.comparison.luau
                                                                                      ^
                                                                                      source.luau
                                                                                       ^
                                                                                       source.luau string.quoted.double.luau
                                                                                        ^^^^^^^^
                                                                                        source.luau string.quoted.double.luau
                                                                                                ^
                                                                                                source.luau string.quoted.double.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	return false
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^
           source.luau constant.language.boolean.false.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  function Error.isKind(anything, kind)
 ^^
 source.luau
   ^^^^^^^^
   source.luau meta.function.luau keyword.control.luau
           ^
           source.luau meta.function.luau
            ^^^^^
            source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                        ^
                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                         ^^^^^^^^
                         source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                 ^
                                 source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                  ^
                                  source.luau meta.function.luau meta.parameter.luau
                                   ^^^^
                                   source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                       ^
                                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	assert(kind ~= nil, "Argument #2 to Promise.Error.isKind must not be nil")
 ^^^
 source.luau
    ^^^^^^
    source.luau support.function.luau
          ^
          source.luau punctuation.arguments.begin.luau
           ^^^^
           source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^^
                source.luau keyword.operator.comparison.luau
                  ^
                  source.luau
                   ^^^
                   source.luau constant.language.nil.luau
                      ^
                      source.luau punctuation.separator.arguments.luau
                       ^
                       source.luau
                        ^
                        source.luau string.quoted.double.luau
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                         source.luau string.quoted.double.luau
                                                                            ^
                                                                            source.luau string.quoted.double.luau
                                                                             ^
                                                                             source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  	return Error.is(anything) and anything.kind == kind
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^
           source.luau variable.other.readwrite.luau
                ^
                source.luau
                 ^^
                 source.luau entity.name.function.luau
                   ^
                   source.luau punctuation.arguments.begin.luau
                    ^^^^^^^^
                    source.luau variable.other.readwrite.luau
                            ^
                            source.luau punctuation.arguments.end.luau
                             ^
                             source.luau
                              ^^^
                              source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                                 ^
                                 source.luau
                                  ^^^^^^^^
                                  source.luau variable.other.readwrite.luau
                                          ^
                                          source.luau
                                           ^^^^
                                           source.luau variable.other.property.luau
                                               ^
                                               source.luau
                                                ^^
                                                source.luau keyword.operator.comparison.luau
                                                  ^
                                                  source.luau
                                                   ^^^^
                                                   source.luau variable.other.readwrite.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  function Error:extend(options)
 ^^
 source.luau
   ^^^^^^^^
   source.luau meta.function.luau keyword.control.luau
           ^
           source.luau meta.function.luau
            ^^^^^
            source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                        ^
                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                         ^^^^^^^
                         source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                ^
                                source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	options = options or {}
 ^^^
 source.luau
    ^^^^^^^
    source.luau variable.other.readwrite.luau
           ^
           source.luau
            ^
            source.luau keyword.operator.assignment.luau
             ^
             source.luau
              ^^^^^^^
              source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^^
                      source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                        ^
                        source.luau
                         ^
                         source.luau punctuation.table.begin.luau
                          ^
                          source.luau punctuation.table.end.luau
>
 ^
 source.luau
>  	options.kind = options.kind or self.kind
 ^^^
 source.luau
    ^^^^^^^
    source.luau variable.other.readwrite.luau
           ^
           source.luau
            ^^^^
            source.luau variable.other.property.luau
                ^
                source.luau
                 ^
                 source.luau keyword.operator.assignment.luau
                  ^
                  source.luau
                   ^^^^^^^
                   source.luau variable.other.readwrite.luau
                          ^
                          source.luau
                           ^^^^
                           source.luau variable.other.property.luau
                               ^
                               source.luau
                                ^^
                                source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                                  ^
                                  source.luau
                                   ^^^^
                                   source.luau variable.language.self.luau
                                       ^
                                       source.luau
                                        ^^^^
                                        source.luau variable.other.property.luau
>
 ^
 source.luau
>  	return Error.new(options, self)
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^
           source.luau variable.other.readwrite.luau
                ^
                source.luau
                 ^^^
                 source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^^^^^^^
                     source.luau variable.other.readwrite.luau
                            ^
                            source.luau punctuation.separator.arguments.luau
                             ^
                             source.luau
                              ^^^^
                              source.luau variable.language.self.luau
                                  ^
                                  source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  function Error:getErrorChain()
 ^^
 source.luau
   ^^^^^^^^
   source.luau meta.function.luau keyword.control.luau
           ^
           source.luau meta.function.luau
            ^^^^^
            source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                               ^
                               source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                ^
                                source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	local runtimeErrors = { self }
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^
                          source.luau punctuation.table.begin.luau
                           ^
                           source.luau
                            ^^^^
                            source.luau variable.language.self.luau
                                ^
                                source.luau
                                 ^
                                 source.luau punctuation.table.end.luau
>
 ^
 source.luau
>  	while runtimeErrors[#runtimeErrors].parent do
 ^^^
 source.luau
    ^^^^^
    source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.other.luau
                         ^^^^^^^^^^^^^
                         source.luau variable.other.readwrite.luau
                                      ^^
                                      source.luau
                                        ^^^^^^
                                        source.luau variable.other.property.luau
                                              ^
                                              source.luau
                                               ^^
                                               source.luau keyword.control.luau
>  		table.insert(runtimeErrors, runtimeErrors[#runtimeErrors].parent)
 ^^^^
 source.luau
     ^^^^^^^^^^^^
     source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^^^^^^^^^^
                  source.luau variable.other.readwrite.luau
                               ^
                               source.luau punctuation.separator.arguments.luau
                                ^
                                source.luau
                                 ^^^^^^^^^^^^^
                                 source.luau variable.other.readwrite.luau
                                              ^
                                              source.luau
                                               ^
                                               source.luau keyword.operator.other.luau
                                                ^^^^^^^^^^^^^
                                                source.luau variable.other.readwrite.luau
                                                             ^^
                                                             source.luau
                                                               ^^^^^^
                                                               source.luau variable.other.property.luau
                                                                     ^
                                                                     source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	return runtimeErrors
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^^^^^^^^
           source.luau variable.other.readwrite.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  function Error:__tostring()
 ^^
 source.luau
   ^^^^^^^^
   source.luau meta.function.luau keyword.control.luau
           ^
           source.luau meta.function.luau
            ^^^^^
            source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^^
                  source.luau meta.function.luau variable.language.metamethod.luau
                            ^
                            source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                             ^
                             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	local errorStrings = {
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                      ^
                      source.luau
                       ^
                       source.luau keyword.operator.assignment.luau
                        ^
                        source.luau
                         ^
                         source.luau punctuation.table.begin.luau
>  		string.format("-- Promise.Error(%s) --", self.kind or "?"),
 ^^^^
 source.luau
     ^^^^^^^^^^^^^
     source.luau support.function.luau
                  ^
                  source.luau punctuation.arguments.begin.luau
                   ^
                   source.luau string.quoted.double.luau
                    ^^^^^^^^^^^^^^^^^^^^^^^
                    source.luau string.quoted.double.luau
                                           ^
                                           source.luau string.quoted.double.luau
                                            ^
                                            source.luau punctuation.separator.arguments.luau
                                             ^
                                             source.luau
                                              ^^^^
                                              source.luau variable.language.self.luau
                                                  ^
                                                  source.luau
                                                   ^^^^
                                                   source.luau variable.other.property.luau
                                                       ^
                                                       source.luau
                                                        ^^
                                                        source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                                                          ^
                                                          source.luau
                                                           ^
                                                           source.luau string.quoted.double.luau
                                                            ^
                                                            source.luau string.quoted.double.luau
                                                             ^
                                                             source.luau string.quoted.double.luau
                                                              ^
                                                              source.luau punctuation.arguments.end.luau
                                                               ^
                                                               source.luau punctuation.separator.fields.luau
>  	}
 ^^^
 source.luau
    ^
    source.luau punctuation.table.end.luau
>
 ^
 source.luau
>  	for _, runtimeError in ipairs(self:getErrorChain()) do
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau
        ^
        source.luau variable.parameter.luau
         ^^
         source.luau
           ^^^^^^^^^^^^
           source.luau variable.parameter.luau
                       ^
                       source.luau
                        ^^
                        source.luau keyword.control.luau
                          ^
                          source.luau
                           ^^^^^^
                           source.luau support.function.luau
                                 ^
                                 source.luau punctuation.arguments.begin.luau
                                  ^^^^
                                  source.luau variable.language.self.luau
                                      ^
                                      source.luau
                                       ^^^^^^^^^^^^^
                                       source.luau entity.name.function.luau
                                                    ^
                                                    source.luau punctuation.arguments.begin.luau
                                                     ^
                                                     source.luau punctuation.arguments.end.luau
                                                      ^
                                                      source.luau punctuation.arguments.end.luau
                                                       ^
                                                       source.luau
                                                        ^^
                                                        source.luau keyword.control.luau
>  		table.insert(errorStrings, table.concat({
 ^^^^
 source.luau
     ^^^^^^^^^^^^
     source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^^^^^^^^^
                  source.luau variable.other.readwrite.luau
                              ^
                              source.luau punctuation.separator.arguments.luau
                               ^
                               source.luau
                                ^^^^^^^^^^^^
                                source.luau support.function.luau
                                            ^
                                            source.luau punctuation.arguments.begin.luau
                                             ^
                                             source.luau punctuation.table.begin.luau
>  			runtimeError.trace or runtimeError.error,
 ^^^^^
 source.luau
      ^^^^^^^^^^^^
      source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^^^^
                   source.luau variable.other.property.luau
                        ^
                        source.luau
                         ^^
                         source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                           ^
                           source.luau
                            ^^^^^^^^^^^^
                            source.luau variable.other.readwrite.luau
                                        ^
                                        source.luau
                                         ^^^^^
                                         source.luau variable.other.property.luau
                                              ^
                                              source.luau punctuation.separator.fields.luau
>  			runtimeError.context,
 ^^^^^
 source.luau
      ^^^^^^^^^^^^
      source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^^^^^^
                   source.luau variable.other.property.luau
                          ^
                          source.luau punctuation.separator.fields.luau
>  		}, "\n"))
 ^^^^
 source.luau
     ^
     source.luau punctuation.table.end.luau
      ^
      source.luau punctuation.separator.arguments.luau
       ^
       source.luau
        ^
        source.luau string.quoted.double.luau
         ^^
         source.luau string.quoted.double.luau constant.character.escape.luau
           ^
           source.luau string.quoted.double.luau
            ^
            source.luau punctuation.arguments.end.luau
             ^
             source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	return table.concat(errorStrings, "\n")
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^^^^^^^
           source.luau support.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^
                        source.luau variable.other.readwrite.luau
                                    ^
                                    source.luau punctuation.separator.arguments.luau
                                     ^
                                     source.luau
                                      ^
                                      source.luau string.quoted.double.luau
                                       ^^
                                       source.luau string.quoted.double.luau constant.character.escape.luau
                                         ^
                                         source.luau string.quoted.double.luau
                                          ^
                                          source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Packs a number of arguments into a table and returns its length.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>
 ^
 source.luau comment.block.luau
>  Used to cajole varargs without dropping sparse values.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>local function pack(...)
 ^^^^^
 source.luau meta.function.luau storage.modifier.local.luau
      ^
      source.luau meta.function.luau
       ^^^^^^^^
       source.luau meta.function.luau keyword.control.luau
               ^
               source.luau meta.function.luau
                ^^^^
                source.luau meta.function.luau entity.name.function.luau
                    ^
                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                     ^^^
                     source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                        ^
                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  return select("#", ...), { ... }
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^
          source.luau support.function.luau
                ^
                source.luau punctuation.arguments.begin.luau
                 ^
                 source.luau string.quoted.double.luau
                  ^
                  source.luau string.quoted.double.luau
                   ^
                   source.luau string.quoted.double.luau
                    ^
                    source.luau punctuation.separator.arguments.luau
                     ^
                     source.luau
                      ^^^
                      source.luau keyword.other.unit.luau
                         ^
                         source.luau punctuation.arguments.end.luau
                          ^^
                          source.luau
                            ^
                            source.luau punctuation.table.begin.luau
                             ^
                             source.luau
                              ^^^
                              source.luau keyword.other.unit.luau
                                 ^
                                 source.luau
                                  ^
                                  source.luau punctuation.table.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Returns first value (success), and packs all following values.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>local function packResult(success, ...)
 ^^^^^
 source.luau meta.function.luau storage.modifier.local.luau
      ^
      source.luau meta.function.luau
       ^^^^^^^^
       source.luau meta.function.luau keyword.control.luau
               ^
               source.luau meta.function.luau
                ^^^^^^^^^^
                source.luau meta.function.luau entity.name.function.luau
                          ^
                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                           ^^^^^^^
                           source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                  ^
                                  source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                   ^
                                   source.luau meta.function.luau meta.parameter.luau
                                    ^^^
                                    source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                       ^
                                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  return success, select("#", ...), { ... }
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^^
                 source.luau
                   ^^^^^^
                   source.luau support.function.luau
                         ^
                         source.luau punctuation.arguments.begin.luau
                          ^
                          source.luau string.quoted.double.luau
                           ^
                           source.luau string.quoted.double.luau
                            ^
                            source.luau string.quoted.double.luau
                             ^
                             source.luau punctuation.separator.arguments.luau
                              ^
                              source.luau
                               ^^^
                               source.luau keyword.other.unit.luau
                                  ^
                                  source.luau punctuation.arguments.end.luau
                                   ^^
                                   source.luau
                                     ^
                                     source.luau punctuation.table.begin.luau
                                      ^
                                      source.luau
                                       ^^^
                                       source.luau keyword.other.unit.luau
                                          ^
                                          source.luau
                                           ^
                                           source.luau punctuation.table.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>
 ^
 source.luau
>local function makeErrorHandler(traceback)
 ^^^^^
 source.luau meta.function.luau storage.modifier.local.luau
      ^
      source.luau meta.function.luau
       ^^^^^^^^
       source.luau meta.function.luau keyword.control.luau
               ^
               source.luau meta.function.luau
                ^^^^^^^^^^^^^^^^
                source.luau meta.function.luau entity.name.function.luau
                                ^
                                source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                 ^^^^^^^^^
                                 source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                          ^
                                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  assert(traceback ~= nil)
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^^^^^^
          source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^^
                    source.luau keyword.operator.comparison.luau
                      ^
                      source.luau
                       ^^^
                       source.luau constant.language.nil.luau
                          ^
                          source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  return function(err)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^^
          source.luau meta.function.luau keyword.control.luau
                  ^
                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                   ^^^
                   source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                      ^
                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	-- If the error object is already a table, forward it directly.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- Should we extend the error here and add our own trace?
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>
 ^
 source.luau
>  	if type(err) == "table" then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^
       source.luau support.function.luau
           ^
           source.luau punctuation.arguments.begin.luau
            ^^^
            source.luau variable.other.readwrite.luau
               ^
               source.luau punctuation.arguments.end.luau
                ^
                source.luau
                 ^^
                 source.luau keyword.operator.comparison.luau
                   ^
                   source.luau
                    ^
                    source.luau string.quoted.double.luau
                     ^^^^^
                     source.luau string.quoted.double.luau
                          ^
                          source.luau string.quoted.double.luau
                           ^
                           source.luau
                            ^^^^
                            source.luau keyword.control.luau
>  		return err
 ^^^^
 source.luau
     ^^^^^^
     source.luau keyword.control.luau
           ^
           source.luau
            ^^^
            source.luau variable.other.readwrite.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	return Error.new({
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^
           source.luau variable.other.readwrite.luau
                ^
                source.luau
                 ^^^
                 source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^
                     source.luau punctuation.table.begin.luau
>  		error = err,
 ^^^^
 source.luau
     ^^^^^
     source.luau support.function.luau
          ^
          source.luau
           ^
           source.luau keyword.operator.assignment.luau
            ^
            source.luau
             ^^^
             source.luau variable.other.readwrite.luau
                ^
                source.luau punctuation.separator.fields.luau
>  		kind = Error.Kind.ExecutionError,
 ^^^^
 source.luau
     ^^^^
     source.luau variable.other.readwrite.luau
         ^
         source.luau
          ^
          source.luau keyword.operator.assignment.luau
           ^
           source.luau
            ^^^^^
            source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau variable.other.property.luau
                      ^
                      source.luau
                       ^^^^^^^^^^^^^^
                       source.luau variable.other.property.luau
                                     ^
                                     source.luau punctuation.separator.fields.luau
>  		trace = debug.traceback(tostring(err), 2),
 ^^^^
 source.luau
     ^^^^^
     source.luau variable.other.readwrite.luau
          ^
          source.luau
           ^
           source.luau keyword.operator.assignment.luau
            ^
            source.luau
             ^^^^^^^^^^^^^^^
             source.luau support.function.luau
                            ^
                            source.luau punctuation.arguments.begin.luau
                             ^^^^^^^^
                             source.luau support.function.luau
                                     ^
                                     source.luau punctuation.arguments.begin.luau
                                      ^^^
                                      source.luau variable.other.readwrite.luau
                                         ^
                                         source.luau punctuation.arguments.end.luau
                                          ^
                                          source.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau
                                            ^
                                            source.luau constant.numeric.decimal.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
                                              ^
                                              source.luau punctuation.separator.fields.luau
>  		context = "Promise created at:\n\n" .. traceback,
 ^^^^
 source.luau
     ^^^^^^^
     source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^
             source.luau keyword.operator.assignment.luau
              ^
              source.luau
               ^
               source.luau string.quoted.double.luau
                ^^^^^^^^^^^^^^^^^^^
                source.luau string.quoted.double.luau
                                   ^^
                                   source.luau string.quoted.double.luau constant.character.escape.luau
                                     ^^
                                     source.luau string.quoted.double.luau constant.character.escape.luau
                                       ^
                                       source.luau string.quoted.double.luau
                                        ^
                                        source.luau
                                         ^^
                                         source.luau keyword.operator.other.luau
                                           ^
                                           source.luau
                                            ^^^^^^^^^
                                            source.luau variable.other.readwrite.luau
                                                     ^
                                                     source.luau punctuation.separator.fields.luau
>  	})
 ^^^
 source.luau
    ^
    source.luau punctuation.table.end.luau
     ^
     source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Calls a Promise executor with error handling.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>local function runExecutor(traceback, callback, ...)
 ^^^^^
 source.luau meta.function.luau storage.modifier.local.luau
      ^
      source.luau meta.function.luau
       ^^^^^^^^
       source.luau meta.function.luau keyword.control.luau
               ^
               source.luau meta.function.luau
                ^^^^^^^^^^^
                source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                            ^^^^^^^^^
                            source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                     ^
                                     source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                      ^
                                      source.luau meta.function.luau meta.parameter.luau
                                       ^^^^^^^^
                                       source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                               ^
                                               source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau meta.function.luau meta.parameter.luau
                                                 ^^^
                                                 source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                                    ^
                                                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  return packResult(xpcall(callback, makeErrorHandler(traceback), ...))
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^^^^
          source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^^^^^^
                     source.luau support.function.luau
                           ^
                           source.luau punctuation.arguments.begin.luau
                            ^^^^^^^^
                            source.luau variable.other.readwrite.luau
                                    ^
                                    source.luau punctuation.separator.arguments.luau
                                     ^
                                     source.luau
                                      ^^^^^^^^^^^^^^^^
                                      source.luau entity.name.function.luau
                                                      ^
                                                      source.luau punctuation.arguments.begin.luau
                                                       ^^^^^^^^^
                                                       source.luau variable.other.readwrite.luau
                                                                ^
                                                                source.luau punctuation.arguments.end.luau
                                                                 ^
                                                                 source.luau punctuation.separator.arguments.luau
                                                                  ^
                                                                  source.luau
                                                                   ^^^
                                                                   source.luau keyword.other.unit.luau
                                                                      ^
                                                                      source.luau punctuation.arguments.end.luau
                                                                       ^
                                                                       source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Creates a function that invokes a callback with correct error handling and
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  resolution mechanisms.
 ^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>local function createAdvancer(traceback, callback, resolve, reject)
 ^^^^^
 source.luau meta.function.luau storage.modifier.local.luau
      ^
      source.luau meta.function.luau
       ^^^^^^^^
       source.luau meta.function.luau keyword.control.luau
               ^
               source.luau meta.function.luau
                ^^^^^^^^^^^^^^
                source.luau meta.function.luau entity.name.function.luau
                              ^
                              source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                               ^^^^^^^^^
                               source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                        ^
                                        source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                         ^
                                         source.luau meta.function.luau meta.parameter.luau
                                          ^^^^^^^^
                                          source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                  ^
                                                  source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                   ^
                                                   source.luau meta.function.luau meta.parameter.luau
                                                    ^^^^^^^
                                                    source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                           ^
                                                           source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                            ^
                                                            source.luau meta.function.luau meta.parameter.luau
                                                             ^^^^^^
                                                             source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                   ^
                                                                   source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  return function(...)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^^
          source.luau meta.function.luau keyword.control.luau
                  ^
                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                   ^^^
                   source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                      ^
                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	local ok, resultLength, result = runExecutor(traceback, callback, ...)
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^
          source.luau variable.other.readwrite.luau
            ^^
            source.luau
              ^^^^^^^^^^^^
              source.luau variable.other.readwrite.luau
                          ^^
                          source.luau
                            ^^^^^^
                            source.luau variable.other.readwrite.luau
                                  ^
                                  source.luau
                                   ^
                                   source.luau keyword.operator.assignment.luau
                                    ^
                                    source.luau
                                     ^^^^^^^^^^^
                                     source.luau entity.name.function.luau
                                                ^
                                                source.luau punctuation.arguments.begin.luau
                                                 ^^^^^^^^^
                                                 source.luau variable.other.readwrite.luau
                                                          ^
                                                          source.luau punctuation.separator.arguments.luau
                                                           ^
                                                           source.luau
                                                            ^^^^^^^^
                                                            source.luau variable.other.readwrite.luau
                                                                    ^
                                                                    source.luau punctuation.separator.arguments.luau
                                                                     ^
                                                                     source.luau
                                                                      ^^^
                                                                      source.luau keyword.other.unit.luau
                                                                         ^
                                                                         source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  	if ok then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^
       source.luau variable.other.readwrite.luau
         ^
         source.luau
          ^^^^
          source.luau keyword.control.luau
>  		resolve(unpack(result, 1, resultLength))
 ^^^^
 source.luau
     ^^^^^^^
     source.luau entity.name.function.luau
            ^
            source.luau punctuation.arguments.begin.luau
             ^^^^^^
             source.luau support.function.luau
                   ^
                   source.luau punctuation.arguments.begin.luau
                    ^^^^^^
                    source.luau variable.other.readwrite.luau
                          ^
                          source.luau punctuation.separator.arguments.luau
                           ^
                           source.luau
                            ^
                            source.luau constant.numeric.decimal.luau
                             ^
                             source.luau punctuation.separator.arguments.luau
                              ^
                              source.luau
                               ^^^^^^^^^^^^
                               source.luau variable.other.readwrite.luau
                                           ^
                                           source.luau punctuation.arguments.end.luau
                                            ^
                                            source.luau punctuation.arguments.end.luau
>  	else
 ^^^
 source.luau
    ^^^^
    source.luau keyword.control.luau
>  		reject(result[1])
 ^^^^
 source.luau
     ^^^^^^
     source.luau entity.name.function.luau
           ^
           source.luau punctuation.arguments.begin.luau
            ^^^^^^
            source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^
                   source.luau constant.numeric.decimal.luau
                    ^
                    source.luau
                     ^
                     source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>local function isEmpty(t)
 ^^^^^
 source.luau meta.function.luau storage.modifier.local.luau
      ^
      source.luau meta.function.luau
       ^^^^^^^^
       source.luau meta.function.luau keyword.control.luau
               ^
               source.luau meta.function.luau
                ^^^^^^^
                source.luau meta.function.luau entity.name.function.luau
                       ^
                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                        ^
                        source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                         ^
                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  return next(t) == nil
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau punctuation.arguments.begin.luau
               ^
               source.luau variable.other.readwrite.luau
                ^
                source.luau punctuation.arguments.end.luau
                 ^
                 source.luau
                  ^^
                  source.luau keyword.operator.comparison.luau
                    ^
                    source.luau
                     ^^^
                     source.luau constant.language.nil.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>local Promise = {
 ^^^^^
 source.luau storage.modifier.local.luau
      ^
      source.luau
       ^^^^^^^
       source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^
               source.luau keyword.operator.assignment.luau
                ^
                source.luau
                 ^
                 source.luau punctuation.table.begin.luau
>  Error = Error,
 ^^
 source.luau
   ^^^^^
   source.luau variable.other.readwrite.luau
        ^
        source.luau
         ^
         source.luau keyword.operator.assignment.luau
          ^
          source.luau
           ^^^^^
           source.luau variable.other.readwrite.luau
                ^
                source.luau punctuation.separator.fields.luau
>  Status = makeEnum("Promise.Status", {"Started", "Resolved", "Rejected", "Cancelled"}),
 ^^
 source.luau
   ^^^^^^
   source.luau variable.other.readwrite.luau
         ^
         source.luau
          ^
          source.luau keyword.operator.assignment.luau
           ^
           source.luau
            ^^^^^^^^
            source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^
                     source.luau string.quoted.double.luau
                      ^^^^^^^^^^^^^^
                      source.luau string.quoted.double.luau
                                    ^
                                    source.luau string.quoted.double.luau
                                     ^
                                     source.luau punctuation.separator.arguments.luau
                                      ^
                                      source.luau
                                       ^
                                       source.luau punctuation.table.begin.luau
                                        ^
                                        source.luau string.quoted.double.luau
                                         ^^^^^^^
                                         source.luau string.quoted.double.luau
                                                ^
                                                source.luau string.quoted.double.luau
                                                 ^
                                                 source.luau punctuation.separator.fields.luau
                                                  ^
                                                  source.luau
                                                   ^
                                                   source.luau string.quoted.double.luau
                                                    ^^^^^^^^
                                                    source.luau string.quoted.double.luau
                                                            ^
                                                            source.luau string.quoted.double.luau
                                                             ^
                                                             source.luau punctuation.separator.fields.luau
                                                              ^
                                                              source.luau
                                                               ^
                                                               source.luau string.quoted.double.luau
                                                                ^^^^^^^^
                                                                source.luau string.quoted.double.luau
                                                                        ^
                                                                        source.luau string.quoted.double.luau
                                                                         ^
                                                                         source.luau punctuation.separator.fields.luau
                                                                          ^
                                                                          source.luau
                                                                           ^
                                                                           source.luau string.quoted.double.luau
                                                                            ^^^^^^^^^
                                                                            source.luau string.quoted.double.luau
                                                                                     ^
                                                                                     source.luau string.quoted.double.luau
                                                                                      ^
                                                                                      source.luau punctuation.table.end.luau
                                                                                       ^
                                                                                       source.luau punctuation.arguments.end.luau
                                                                                        ^
                                                                                        source.luau punctuation.separator.fields.luau
>  _getTime = os.clock,
 ^^
 source.luau
   ^^^^^^^^
   source.luau variable.other.readwrite.luau
           ^
           source.luau
            ^
            source.luau keyword.operator.assignment.luau
             ^
             source.luau
              ^^^^^^^^
              source.luau support.function.luau
                      ^
                      source.luau punctuation.separator.fields.luau
>  _timeEvent = game:GetService("RunService").Heartbeat,
 ^^
 source.luau
   ^^^^^^^^^^
   source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^
              source.luau keyword.operator.assignment.luau
               ^
               source.luau
                ^^^^
                source.luau constant.language.luau
                    ^
                    source.luau
                     ^^^^^^^^^^
                     source.luau entity.name.function.luau
                               ^
                               source.luau punctuation.arguments.begin.luau
                                ^
                                source.luau string.quoted.double.luau
                                 ^^^^^^^^^^
                                 source.luau string.quoted.double.luau
                                           ^
                                           source.luau string.quoted.double.luau
                                            ^
                                            source.luau punctuation.arguments.end.luau
                                             ^
                                             source.luau
                                              ^^^^^^^^^
                                              source.luau variable.other.property.luau
                                                       ^
                                                       source.luau punctuation.separator.fields.luau
>}
 ^
 source.luau punctuation.table.end.luau
>Promise.prototype = {}
 ^^^^^^^
 source.luau variable.other.readwrite.luau
        ^
        source.luau
         ^^^^^^^^^
         source.luau variable.other.property.luau
                  ^
                  source.luau
                   ^
                   source.luau keyword.operator.assignment.luau
                    ^
                    source.luau
                     ^
                     source.luau punctuation.table.begin.luau
                      ^
                      source.luau punctuation.table.end.luau
>Promise.__index = Promise.prototype
 ^^^^^^^
 source.luau variable.other.readwrite.luau
        ^
        source.luau
         ^^^^^^^
         source.luau variable.language.metamethod.luau
                ^
                source.luau
                 ^
                 source.luau keyword.operator.assignment.luau
                  ^
                  source.luau
                   ^^^^^^^
                   source.luau variable.other.readwrite.luau
                          ^
                          source.luau
                           ^^^^^^^^^
                           source.luau variable.other.property.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Constructs a new Promise with the given initializing callback.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>
 ^
 source.luau comment.block.luau
>  This is generally only called when directly wrapping a non-promise API into
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  a promise-based version.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>
 ^
 source.luau comment.block.luau
>  The callback will receive 'resolve' and 'reject' methods, used to start
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  invoking the promise chain.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>
 ^
 source.luau comment.block.luau
>  Second parameter, parent, is used internally for tracking the "parent" in a
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  promise chain. External code shouldn't need to worry about this.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise._new(traceback, callback, parent)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^
                  source.luau meta.function.luau entity.name.function.luau
                      ^
                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                       ^^^^^^^^^
                       source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                ^
                                source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                 ^
                                 source.luau meta.function.luau meta.parameter.luau
                                  ^^^^^^^^
                                  source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                          ^
                                          source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau meta.function.luau meta.parameter.luau
                                            ^^^^^^
                                            source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                  ^
                                                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  if parent ~= nil and not Promise.is(parent) then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^^^
      source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^^
             source.luau keyword.operator.comparison.luau
               ^
               source.luau
                ^^^
                source.luau constant.language.nil.luau
                   ^
                   source.luau
                    ^^^
                    source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                       ^
                       source.luau
                        ^^^
                        source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                           ^
                           source.luau
                            ^^^^^^^
                            source.luau variable.other.readwrite.luau
                                   ^
                                   source.luau
                                    ^^
                                    source.luau entity.name.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^^^^
                                       source.luau variable.other.readwrite.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
                                              ^
                                              source.luau
                                               ^^^^
                                               source.luau keyword.control.luau
>  	error("Argument #2 to Promise.new must be a promise or nil", 2)
 ^^^
 source.luau
    ^^^^^
    source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^
          source.luau string.quoted.double.luau
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           source.luau string.quoted.double.luau
                                                              ^
                                                              source.luau string.quoted.double.luau
                                                               ^
                                                               source.luau punctuation.separator.arguments.luau
                                                                ^
                                                                source.luau
                                                                 ^
                                                                 source.luau constant.numeric.decimal.luau
                                                                  ^
                                                                  source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  local self = {
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^
         source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^
              source.luau keyword.operator.assignment.luau
               ^
               source.luau
                ^
                source.luau punctuation.table.begin.luau
>  	-- Used to locate where a promise was created
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	_source = traceback,
 ^^^
 source.luau
    ^^^^^^^
    source.luau variable.other.readwrite.luau
           ^
           source.luau
            ^
            source.luau keyword.operator.assignment.luau
             ^
             source.luau
              ^^^^^^^^^
              source.luau variable.other.readwrite.luau
                       ^
                       source.luau punctuation.separator.fields.luau
>
 ^
 source.luau
>  	_status = Promise.Status.Started,
 ^^^
 source.luau
    ^^^^^^^
    source.luau variable.other.readwrite.luau
           ^
           source.luau
            ^
            source.luau keyword.operator.assignment.luau
             ^
             source.luau
              ^^^^^^^
              source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^^^^^^
                      source.luau variable.other.property.luau
                            ^
                            source.luau
                             ^^^^^^^
                             source.luau variable.other.property.luau
                                    ^
                                    source.luau punctuation.separator.fields.luau
>
 ^
 source.luau
>  	-- A table containing a list of all results, whether success or failure.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- Only valid if _status is set to something besides Started
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	_values = nil,
 ^^^
 source.luau
    ^^^^^^^
    source.luau variable.other.readwrite.luau
           ^
           source.luau
            ^
            source.luau keyword.operator.assignment.luau
             ^
             source.luau
              ^^^
              source.luau constant.language.nil.luau
                 ^
                 source.luau punctuation.separator.fields.luau
>
 ^
 source.luau
>  	-- Lua doesn't like sparse arrays very much, so we explicitly store the
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- length of _values to handle middle nils.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	_valuesLength = -1,
 ^^^
 source.luau
    ^^^^^^^^^^^^^
    source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^
                  source.luau keyword.operator.assignment.luau
                   ^
                   source.luau
                    ^
                    source.luau keyword.operator.arithmetic.luau
                     ^
                     source.luau constant.numeric.decimal.luau
                      ^
                      source.luau punctuation.separator.fields.luau
>
 ^
 source.luau
>  	-- Tracks if this Promise has no error observers..
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	_unhandledRejection = true,
 ^^^
 source.luau
    ^^^^^^^^^^^^^^^^^^^
    source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^^^^
                          source.luau constant.language.boolean.true.luau
                              ^
                              source.luau punctuation.separator.fields.luau
>
 ^
 source.luau
>  	-- Queues representing functions we should invoke when we update!
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	_queuedResolve = {},
 ^^^
 source.luau
    ^^^^^^^^^^^^^^
    source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^
                   source.luau keyword.operator.assignment.luau
                    ^
                    source.luau
                     ^
                     source.luau punctuation.table.begin.luau
                      ^
                      source.luau punctuation.table.end.luau
                       ^
                       source.luau punctuation.separator.fields.luau
>  	_queuedReject = {},
 ^^^
 source.luau
    ^^^^^^^^^^^^^
    source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^
                  source.luau keyword.operator.assignment.luau
                   ^
                   source.luau
                    ^
                    source.luau punctuation.table.begin.luau
                     ^
                     source.luau punctuation.table.end.luau
                      ^
                      source.luau punctuation.separator.fields.luau
>  	_queuedFinally = {},
 ^^^
 source.luau
    ^^^^^^^^^^^^^^
    source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^
                   source.luau keyword.operator.assignment.luau
                    ^
                    source.luau
                     ^
                     source.luau punctuation.table.begin.luau
                      ^
                      source.luau punctuation.table.end.luau
                       ^
                       source.luau punctuation.separator.fields.luau
>
 ^
 source.luau
>  	-- The function to run when/if this promise is cancelled.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	_cancellationHook = nil,
 ^^^
 source.luau
    ^^^^^^^^^^^^^^^^^
    source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^
                      source.luau keyword.operator.assignment.luau
                       ^
                       source.luau
                        ^^^
                        source.luau constant.language.nil.luau
                           ^
                           source.luau punctuation.separator.fields.luau
>
 ^
 source.luau
>  	-- The "parent" of this promise in a promise chain. Required for
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- cancellation propagation upstream.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	_parent = parent,
 ^^^
 source.luau
    ^^^^^^^
    source.luau variable.other.readwrite.luau
           ^
           source.luau
            ^
            source.luau keyword.operator.assignment.luau
             ^
             source.luau
              ^^^^^^
              source.luau variable.other.readwrite.luau
                    ^
                    source.luau punctuation.separator.fields.luau
>
 ^
 source.luau
>  	-- Consumers are Promises that have chained onto this one.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- We track them for cancellation propagation downstream.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	_consumers = setmetatable({}, MODE_KEY_METATABLE),
 ^^^
 source.luau
    ^^^^^^^^^^
    source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^
               source.luau keyword.operator.assignment.luau
                ^
                source.luau
                 ^^^^^^^^^^^^
                 source.luau support.function.luau
                             ^
                             source.luau punctuation.arguments.begin.luau
                              ^
                              source.luau punctuation.table.begin.luau
                               ^
                               source.luau punctuation.table.end.luau
                                ^
                                source.luau punctuation.separator.arguments.luau
                                 ^
                                 source.luau
                                  ^^^^^^^^^^^^^^^^^^
                                  source.luau variable.other.constant.luau
                                                    ^
                                                    source.luau punctuation.arguments.end.luau
                                                     ^
                                                     source.luau punctuation.separator.fields.luau
>  }
 ^^
 source.luau
   ^
   source.luau punctuation.table.end.luau
>
 ^
 source.luau
>  if parent and parent._status == Promise.Status.Started then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^^^
      source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^^^
             source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                ^
                source.luau
                 ^^^^^^
                 source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^^^^^^^
                        source.luau variable.other.property.luau
                               ^
                               source.luau
                                ^^
                                source.luau keyword.operator.comparison.luau
                                  ^
                                  source.luau
                                   ^^^^^^^
                                   source.luau variable.other.readwrite.luau
                                          ^
                                          source.luau
                                           ^^^^^^
                                           source.luau variable.other.property.luau
                                                 ^
                                                 source.luau
                                                  ^^^^^^^
                                                  source.luau variable.other.property.luau
                                                         ^
                                                         source.luau
                                                          ^^^^
                                                          source.luau keyword.control.luau
>  	parent._consumers[self] = true
 ^^^
 source.luau
    ^^^^^^
    source.luau variable.other.readwrite.luau
          ^
          source.luau
           ^^^^^^^^^^
           source.luau variable.other.property.luau
                     ^
                     source.luau
                      ^^^^
                      source.luau variable.language.self.luau
                          ^^
                          source.luau
                            ^
                            source.luau keyword.operator.assignment.luau
                             ^
                             source.luau
                              ^^^^
                              source.luau constant.language.boolean.true.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  setmetatable(self, Promise)
 ^^
 source.luau
   ^^^^^^^^^^^^
   source.luau support.function.luau
               ^
               source.luau punctuation.arguments.begin.luau
                ^^^^
                source.luau variable.language.self.luau
                    ^
                    source.luau punctuation.separator.arguments.luau
                     ^
                     source.luau
                      ^^^^^^^
                      source.luau variable.other.readwrite.luau
                             ^
                             source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  local function resolve(...)
 ^^
 source.luau
   ^^^^^
   source.luau meta.function.luau storage.modifier.local.luau
        ^
        source.luau meta.function.luau
         ^^^^^^^^
         source.luau meta.function.luau keyword.control.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                         ^
                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                          ^^^
                          source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                             ^
                             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	self:_resolve(...)
 ^^^
 source.luau
    ^^^^
    source.luau variable.language.self.luau
        ^
        source.luau
         ^^^^^^^^
         source.luau entity.name.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^
                  source.luau keyword.other.unit.luau
                     ^
                     source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  local function reject(...)
 ^^
 source.luau
   ^^^^^
   source.luau meta.function.luau storage.modifier.local.luau
        ^
        source.luau meta.function.luau
         ^^^^^^^^
         source.luau meta.function.luau keyword.control.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                        ^
                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                         ^^^
                         source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                            ^
                            source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	self:_reject(...)
 ^^^
 source.luau
    ^^^^
    source.luau variable.language.self.luau
        ^
        source.luau
         ^^^^^^^
         source.luau entity.name.function.luau
                ^
                source.luau punctuation.arguments.begin.luau
                 ^^^
                 source.luau keyword.other.unit.luau
                    ^
                    source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  local function onCancel(cancellationHook)
 ^^
 source.luau
   ^^^^^
   source.luau meta.function.luau storage.modifier.local.luau
        ^
        source.luau meta.function.luau
         ^^^^^^^^
         source.luau meta.function.luau keyword.control.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                          ^
                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                           ^^^^^^^^^^^^^^^^
                           source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                           ^
                                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	if cancellationHook then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^^^^^^^^^^^^^
       source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^^^^
                        source.luau keyword.control.luau
>  		if self._status == Promise.Status.Cancelled then
 ^^^^
 source.luau
     ^^
     source.luau keyword.control.luau
       ^
       source.luau
        ^^^^
        source.luau variable.language.self.luau
            ^
            source.luau
             ^^^^^^^
             source.luau variable.other.property.luau
                    ^
                    source.luau
                     ^^
                     source.luau keyword.operator.comparison.luau
                       ^
                       source.luau
                        ^^^^^^^
                        source.luau variable.other.readwrite.luau
                               ^
                               source.luau
                                ^^^^^^
                                source.luau variable.other.property.luau
                                      ^
                                      source.luau
                                       ^^^^^^^^^
                                       source.luau variable.other.property.luau
                                                ^
                                                source.luau
                                                 ^^^^
                                                 source.luau keyword.control.luau
>  			cancellationHook()
 ^^^^^
 source.luau
      ^^^^^^^^^^^^^^^^
      source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^
                       source.luau punctuation.arguments.end.luau
>  		else
 ^^^^
 source.luau
     ^^^^
     source.luau keyword.control.luau
>  			self._cancellationHook = cancellationHook
 ^^^^^
 source.luau
      ^^^^
      source.luau variable.language.self.luau
          ^
          source.luau
           ^^^^^^^^^^^^^^^^^
           source.luau variable.other.property.luau
                            ^
                            source.luau
                             ^
                             source.luau keyword.operator.assignment.luau
                              ^
                              source.luau
                               ^^^^^^^^^^^^^^^^
                               source.luau variable.other.readwrite.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	return self._status == Promise.Status.Cancelled
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^
           source.luau variable.language.self.luau
               ^
               source.luau
                ^^^^^^^
                source.luau variable.other.property.luau
                       ^
                       source.luau
                        ^^
                        source.luau keyword.operator.comparison.luau
                          ^
                          source.luau
                           ^^^^^^^
                           source.luau variable.other.readwrite.luau
                                  ^
                                  source.luau
                                   ^^^^^^
                                   source.luau variable.other.property.luau
                                         ^
                                         source.luau
                                          ^^^^^^^^^
                                          source.luau variable.other.property.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  coroutine.wrap(function()
 ^^
 source.luau
   ^^^^^^^^^^^^^^
   source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^^^^^
                  source.luau meta.function.luau keyword.control.luau
                          ^
                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                           ^
                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	local ok, _, result = runExecutor(
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^
          source.luau variable.other.readwrite.luau
            ^^
            source.luau
              ^
              source.luau variable.other.constant.luau
               ^^
               source.luau
                 ^^^^^^
                 source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^^^^^^^^^^^
                          source.luau entity.name.function.luau
                                     ^
                                     source.luau punctuation.arguments.begin.luau
>  		self._source,
 ^^^^
 source.luau
     ^^^^
     source.luau variable.language.self.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.property.luau
                 ^
                 source.luau punctuation.separator.arguments.luau
>  		callback,
 ^^^^
 source.luau
     ^^^^^^^^
     source.luau variable.other.readwrite.luau
             ^
             source.luau punctuation.separator.arguments.luau
>  		resolve,
 ^^^^
 source.luau
     ^^^^^^^
     source.luau variable.other.readwrite.luau
            ^
            source.luau punctuation.separator.arguments.luau
>  		reject,
 ^^^^
 source.luau
     ^^^^^^
     source.luau variable.other.readwrite.luau
           ^
           source.luau punctuation.separator.arguments.luau
>  		onCancel
 ^^^^
 source.luau
     ^^^^^^^^
     source.luau variable.other.readwrite.luau
>  	)
 ^^^
 source.luau
    ^
    source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  	if not ok then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^
       source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
          ^
          source.luau
           ^^
           source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^^^^
              source.luau keyword.control.luau
>  		reject(result[1])
 ^^^^
 source.luau
     ^^^^^^
     source.luau entity.name.function.luau
           ^
           source.luau punctuation.arguments.begin.luau
            ^^^^^^
            source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^
                   source.luau constant.numeric.decimal.luau
                    ^
                    source.luau
                     ^
                     source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>  end)()
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
       ^
       source.luau punctuation.arguments.begin.luau
        ^
        source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  return self
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau variable.language.self.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>function Promise.new(executor)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^
                  source.luau meta.function.luau entity.name.function.luau
                     ^
                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                      ^^^^^^^^
                      source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                              ^
                              source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  return Promise._new(debug.traceback(nil, 2), executor)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^^^^^^^^^^^^
                       source.luau support.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^
                                       source.luau constant.language.nil.luau
                                          ^
                                          source.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau
                                            ^
                                            source.luau constant.numeric.decimal.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
                                              ^
                                              source.luau punctuation.separator.arguments.luau
                                               ^
                                               source.luau
                                                ^^^^^^^^
                                                source.luau variable.other.readwrite.luau
                                                        ^
                                                        source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>function Promise:__tostring()
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^^
                  source.luau meta.function.luau variable.language.metamethod.luau
                            ^
                            source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                             ^
                             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  return string.format("Promise(%s)", self:getStatus())
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^^^^^^^
          source.luau support.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^
                        source.luau string.quoted.double.luau
                         ^^^^^^^^^^^
                         source.luau string.quoted.double.luau
                                    ^
                                    source.luau string.quoted.double.luau
                                     ^
                                     source.luau punctuation.separator.arguments.luau
                                      ^
                                      source.luau
                                       ^^^^
                                       source.luau variable.language.self.luau
                                           ^
                                           source.luau
                                            ^^^^^^^^^
                                            source.luau entity.name.function.luau
                                                     ^
                                                     source.luau punctuation.arguments.begin.luau
                                                      ^
                                                      source.luau punctuation.arguments.end.luau
                                                       ^
                                                       source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Promise.new, except pcall on a new thread is automatic.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.defer(callback)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                       ^
                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                        ^^^^^^^^
                        source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                ^
                                source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  local traceback = debug.traceback(nil, 2)
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^^^^
         source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^
                   source.luau keyword.operator.assignment.luau
                    ^
                    source.luau
                     ^^^^^^^^^^^^^^^
                     source.luau support.function.luau
                                    ^
                                    source.luau punctuation.arguments.begin.luau
                                     ^^^
                                     source.luau constant.language.nil.luau
                                        ^
                                        source.luau punctuation.separator.arguments.luau
                                         ^
                                         source.luau
                                          ^
                                          source.luau constant.numeric.decimal.luau
                                           ^
                                           source.luau punctuation.arguments.end.luau
>  local promise
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^^
         source.luau variable.other.readwrite.luau
>  promise = Promise._new(traceback, function(resolve, reject, onCancel)
 ^^
 source.luau
   ^^^^^^^
   source.luau variable.other.readwrite.luau
          ^
          source.luau
           ^
           source.luau keyword.operator.assignment.luau
            ^
            source.luau
             ^^^^^^^
             source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^^^^
                     source.luau entity.name.function.luau
                         ^
                         source.luau punctuation.arguments.begin.luau
                          ^^^^^^^^^
                          source.luau variable.other.readwrite.luau
                                   ^
                                   source.luau punctuation.separator.arguments.luau
                                    ^
                                    source.luau
                                     ^^^^^^^^
                                     source.luau meta.function.luau keyword.control.luau
                                             ^
                                             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                              ^^^^^^^
                                              source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                     ^
                                                     source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                      ^
                                                      source.luau meta.function.luau meta.parameter.luau
                                                       ^^^^^^
                                                       source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                             ^
                                                             source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                              ^
                                                              source.luau meta.function.luau meta.parameter.luau
                                                               ^^^^^^^^
                                                               source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                       ^
                                                                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	local connection
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^
          source.luau variable.other.readwrite.luau
>  	connection = Promise._timeEvent:Connect(function()
 ^^^
 source.luau
    ^^^^^^^^^^
    source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^
               source.luau keyword.operator.assignment.luau
                ^
                source.luau
                 ^^^^^^^
                 source.luau variable.other.readwrite.luau
                        ^
                        source.luau
                         ^^^^^^^^^^
                         source.luau variable.other.property.luau
                                   ^
                                   source.luau
                                    ^^^^^^^
                                    source.luau entity.name.function.luau
                                           ^
                                           source.luau punctuation.arguments.begin.luau
                                            ^^^^^^^^
                                            source.luau meta.function.luau keyword.control.luau
                                                    ^
                                                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                     ^
                                                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		connection:Disconnect()
 ^^^^
 source.luau
     ^^^^^^^^^^
     source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^^^^^^^^^^
                source.luau entity.name.function.luau
                          ^
                          source.luau punctuation.arguments.begin.luau
                           ^
                           source.luau punctuation.arguments.end.luau
>  		local ok, _, result = runExecutor(traceback, callback, resolve, reject, onCancel)
 ^^^^
 source.luau
     ^^^^^
     source.luau storage.modifier.local.luau
          ^
          source.luau
           ^^
           source.luau variable.other.readwrite.luau
             ^^
             source.luau
               ^
               source.luau variable.other.constant.luau
                ^^
                source.luau
                  ^^^^^^
                  source.luau variable.other.readwrite.luau
                        ^
                        source.luau
                         ^
                         source.luau keyword.operator.assignment.luau
                          ^
                          source.luau
                           ^^^^^^^^^^^
                           source.luau entity.name.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^^^^^^^
                                       source.luau variable.other.readwrite.luau
                                                ^
                                                source.luau punctuation.separator.arguments.luau
                                                 ^
                                                 source.luau
                                                  ^^^^^^^^
                                                  source.luau variable.other.readwrite.luau
                                                          ^
                                                          source.luau punctuation.separator.arguments.luau
                                                           ^
                                                           source.luau
                                                            ^^^^^^^
                                                            source.luau variable.other.readwrite.luau
                                                                   ^
                                                                   source.luau punctuation.separator.arguments.luau
                                                                    ^
                                                                    source.luau
                                                                     ^^^^^^
                                                                     source.luau variable.other.readwrite.luau
                                                                           ^
                                                                           source.luau punctuation.separator.arguments.luau
                                                                            ^
                                                                            source.luau
                                                                             ^^^^^^^^
                                                                             source.luau variable.other.readwrite.luau
                                                                                     ^
                                                                                     source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  		if not ok then
 ^^^^
 source.luau
     ^^
     source.luau keyword.control.luau
       ^
       source.luau
        ^^^
        source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
           ^
           source.luau
            ^^
            source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^^^^
               source.luau keyword.control.luau
>  			reject(result[1])
 ^^^^^
 source.luau
      ^^^^^^
      source.luau entity.name.function.luau
            ^
            source.luau punctuation.arguments.begin.luau
             ^^^^^^
             source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^
                    source.luau constant.numeric.decimal.luau
                     ^
                     source.luau
                      ^
                      source.luau punctuation.arguments.end.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>  	end)
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau punctuation.arguments.end.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  return promise
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>-- Backwards compatibility
 ^^
 source.luau comment.line.double-dash.luau
   ^^^^^^^^^^^^^^^^^^^^^^^^
   source.luau comment.line.double-dash.luau
>Promise.async = Promise.defer
 ^^^^^^^
 source.luau variable.other.readwrite.luau
        ^
        source.luau
         ^^^^^
         source.luau variable.other.property.luau
              ^
              source.luau
               ^
               source.luau keyword.operator.assignment.luau
                ^
                source.luau
                 ^^^^^^^
                 source.luau variable.other.readwrite.luau
                        ^
                        source.luau
                         ^^^^^
                         source.luau variable.other.property.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Create a promise that represents the immediately resolved value.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.resolve(...)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                         ^
                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                          ^^^
                          source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                             ^
                             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  local length, values = pack(...)
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^
         source.luau variable.other.readwrite.luau
               ^^
               source.luau
                 ^^^^^^
                 source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^^^^
                          source.luau entity.name.function.luau
                              ^
                              source.luau punctuation.arguments.begin.luau
                               ^^^
                               source.luau keyword.other.unit.luau
                                  ^
                                  source.luau punctuation.arguments.end.luau
>  return Promise._new(debug.traceback(nil, 2), function(resolve)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^^^^^^^^^^^^
                       source.luau support.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^
                                       source.luau constant.language.nil.luau
                                          ^
                                          source.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau
                                            ^
                                            source.luau constant.numeric.decimal.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
                                              ^
                                              source.luau punctuation.separator.arguments.luau
                                               ^
                                               source.luau
                                                ^^^^^^^^
                                                source.luau meta.function.luau keyword.control.luau
                                                        ^
                                                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                         ^^^^^^^
                                                         source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                ^
                                                                source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	resolve(unpack(values, 1, length))
 ^^^
 source.luau
    ^^^^^^^
    source.luau entity.name.function.luau
           ^
           source.luau punctuation.arguments.begin.luau
            ^^^^^^
            source.luau support.function.luau
                  ^
                  source.luau punctuation.arguments.begin.luau
                   ^^^^^^
                   source.luau variable.other.readwrite.luau
                         ^
                         source.luau punctuation.separator.arguments.luau
                          ^
                          source.luau
                           ^
                           source.luau constant.numeric.decimal.luau
                            ^
                            source.luau punctuation.separator.arguments.luau
                             ^
                             source.luau
                              ^^^^^^
                              source.luau variable.other.readwrite.luau
                                    ^
                                    source.luau punctuation.arguments.end.luau
                                     ^
                                     source.luau punctuation.arguments.end.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Create a promise that represents the immediately rejected value.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.reject(...)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                        ^
                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                         ^^^
                         source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                            ^
                            source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  local length, values = pack(...)
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^
         source.luau variable.other.readwrite.luau
               ^^
               source.luau
                 ^^^^^^
                 source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^^^^
                          source.luau entity.name.function.luau
                              ^
                              source.luau punctuation.arguments.begin.luau
                               ^^^
                               source.luau keyword.other.unit.luau
                                  ^
                                  source.luau punctuation.arguments.end.luau
>  return Promise._new(debug.traceback(nil, 2), function(_, reject)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^^^^^^^^^^^^
                       source.luau support.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^
                                       source.luau constant.language.nil.luau
                                          ^
                                          source.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau
                                            ^
                                            source.luau constant.numeric.decimal.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
                                              ^
                                              source.luau punctuation.separator.arguments.luau
                                               ^
                                               source.luau
                                                ^^^^^^^^
                                                source.luau meta.function.luau keyword.control.luau
                                                        ^
                                                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                         ^
                                                         source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                          ^
                                                          source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                           ^
                                                           source.luau meta.function.luau meta.parameter.luau
                                                            ^^^^^^
                                                            source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                  ^
                                                                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	reject(unpack(values, 1, length))
 ^^^
 source.luau
    ^^^^^^
    source.luau entity.name.function.luau
          ^
          source.luau punctuation.arguments.begin.luau
           ^^^^^^
           source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^^^
                  source.luau variable.other.readwrite.luau
                        ^
                        source.luau punctuation.separator.arguments.luau
                         ^
                         source.luau
                          ^
                          source.luau constant.numeric.decimal.luau
                           ^
                           source.luau punctuation.separator.arguments.luau
                            ^
                            source.luau
                             ^^^^^^
                             source.luau variable.other.readwrite.luau
                                   ^
                                   source.luau punctuation.arguments.end.luau
                                    ^
                                    source.luau punctuation.arguments.end.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Runs a non-promise-returning function as a Promise with the
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  given arguments.
 ^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise._try(traceback, callback, ...)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^
                  source.luau meta.function.luau entity.name.function.luau
                      ^
                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                       ^^^^^^^^^
                       source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                ^
                                source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                 ^
                                 source.luau meta.function.luau meta.parameter.luau
                                  ^^^^^^^^
                                  source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                          ^
                                          source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau meta.function.luau meta.parameter.luau
                                            ^^^
                                            source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                               ^
                                               source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  local valuesLength, values = pack(...)
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^^^^^^^
         source.luau variable.other.readwrite.luau
                     ^^
                     source.luau
                       ^^^^^^
                       source.luau variable.other.readwrite.luau
                             ^
                             source.luau
                              ^
                              source.luau keyword.operator.assignment.luau
                               ^
                               source.luau
                                ^^^^
                                source.luau entity.name.function.luau
                                    ^
                                    source.luau punctuation.arguments.begin.luau
                                     ^^^
                                     source.luau keyword.other.unit.luau
                                        ^
                                        source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  return Promise._new(traceback, function(resolve)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^^^^^^
                       source.luau variable.other.readwrite.luau
                                ^
                                source.luau punctuation.separator.arguments.luau
                                 ^
                                 source.luau
                                  ^^^^^^^^
                                  source.luau meta.function.luau keyword.control.luau
                                          ^
                                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                           ^^^^^^^
                                           source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                  ^
                                                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	resolve(callback(unpack(values, 1, valuesLength)))
 ^^^
 source.luau
    ^^^^^^^
    source.luau entity.name.function.luau
           ^
           source.luau punctuation.arguments.begin.luau
            ^^^^^^^^
            source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^^^^^^
                     source.luau support.function.luau
                           ^
                           source.luau punctuation.arguments.begin.luau
                            ^^^^^^
                            source.luau variable.other.readwrite.luau
                                  ^
                                  source.luau punctuation.separator.arguments.luau
                                   ^
                                   source.luau
                                    ^
                                    source.luau constant.numeric.decimal.luau
                                     ^
                                     source.luau punctuation.separator.arguments.luau
                                      ^
                                      source.luau
                                       ^^^^^^^^^^^^
                                       source.luau variable.other.readwrite.luau
                                                   ^
                                                   source.luau punctuation.arguments.end.luau
                                                    ^
                                                    source.luau punctuation.arguments.end.luau
                                                     ^
                                                     source.luau punctuation.arguments.end.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Begins a Promise chain, turning synchronous errors into rejections.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.try(...)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^
                  source.luau meta.function.luau entity.name.function.luau
                     ^
                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                      ^^^
                      source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                         ^
                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  return Promise._try(debug.traceback(nil, 2), ...)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^^^^^^^^^^^^
                       source.luau support.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^
                                       source.luau constant.language.nil.luau
                                          ^
                                          source.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau
                                            ^
                                            source.luau constant.numeric.decimal.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
                                              ^
                                              source.luau punctuation.separator.arguments.luau
                                               ^
                                               source.luau
                                                ^^^
                                                source.luau keyword.other.unit.luau
                                                   ^
                                                   source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Returns a new promise that:
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  	* is resolved when all input promises resolve
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  	* is rejected if ANY input promises reject
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise._all(traceback, promises, amount)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^
                  source.luau meta.function.luau entity.name.function.luau
                      ^
                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                       ^^^^^^^^^
                       source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                ^
                                source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                 ^
                                 source.luau meta.function.luau meta.parameter.luau
                                  ^^^^^^^^
                                  source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                          ^
                                          source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau meta.function.luau meta.parameter.luau
                                            ^^^^^^
                                            source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                  ^
                                                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  if type(promises) ~= "table" then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^
      source.luau support.function.luau
          ^
          source.luau punctuation.arguments.begin.luau
           ^^^^^^^^
           source.luau variable.other.readwrite.luau
                   ^
                   source.luau punctuation.arguments.end.luau
                    ^
                    source.luau
                     ^^
                     source.luau keyword.operator.comparison.luau
                       ^
                       source.luau
                        ^
                        source.luau string.quoted.double.luau
                         ^^^^^
                         source.luau string.quoted.double.luau
                              ^
                              source.luau string.quoted.double.luau
                               ^
                               source.luau
                                ^^^^
                                source.luau keyword.control.luau
>  	error(string.format(ERROR_NON_LIST, "Promise.all"), 3)
 ^^^
 source.luau
    ^^^^^
    source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^^^^^^^^^^
          source.luau support.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^^^
                        source.luau variable.other.constant.luau
                                      ^
                                      source.luau punctuation.separator.arguments.luau
                                       ^
                                       source.luau
                                        ^
                                        source.luau string.quoted.double.luau
                                         ^^^^^^^^^^^
                                         source.luau string.quoted.double.luau
                                                    ^
                                                    source.luau string.quoted.double.luau
                                                     ^
                                                     source.luau punctuation.arguments.end.luau
                                                      ^
                                                      source.luau punctuation.separator.arguments.luau
                                                       ^
                                                       source.luau
                                                        ^
                                                        source.luau constant.numeric.decimal.luau
                                                         ^
                                                         source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  -- We need to check that each value is a promise here so that we can produce
 ^^
 source.luau
   ^^
   source.luau comment.line.double-dash.luau
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     source.luau comment.line.double-dash.luau
>  -- a proper error rather than a rejected promise with our error.
 ^^
 source.luau
   ^^
   source.luau comment.line.double-dash.luau
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     source.luau comment.line.double-dash.luau
>  for i, promise in pairs(promises) do
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau
       ^
       source.luau variable.parameter.luau
        ^^
        source.luau
          ^^^^^^^
          source.luau variable.parameter.luau
                 ^
                 source.luau
                  ^^
                  source.luau keyword.control.luau
                    ^
                    source.luau
                     ^^^^^
                     source.luau support.function.luau
                          ^
                          source.luau punctuation.arguments.begin.luau
                           ^^^^^^^^
                           source.luau variable.other.readwrite.luau
                                   ^
                                   source.luau punctuation.arguments.end.luau
                                    ^
                                    source.luau
                                     ^^
                                     source.luau keyword.control.luau
>  	if not Promise.is(promise) then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^
       source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^
                   source.luau entity.name.function.luau
                     ^
                     source.luau punctuation.arguments.begin.luau
                      ^^^^^^^
                      source.luau variable.other.readwrite.luau
                             ^
                             source.luau punctuation.arguments.end.luau
                              ^
                              source.luau
                               ^^^^
                               source.luau keyword.control.luau
>  		error(string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.all", tostring(i)), 3)
 ^^^^
 source.luau
     ^^^^^
     source.luau support.function.luau
          ^
          source.luau punctuation.arguments.begin.luau
           ^^^^^^^^^^^^^
           source.luau support.function.luau
                        ^
                        source.luau punctuation.arguments.begin.luau
                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                         source.luau variable.other.constant.luau
                                                  ^
                                                  source.luau punctuation.separator.arguments.luau
                                                   ^
                                                   source.luau
                                                    ^
                                                    source.luau string.quoted.double.luau
                                                     ^^^^^^^^^^^
                                                     source.luau string.quoted.double.luau
                                                                ^
                                                                source.luau string.quoted.double.luau
                                                                 ^
                                                                 source.luau punctuation.separator.arguments.luau
                                                                  ^
                                                                  source.luau
                                                                   ^^^^^^^^
                                                                   source.luau support.function.luau
                                                                           ^
                                                                           source.luau punctuation.arguments.begin.luau
                                                                            ^
                                                                            source.luau variable.other.readwrite.luau
                                                                             ^
                                                                             source.luau punctuation.arguments.end.luau
                                                                              ^
                                                                              source.luau punctuation.arguments.end.luau
                                                                               ^
                                                                               source.luau punctuation.separator.arguments.luau
                                                                                ^
                                                                                source.luau
                                                                                 ^
                                                                                 source.luau constant.numeric.decimal.luau
                                                                                  ^
                                                                                  source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  -- If there are no values then return an already resolved promise.
 ^^
 source.luau
   ^^
   source.luau comment.line.double-dash.luau
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     source.luau comment.line.double-dash.luau
>  if #promises == 0 or amount == 0 then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^
      source.luau keyword.operator.other.luau
       ^^^^^^^^
       source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^^
                source.luau keyword.operator.comparison.luau
                  ^
                  source.luau
                   ^
                   source.luau constant.numeric.decimal.luau
                    ^
                    source.luau
                     ^^
                     source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                       ^
                       source.luau
                        ^^^^^^
                        source.luau variable.other.readwrite.luau
                              ^
                              source.luau
                               ^^
                               source.luau keyword.operator.comparison.luau
                                 ^
                                 source.luau
                                  ^
                                  source.luau constant.numeric.decimal.luau
                                   ^
                                   source.luau
                                    ^^^^
                                    source.luau keyword.control.luau
>  	return Promise.resolve({})
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^^^^^^
                   source.luau entity.name.function.luau
                          ^
                          source.luau punctuation.arguments.begin.luau
                           ^
                           source.luau punctuation.table.begin.luau
                            ^
                            source.luau punctuation.table.end.luau
                             ^
                             source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  return Promise._new(traceback, function(resolve, reject, onCancel)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^^^^^^
                       source.luau variable.other.readwrite.luau
                                ^
                                source.luau punctuation.separator.arguments.luau
                                 ^
                                 source.luau
                                  ^^^^^^^^
                                  source.luau meta.function.luau keyword.control.luau
                                          ^
                                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                           ^^^^^^^
                                           source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                  ^
                                                  source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                   ^
                                                   source.luau meta.function.luau meta.parameter.luau
                                                    ^^^^^^
                                                    source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                          ^
                                                          source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                           ^
                                                           source.luau meta.function.luau meta.parameter.luau
                                                            ^^^^^^^^
                                                            source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                    ^
                                                                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	-- An array to contain our resolved values from the given promises.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	local resolvedValues = {}
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                        ^
                        source.luau
                         ^
                         source.luau keyword.operator.assignment.luau
                          ^
                          source.luau
                           ^
                           source.luau punctuation.table.begin.luau
                            ^
                            source.luau punctuation.table.end.luau
>  	local newPromises = {}
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^
                      source.luau keyword.operator.assignment.luau
                       ^
                       source.luau
                        ^
                        source.luau punctuation.table.begin.luau
                         ^
                         source.luau punctuation.table.end.luau
>
 ^
 source.luau
>  	-- Keep a count of resolved promises because just checking the resolved
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- values length wouldn't account for promises that resolve with nil.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	local resolvedCount = 0
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^
                          source.luau constant.numeric.decimal.luau
>  	local rejectedCount = 0
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^
                          source.luau constant.numeric.decimal.luau
>  	local done = false
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^
          source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^
               source.luau keyword.operator.assignment.luau
                ^
                source.luau
                 ^^^^^
                 source.luau constant.language.boolean.false.luau
>
 ^
 source.luau
>  	local function cancel()
 ^^^
 source.luau
    ^^^^^
    source.luau meta.function.luau storage.modifier.local.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^^
          source.luau meta.function.luau keyword.control.luau
                  ^
                  source.luau meta.function.luau
                   ^^^^^^
                   source.luau meta.function.luau entity.name.function.luau
                         ^
                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                          ^
                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		for _, promise in ipairs(newPromises) do
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
        ^
        source.luau
         ^
         source.luau variable.parameter.luau
          ^^
          source.luau
            ^^^^^^^
            source.luau variable.parameter.luau
                   ^
                   source.luau
                    ^^
                    source.luau keyword.control.luau
                      ^
                      source.luau
                       ^^^^^^
                       source.luau support.function.luau
                             ^
                             source.luau punctuation.arguments.begin.luau
                              ^^^^^^^^^^^
                              source.luau variable.other.readwrite.luau
                                         ^
                                         source.luau punctuation.arguments.end.luau
                                          ^
                                          source.luau
                                           ^^
                                           source.luau keyword.control.luau
>  			promise:cancel()
 ^^^^^
 source.luau
      ^^^^^^^
      source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^^^^^^
              source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^
                     source.luau punctuation.arguments.end.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	-- Called when a single value is resolved and resolves if all are done.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	local function resolveOne(i, ...)
 ^^^
 source.luau
    ^^^^^
    source.luau meta.function.luau storage.modifier.local.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^^
          source.luau meta.function.luau keyword.control.luau
                  ^
                  source.luau meta.function.luau
                   ^^^^^^^^^^
                   source.luau meta.function.luau entity.name.function.luau
                             ^
                             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                              ^
                              source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                               ^
                               source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                ^
                                source.luau meta.function.luau meta.parameter.luau
                                 ^^^
                                 source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                    ^
                                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		if done then
 ^^^^
 source.luau
     ^^
     source.luau keyword.control.luau
       ^
       source.luau
        ^^^^
        source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^^^^
             source.luau keyword.control.luau
>  			return
 ^^^^^
 source.luau
      ^^^^^^
      source.luau keyword.control.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>
 ^
 source.luau
>  		resolvedCount = resolvedCount + 1
 ^^^^
 source.luau
     ^^^^^^^^^^^^^
     source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^
                   source.luau keyword.operator.assignment.luau
                    ^
                    source.luau
                     ^^^^^^^^^^^^^
                     source.luau variable.other.readwrite.luau
                                  ^
                                  source.luau
                                   ^
                                   source.luau keyword.operator.arithmetic.luau
                                    ^
                                    source.luau
                                     ^
                                     source.luau constant.numeric.decimal.luau
>
 ^
 source.luau
>  		if amount == nil then
 ^^^^
 source.luau
     ^^
     source.luau keyword.control.luau
       ^
       source.luau
        ^^^^^^
        source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^^
               source.luau keyword.operator.comparison.luau
                 ^
                 source.luau
                  ^^^
                  source.luau constant.language.nil.luau
                     ^
                     source.luau
                      ^^^^
                      source.luau keyword.control.luau
>  			resolvedValues[i] = ...
 ^^^^^
 source.luau
      ^^^^^^^^^^^^^^
      source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^
                     source.luau variable.other.readwrite.luau
                      ^^
                      source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^^^
                          source.luau keyword.other.unit.luau
>  		else
 ^^^^
 source.luau
     ^^^^
     source.luau keyword.control.luau
>  			resolvedValues[resolvedCount] = ...
 ^^^^^
 source.luau
      ^^^^^^^^^^^^^^
      source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^^^^^^^^^^^^^
                     source.luau variable.other.readwrite.luau
                                  ^^
                                  source.luau
                                    ^
                                    source.luau keyword.operator.assignment.luau
                                     ^
                                     source.luau
                                      ^^^
                                      source.luau keyword.other.unit.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>
 ^
 source.luau
>  		if resolvedCount >= (amount or #promises) then
 ^^^^
 source.luau
     ^^
     source.luau keyword.control.luau
       ^
       source.luau
        ^^^^^^^^^^^^^
        source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^^
                      source.luau keyword.operator.comparison.luau
                        ^
                        source.luau
                         ^
                         source.luau punctuation.arguments.begin.luau
                          ^^^^^^
                          source.luau variable.other.readwrite.luau
                                ^
                                source.luau
                                 ^^
                                 source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                                   ^
                                   source.luau
                                    ^
                                    source.luau keyword.operator.other.luau
                                     ^^^^^^^^
                                     source.luau variable.other.readwrite.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
                                              ^
                                              source.luau
                                               ^^^^
                                               source.luau keyword.control.luau
>  			done = true
 ^^^^^
 source.luau
      ^^^^
      source.luau variable.other.readwrite.luau
          ^
          source.luau
           ^
           source.luau keyword.operator.assignment.luau
            ^
            source.luau
             ^^^^
             source.luau constant.language.boolean.true.luau
>  			resolve(resolvedValues)
 ^^^^^
 source.luau
      ^^^^^^^
      source.luau entity.name.function.luau
             ^
             source.luau punctuation.arguments.begin.luau
              ^^^^^^^^^^^^^^
              source.luau variable.other.readwrite.luau
                            ^
                            source.luau punctuation.arguments.end.luau
>  			cancel()
 ^^^^^
 source.luau
      ^^^^^^
      source.luau entity.name.function.luau
            ^
            source.luau punctuation.arguments.begin.luau
             ^
             source.luau punctuation.arguments.end.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	onCancel(cancel)
 ^^^
 source.luau
    ^^^^^^^^
    source.luau entity.name.function.luau
            ^
            source.luau punctuation.arguments.begin.luau
             ^^^^^^
             source.luau variable.other.readwrite.luau
                   ^
                   source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  	-- We can assume the values inside `promises` are all promises since we
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- checked above.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	for i, promise in ipairs(promises) do
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau
        ^
        source.luau variable.parameter.luau
         ^^
         source.luau
           ^^^^^^^
           source.luau variable.parameter.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.control.luau
                     ^
                     source.luau
                      ^^^^^^
                      source.luau support.function.luau
                            ^
                            source.luau punctuation.arguments.begin.luau
                             ^^^^^^^^
                             source.luau variable.other.readwrite.luau
                                     ^
                                     source.luau punctuation.arguments.end.luau
                                      ^
                                      source.luau
                                       ^^
                                       source.luau keyword.control.luau
>  		newPromises[i] = promise:andThen(
 ^^^^
 source.luau
     ^^^^^^^^^^^
     source.luau variable.other.readwrite.luau
                ^
                source.luau
                 ^
                 source.luau variable.other.readwrite.luau
                  ^^
                  source.luau
                    ^
                    source.luau keyword.operator.assignment.luau
                     ^
                     source.luau
                      ^^^^^^^
                      source.luau variable.other.readwrite.luau
                             ^
                             source.luau
                              ^^^^^^^
                              source.luau entity.name.function.luau
                                     ^
                                     source.luau punctuation.arguments.begin.luau
>  			function(...)
 ^^^^^
 source.luau
      ^^^^^^^^
      source.luau meta.function.luau keyword.control.luau
              ^
              source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
               ^^^
               source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                  ^
                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  				resolveOne(i, ...)
 ^^^^^^
 source.luau
       ^^^^^^^^^^
       source.luau entity.name.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^
                  source.luau variable.other.readwrite.luau
                   ^
                   source.luau punctuation.separator.arguments.luau
                    ^
                    source.luau
                     ^^^
                     source.luau keyword.other.unit.luau
                        ^
                        source.luau punctuation.arguments.end.luau
>  			end,
 ^^^^^
 source.luau
      ^^^
      source.luau keyword.control.luau
         ^
         source.luau punctuation.separator.arguments.luau
>  			function(...)
 ^^^^^
 source.luau
      ^^^^^^^^
      source.luau meta.function.luau keyword.control.luau
              ^
              source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
               ^^^
               source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                  ^
                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  				rejectedCount = rejectedCount + 1
 ^^^^^^
 source.luau
       ^^^^^^^^^^^^^
       source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^
                     source.luau keyword.operator.assignment.luau
                      ^
                      source.luau
                       ^^^^^^^^^^^^^
                       source.luau variable.other.readwrite.luau
                                    ^
                                    source.luau
                                     ^
                                     source.luau keyword.operator.arithmetic.luau
                                      ^
                                      source.luau
                                       ^
                                       source.luau constant.numeric.decimal.luau
>
 ^
 source.luau
>  				if amount == nil or #promises - rejectedCount < amount then
 ^^^^^^
 source.luau
       ^^
       source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^
          source.luau variable.other.readwrite.luau
                ^
                source.luau
                 ^^
                 source.luau keyword.operator.comparison.luau
                   ^
                   source.luau
                    ^^^
                    source.luau constant.language.nil.luau
                       ^
                       source.luau
                        ^^
                        source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                          ^
                          source.luau
                           ^
                           source.luau keyword.operator.other.luau
                            ^^^^^^^^
                            source.luau variable.other.readwrite.luau
                                    ^
                                    source.luau
                                     ^
                                     source.luau keyword.operator.arithmetic.luau
                                      ^
                                      source.luau
                                       ^^^^^^^^^^^^^
                                       source.luau variable.other.readwrite.luau
                                                    ^
                                                    source.luau
                                                     ^
                                                     source.luau keyword.operator.comparison.luau
                                                      ^
                                                      source.luau
                                                       ^^^^^^
                                                       source.luau variable.other.readwrite.luau
                                                             ^
                                                             source.luau
                                                              ^^^^
                                                              source.luau keyword.control.luau
>  					cancel()
 ^^^^^^^
 source.luau
        ^^^^^^
        source.luau entity.name.function.luau
              ^
              source.luau punctuation.arguments.begin.luau
               ^
               source.luau punctuation.arguments.end.luau
>  					done = true
 ^^^^^^^
 source.luau
        ^^^^
        source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^
             source.luau keyword.operator.assignment.luau
              ^
              source.luau
               ^^^^
               source.luau constant.language.boolean.true.luau
>
 ^
 source.luau
>  					reject(...)
 ^^^^^^^
 source.luau
        ^^^^^^
        source.luau entity.name.function.luau
              ^
              source.luau punctuation.arguments.begin.luau
               ^^^
               source.luau keyword.other.unit.luau
                  ^
                  source.luau punctuation.arguments.end.luau
>  				end
 ^^^^^^
 source.luau
       ^^^
       source.luau keyword.control.luau
>  			end
 ^^^^^
 source.luau
      ^^^
      source.luau keyword.control.luau
>  		)
 ^^^^
 source.luau
     ^
     source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	if done then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^
       source.luau variable.other.readwrite.luau
           ^
           source.luau
            ^^^^
            source.luau keyword.control.luau
>  		cancel()
 ^^^^
 source.luau
     ^^^^^^
     source.luau entity.name.function.luau
           ^
           source.luau punctuation.arguments.begin.luau
            ^
            source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>function Promise.all(promises)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^
                  source.luau meta.function.luau entity.name.function.luau
                     ^
                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                      ^^^^^^^^
                      source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                              ^
                              source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  return Promise._all(debug.traceback(nil, 2), promises)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^^^^^^^^^^^^
                       source.luau support.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^
                                       source.luau constant.language.nil.luau
                                          ^
                                          source.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau
                                            ^
                                            source.luau constant.numeric.decimal.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
                                              ^
                                              source.luau punctuation.separator.arguments.luau
                                               ^
                                               source.luau
                                                ^^^^^^^^
                                                source.luau variable.other.readwrite.luau
                                                        ^
                                                        source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>function Promise.fold(list, callback, initialValue)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^
                  source.luau meta.function.luau entity.name.function.luau
                      ^
                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                       ^^^^
                       source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                           ^
                           source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                            ^
                            source.luau meta.function.luau meta.parameter.luau
                             ^^^^^^^^
                             source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                     ^
                                     source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                      ^
                                      source.luau meta.function.luau meta.parameter.luau
                                       ^^^^^^^^^^^^
                                       source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                   ^
                                                   source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  assert(type(list) == "table", "Bad argument #1 to Promise.fold: must be a table")
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau punctuation.arguments.begin.luau
               ^^^^
               source.luau variable.other.readwrite.luau
                   ^
                   source.luau punctuation.arguments.end.luau
                    ^
                    source.luau
                     ^^
                     source.luau keyword.operator.comparison.luau
                       ^
                       source.luau
                        ^
                        source.luau string.quoted.double.luau
                         ^^^^^
                         source.luau string.quoted.double.luau
                              ^
                              source.luau string.quoted.double.luau
                               ^
                               source.luau punctuation.separator.arguments.luau
                                ^
                                source.luau
                                 ^
                                 source.luau string.quoted.double.luau
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  source.luau string.quoted.double.luau
                                                                                  ^
                                                                                  source.luau string.quoted.double.luau
                                                                                   ^
                                                                                   source.luau punctuation.arguments.end.luau
>  assert(type(callback) == "function", "Bad argument #2 to Promise.fold: must be a function")
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau punctuation.arguments.begin.luau
               ^^^^^^^^
               source.luau variable.other.readwrite.luau
                       ^
                       source.luau punctuation.arguments.end.luau
                        ^
                        source.luau
                         ^^
                         source.luau keyword.operator.comparison.luau
                           ^
                           source.luau
                            ^
                            source.luau string.quoted.double.luau
                             ^^^^^^^^
                             source.luau string.quoted.double.luau
                                     ^
                                     source.luau string.quoted.double.luau
                                      ^
                                      source.luau punctuation.separator.arguments.luau
                                       ^
                                       source.luau
                                        ^
                                        source.luau string.quoted.double.luau
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                         source.luau string.quoted.double.luau
                                                                                            ^
                                                                                            source.luau string.quoted.double.luau
                                                                                             ^
                                                                                             source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  local accumulator = Promise.resolve(initialValue)
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^^^^^^
         source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^
                     source.luau keyword.operator.assignment.luau
                      ^
                      source.luau
                       ^^^^^^^
                       source.luau variable.other.readwrite.luau
                              ^
                              source.luau
                               ^^^^^^^
                               source.luau entity.name.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^^^^^^^^^^
                                       source.luau variable.other.readwrite.luau
                                                   ^
                                                   source.luau punctuation.arguments.end.luau
>  return Promise.each(list, function(resolvedElement, i)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^
                       source.luau variable.other.readwrite.luau
                           ^
                           source.luau punctuation.separator.arguments.luau
                            ^
                            source.luau
                             ^^^^^^^^
                             source.luau meta.function.luau keyword.control.luau
                                     ^
                                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                      ^^^^^^^^^^^^^^^
                                      source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                     ^
                                                     source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                      ^
                                                      source.luau meta.function.luau meta.parameter.luau
                                                       ^
                                                       source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                        ^
                                                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	accumulator = accumulator:andThen(function(previousValueResolved)
 ^^^
 source.luau
    ^^^^^^^^^^^
    source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^
                source.luau keyword.operator.assignment.luau
                 ^
                 source.luau
                  ^^^^^^^^^^^
                  source.luau variable.other.readwrite.luau
                             ^
                             source.luau
                              ^^^^^^^
                              source.luau entity.name.function.luau
                                     ^
                                     source.luau punctuation.arguments.begin.luau
                                      ^^^^^^^^
                                      source.luau meta.function.luau keyword.control.luau
                                              ^
                                              source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                               ^^^^^^^^^^^^^^^^^^^^^
                                               source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                    ^
                                                                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		return callback(previousValueResolved, resolvedElement, i)
 ^^^^
 source.luau
     ^^^^^^
     source.luau keyword.control.luau
           ^
           source.luau
            ^^^^^^^^
            source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^^^^^^^^^^^^^^^^^^^^^
                     source.luau variable.other.readwrite.luau
                                          ^
                                          source.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau
                                            ^^^^^^^^^^^^^^^
                                            source.luau variable.other.readwrite.luau
                                                           ^
                                                           source.luau punctuation.separator.arguments.luau
                                                            ^
                                                            source.luau
                                                             ^
                                                             source.luau variable.other.readwrite.luau
                                                              ^
                                                              source.luau punctuation.arguments.end.luau
>  	end)
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau punctuation.arguments.end.luau
>  end):andThenReturn(accumulator)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
       ^
       source.luau
        ^^^^^^^^^^^^^
        source.luau entity.name.function.luau
                     ^
                     source.luau punctuation.arguments.begin.luau
                      ^^^^^^^^^^^
                      source.luau variable.other.readwrite.luau
                                 ^
                                 source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>function Promise.some(promises, amount)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^
                  source.luau meta.function.luau entity.name.function.luau
                      ^
                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                       ^^^^^^^^
                       source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                               ^
                               source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                ^
                                source.luau meta.function.luau meta.parameter.luau
                                 ^^^^^^
                                 source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                       ^
                                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  assert(type(amount) == "number", "Bad argument #2 to Promise.some: must be a number")
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau punctuation.arguments.begin.luau
               ^^^^^^
               source.luau variable.other.readwrite.luau
                     ^
                     source.luau punctuation.arguments.end.luau
                      ^
                      source.luau
                       ^^
                       source.luau keyword.operator.comparison.luau
                         ^
                         source.luau
                          ^
                          source.luau string.quoted.double.luau
                           ^^^^^^
                           source.luau string.quoted.double.luau
                                 ^
                                 source.luau string.quoted.double.luau
                                  ^
                                  source.luau punctuation.separator.arguments.luau
                                   ^
                                   source.luau
                                    ^
                                    source.luau string.quoted.double.luau
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                     source.luau string.quoted.double.luau
                                                                                      ^
                                                                                      source.luau string.quoted.double.luau
                                                                                       ^
                                                                                       source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  return Promise._all(debug.traceback(nil, 2), promises, amount)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^^^^^^^^^^^^
                       source.luau support.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^
                                       source.luau constant.language.nil.luau
                                          ^
                                          source.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau
                                            ^
                                            source.luau constant.numeric.decimal.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
                                              ^
                                              source.luau punctuation.separator.arguments.luau
                                               ^
                                               source.luau
                                                ^^^^^^^^
                                                source.luau variable.other.readwrite.luau
                                                        ^
                                                        source.luau punctuation.separator.arguments.luau
                                                         ^
                                                         source.luau
                                                          ^^^^^^
                                                          source.luau variable.other.readwrite.luau
                                                                ^
                                                                source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>function Promise.any(promises)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^
                  source.luau meta.function.luau entity.name.function.luau
                     ^
                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                      ^^^^^^^^
                      source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                              ^
                              source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  return Promise._all(debug.traceback(nil, 2), promises, 1):andThen(function(values)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^^^^^^^^^^^^
                       source.luau support.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^
                                       source.luau constant.language.nil.luau
                                          ^
                                          source.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau
                                            ^
                                            source.luau constant.numeric.decimal.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
                                              ^
                                              source.luau punctuation.separator.arguments.luau
                                               ^
                                               source.luau
                                                ^^^^^^^^
                                                source.luau variable.other.readwrite.luau
                                                        ^
                                                        source.luau punctuation.separator.arguments.luau
                                                         ^
                                                         source.luau
                                                          ^
                                                          source.luau constant.numeric.decimal.luau
                                                           ^
                                                           source.luau punctuation.arguments.end.luau
                                                            ^
                                                            source.luau
                                                             ^^^^^^^
                                                             source.luau entity.name.function.luau
                                                                    ^
                                                                    source.luau punctuation.arguments.begin.luau
                                                                     ^^^^^^^^
                                                                     source.luau meta.function.luau keyword.control.luau
                                                                             ^
                                                                             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                                              ^^^^^^
                                                                              source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                                    ^
                                                                                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	return values[1]
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^
           source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^
                  source.luau constant.numeric.decimal.luau
                   ^^
                   source.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>function Promise.allSettled(promises)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                            ^
                            source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                             ^^^^^^^^
                             source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                     ^
                                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  if type(promises) ~= "table" then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^
      source.luau support.function.luau
          ^
          source.luau punctuation.arguments.begin.luau
           ^^^^^^^^
           source.luau variable.other.readwrite.luau
                   ^
                   source.luau punctuation.arguments.end.luau
                    ^
                    source.luau
                     ^^
                     source.luau keyword.operator.comparison.luau
                       ^
                       source.luau
                        ^
                        source.luau string.quoted.double.luau
                         ^^^^^
                         source.luau string.quoted.double.luau
                              ^
                              source.luau string.quoted.double.luau
                               ^
                               source.luau
                                ^^^^
                                source.luau keyword.control.luau
>  	error(string.format(ERROR_NON_LIST, "Promise.allSettled"), 2)
 ^^^
 source.luau
    ^^^^^
    source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^^^^^^^^^^
          source.luau support.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^^^
                        source.luau variable.other.constant.luau
                                      ^
                                      source.luau punctuation.separator.arguments.luau
                                       ^
                                       source.luau
                                        ^
                                        source.luau string.quoted.double.luau
                                         ^^^^^^^^^^^^^^^^^^
                                         source.luau string.quoted.double.luau
                                                           ^
                                                           source.luau string.quoted.double.luau
                                                            ^
                                                            source.luau punctuation.arguments.end.luau
                                                             ^
                                                             source.luau punctuation.separator.arguments.luau
                                                              ^
                                                              source.luau
                                                               ^
                                                               source.luau constant.numeric.decimal.luau
                                                                ^
                                                                source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  -- We need to check that each value is a promise here so that we can produce
 ^^
 source.luau
   ^^
   source.luau comment.line.double-dash.luau
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     source.luau comment.line.double-dash.luau
>  -- a proper error rather than a rejected promise with our error.
 ^^
 source.luau
   ^^
   source.luau comment.line.double-dash.luau
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     source.luau comment.line.double-dash.luau
>  for i, promise in pairs(promises) do
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau
       ^
       source.luau variable.parameter.luau
        ^^
        source.luau
          ^^^^^^^
          source.luau variable.parameter.luau
                 ^
                 source.luau
                  ^^
                  source.luau keyword.control.luau
                    ^
                    source.luau
                     ^^^^^
                     source.luau support.function.luau
                          ^
                          source.luau punctuation.arguments.begin.luau
                           ^^^^^^^^
                           source.luau variable.other.readwrite.luau
                                   ^
                                   source.luau punctuation.arguments.end.luau
                                    ^
                                    source.luau
                                     ^^
                                     source.luau keyword.control.luau
>  	if not Promise.is(promise) then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^
       source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^
                   source.luau entity.name.function.luau
                     ^
                     source.luau punctuation.arguments.begin.luau
                      ^^^^^^^
                      source.luau variable.other.readwrite.luau
                             ^
                             source.luau punctuation.arguments.end.luau
                              ^
                              source.luau
                               ^^^^
                               source.luau keyword.control.luau
>  		error(string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.allSettled", tostring(i)), 2)
 ^^^^
 source.luau
     ^^^^^
     source.luau support.function.luau
          ^
          source.luau punctuation.arguments.begin.luau
           ^^^^^^^^^^^^^
           source.luau support.function.luau
                        ^
                        source.luau punctuation.arguments.begin.luau
                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                         source.luau variable.other.constant.luau
                                                  ^
                                                  source.luau punctuation.separator.arguments.luau
                                                   ^
                                                   source.luau
                                                    ^
                                                    source.luau string.quoted.double.luau
                                                     ^^^^^^^^^^^^^^^^^^
                                                     source.luau string.quoted.double.luau
                                                                       ^
                                                                       source.luau string.quoted.double.luau
                                                                        ^
                                                                        source.luau punctuation.separator.arguments.luau
                                                                         ^
                                                                         source.luau
                                                                          ^^^^^^^^
                                                                          source.luau support.function.luau
                                                                                  ^
                                                                                  source.luau punctuation.arguments.begin.luau
                                                                                   ^
                                                                                   source.luau variable.other.readwrite.luau
                                                                                    ^
                                                                                    source.luau punctuation.arguments.end.luau
                                                                                     ^
                                                                                     source.luau punctuation.arguments.end.luau
                                                                                      ^
                                                                                      source.luau punctuation.separator.arguments.luau
                                                                                       ^
                                                                                       source.luau
                                                                                        ^
                                                                                        source.luau constant.numeric.decimal.luau
                                                                                         ^
                                                                                         source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  -- If there are no values then return an already resolved promise.
 ^^
 source.luau
   ^^
   source.luau comment.line.double-dash.luau
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     source.luau comment.line.double-dash.luau
>  if #promises == 0 then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^
      source.luau keyword.operator.other.luau
       ^^^^^^^^
       source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^^
                source.luau keyword.operator.comparison.luau
                  ^
                  source.luau
                   ^
                   source.luau constant.numeric.decimal.luau
                    ^
                    source.luau
                     ^^^^
                     source.luau keyword.control.luau
>  	return Promise.resolve({})
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^^^^^^
                   source.luau entity.name.function.luau
                          ^
                          source.luau punctuation.arguments.begin.luau
                           ^
                           source.luau punctuation.table.begin.luau
                            ^
                            source.luau punctuation.table.end.luau
                             ^
                             source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^^^^^^^^^^^^
                       source.luau support.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^
                                       source.luau constant.language.nil.luau
                                          ^
                                          source.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau
                                            ^
                                            source.luau constant.numeric.decimal.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
                                              ^
                                              source.luau punctuation.separator.arguments.luau
                                               ^
                                               source.luau
                                                ^^^^^^^^
                                                source.luau meta.function.luau keyword.control.luau
                                                        ^
                                                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                         ^^^^^^^
                                                         source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                ^
                                                                source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                                 ^
                                                                 source.luau meta.function.luau meta.parameter.luau
                                                                  ^
                                                                  source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                   ^
                                                                   source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                                    ^
                                                                    source.luau meta.function.luau meta.parameter.luau
                                                                     ^^^^^^^^
                                                                     source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                             ^
                                                                             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	-- An array to contain our resolved values from the given promises.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	local fates = {}
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^
          source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^
                source.luau keyword.operator.assignment.luau
                 ^
                 source.luau
                  ^
                  source.luau punctuation.table.begin.luau
                   ^
                   source.luau punctuation.table.end.luau
>  	local newPromises = {}
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^
                      source.luau keyword.operator.assignment.luau
                       ^
                       source.luau
                        ^
                        source.luau punctuation.table.begin.luau
                         ^
                         source.luau punctuation.table.end.luau
>
 ^
 source.luau
>  	-- Keep a count of resolved promises because just checking the resolved
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- values length wouldn't account for promises that resolve with nil.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	local finishedCount = 0
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^
                          source.luau constant.numeric.decimal.luau
>
 ^
 source.luau
>  	-- Called when a single value is resolved and resolves if all are done.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	local function resolveOne(i, ...)
 ^^^
 source.luau
    ^^^^^
    source.luau meta.function.luau storage.modifier.local.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^^
          source.luau meta.function.luau keyword.control.luau
                  ^
                  source.luau meta.function.luau
                   ^^^^^^^^^^
                   source.luau meta.function.luau entity.name.function.luau
                             ^
                             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                              ^
                              source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                               ^
                               source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                ^
                                source.luau meta.function.luau meta.parameter.luau
                                 ^^^
                                 source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                    ^
                                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		finishedCount = finishedCount + 1
 ^^^^
 source.luau
     ^^^^^^^^^^^^^
     source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^
                   source.luau keyword.operator.assignment.luau
                    ^
                    source.luau
                     ^^^^^^^^^^^^^
                     source.luau variable.other.readwrite.luau
                                  ^
                                  source.luau
                                   ^
                                   source.luau keyword.operator.arithmetic.luau
                                    ^
                                    source.luau
                                     ^
                                     source.luau constant.numeric.decimal.luau
>
 ^
 source.luau
>  		fates[i] = ...
 ^^^^
 source.luau
     ^^^^^
     source.luau variable.other.readwrite.luau
          ^
          source.luau
           ^
           source.luau variable.other.readwrite.luau
            ^^
            source.luau
              ^
              source.luau keyword.operator.assignment.luau
               ^
               source.luau
                ^^^
                source.luau keyword.other.unit.luau
>
 ^
 source.luau
>  		if finishedCount >= #promises then
 ^^^^
 source.luau
     ^^
     source.luau keyword.control.luau
       ^
       source.luau
        ^^^^^^^^^^^^^
        source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^^
                      source.luau keyword.operator.comparison.luau
                        ^
                        source.luau
                         ^
                         source.luau keyword.operator.other.luau
                          ^^^^^^^^
                          source.luau variable.other.readwrite.luau
                                  ^
                                  source.luau
                                   ^^^^
                                   source.luau keyword.control.luau
>  			resolve(fates)
 ^^^^^
 source.luau
      ^^^^^^^
      source.luau entity.name.function.luau
             ^
             source.luau punctuation.arguments.begin.luau
              ^^^^^
              source.luau variable.other.readwrite.luau
                   ^
                   source.luau punctuation.arguments.end.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	onCancel(function()
 ^^^
 source.luau
    ^^^^^^^^
    source.luau entity.name.function.luau
            ^
            source.luau punctuation.arguments.begin.luau
             ^^^^^^^^
             source.luau meta.function.luau keyword.control.luau
                     ^
                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                      ^
                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		for _, promise in ipairs(newPromises) do
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
        ^
        source.luau
         ^
         source.luau variable.parameter.luau
          ^^
          source.luau
            ^^^^^^^
            source.luau variable.parameter.luau
                   ^
                   source.luau
                    ^^
                    source.luau keyword.control.luau
                      ^
                      source.luau
                       ^^^^^^
                       source.luau support.function.luau
                             ^
                             source.luau punctuation.arguments.begin.luau
                              ^^^^^^^^^^^
                              source.luau variable.other.readwrite.luau
                                         ^
                                         source.luau punctuation.arguments.end.luau
                                          ^
                                          source.luau
                                           ^^
                                           source.luau keyword.control.luau
>  			promise:cancel()
 ^^^^^
 source.luau
      ^^^^^^^
      source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^^^^^^
              source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^
                     source.luau punctuation.arguments.end.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>  	end)
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  	-- We can assume the values inside `promises` are all promises since we
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- checked above.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	for i, promise in ipairs(promises) do
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau
        ^
        source.luau variable.parameter.luau
         ^^
         source.luau
           ^^^^^^^
           source.luau variable.parameter.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.control.luau
                     ^
                     source.luau
                      ^^^^^^
                      source.luau support.function.luau
                            ^
                            source.luau punctuation.arguments.begin.luau
                             ^^^^^^^^
                             source.luau variable.other.readwrite.luau
                                     ^
                                     source.luau punctuation.arguments.end.luau
                                      ^
                                      source.luau
                                       ^^
                                       source.luau keyword.control.luau
>  		newPromises[i] = promise:finally(
 ^^^^
 source.luau
     ^^^^^^^^^^^
     source.luau variable.other.readwrite.luau
                ^
                source.luau
                 ^
                 source.luau variable.other.readwrite.luau
                  ^^
                  source.luau
                    ^
                    source.luau keyword.operator.assignment.luau
                     ^
                     source.luau
                      ^^^^^^^
                      source.luau variable.other.readwrite.luau
                             ^
                             source.luau
                              ^^^^^^^
                              source.luau entity.name.function.luau
                                     ^
                                     source.luau punctuation.arguments.begin.luau
>  			function(...)
 ^^^^^
 source.luau
      ^^^^^^^^
      source.luau meta.function.luau keyword.control.luau
              ^
              source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
               ^^^
               source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                  ^
                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  				resolveOne(i, ...)
 ^^^^^^
 source.luau
       ^^^^^^^^^^
       source.luau entity.name.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^
                  source.luau variable.other.readwrite.luau
                   ^
                   source.luau punctuation.separator.arguments.luau
                    ^
                    source.luau
                     ^^^
                     source.luau keyword.other.unit.luau
                        ^
                        source.luau punctuation.arguments.end.luau
>  			end
 ^^^^^
 source.luau
      ^^^
      source.luau keyword.control.luau
>  		)
 ^^^^
 source.luau
     ^
     source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Races a set of Promises and returns the first one that resolves,
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  cancelling the others.
 ^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.race(promises)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^
                  source.luau meta.function.luau entity.name.function.luau
                      ^
                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                       ^^^^^^^^
                       source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                               ^
                               source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  assert(type(promises) == "table", string.format(ERROR_NON_LIST, "Promise.race"))
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau punctuation.arguments.begin.luau
               ^^^^^^^^
               source.luau variable.other.readwrite.luau
                       ^
                       source.luau punctuation.arguments.end.luau
                        ^
                        source.luau
                         ^^
                         source.luau keyword.operator.comparison.luau
                           ^
                           source.luau
                            ^
                            source.luau string.quoted.double.luau
                             ^^^^^
                             source.luau string.quoted.double.luau
                                  ^
                                  source.luau string.quoted.double.luau
                                   ^
                                   source.luau punctuation.separator.arguments.luau
                                    ^
                                    source.luau
                                     ^^^^^^^^^^^^^
                                     source.luau support.function.luau
                                                  ^
                                                  source.luau punctuation.arguments.begin.luau
                                                   ^^^^^^^^^^^^^^
                                                   source.luau variable.other.constant.luau
                                                                 ^
                                                                 source.luau punctuation.separator.arguments.luau
                                                                  ^
                                                                  source.luau
                                                                   ^
                                                                   source.luau string.quoted.double.luau
                                                                    ^^^^^^^^^^^^
                                                                    source.luau string.quoted.double.luau
                                                                                ^
                                                                                source.luau string.quoted.double.luau
                                                                                 ^
                                                                                 source.luau punctuation.arguments.end.luau
                                                                                  ^
                                                                                  source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  for i, promise in pairs(promises) do
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau
       ^
       source.luau variable.parameter.luau
        ^^
        source.luau
          ^^^^^^^
          source.luau variable.parameter.luau
                 ^
                 source.luau
                  ^^
                  source.luau keyword.control.luau
                    ^
                    source.luau
                     ^^^^^
                     source.luau support.function.luau
                          ^
                          source.luau punctuation.arguments.begin.luau
                           ^^^^^^^^
                           source.luau variable.other.readwrite.luau
                                   ^
                                   source.luau punctuation.arguments.end.luau
                                    ^
                                    source.luau
                                     ^^
                                     source.luau keyword.control.luau
>  	assert(Promise.is(promise), string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.race", tostring(i)))
 ^^^
 source.luau
    ^^^^^^
    source.luau support.function.luau
          ^
          source.luau punctuation.arguments.begin.luau
           ^^^^^^^
           source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^
                   source.luau entity.name.function.luau
                     ^
                     source.luau punctuation.arguments.begin.luau
                      ^^^^^^^
                      source.luau variable.other.readwrite.luau
                             ^
                             source.luau punctuation.arguments.end.luau
                              ^
                              source.luau punctuation.separator.arguments.luau
                               ^
                               source.luau
                                ^^^^^^^^^^^^^
                                source.luau support.function.luau
                                             ^
                                             source.luau punctuation.arguments.begin.luau
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                                              source.luau variable.other.constant.luau
                                                                       ^
                                                                       source.luau punctuation.separator.arguments.luau
                                                                        ^
                                                                        source.luau
                                                                         ^
                                                                         source.luau string.quoted.double.luau
                                                                          ^^^^^^^^^^^^
                                                                          source.luau string.quoted.double.luau
                                                                                      ^
                                                                                      source.luau string.quoted.double.luau
                                                                                       ^
                                                                                       source.luau punctuation.separator.arguments.luau
                                                                                        ^
                                                                                        source.luau
                                                                                         ^^^^^^^^
                                                                                         source.luau support.function.luau
                                                                                                 ^
                                                                                                 source.luau punctuation.arguments.begin.luau
                                                                                                  ^
                                                                                                  source.luau variable.other.readwrite.luau
                                                                                                   ^
                                                                                                   source.luau punctuation.arguments.end.luau
                                                                                                    ^
                                                                                                    source.luau punctuation.arguments.end.luau
                                                                                                     ^
                                                                                                     source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  return Promise._new(debug.traceback(nil, 2), function(resolve, reject, onCancel)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^^^^^^^^^^^^
                       source.luau support.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^
                                       source.luau constant.language.nil.luau
                                          ^
                                          source.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau
                                            ^
                                            source.luau constant.numeric.decimal.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
                                              ^
                                              source.luau punctuation.separator.arguments.luau
                                               ^
                                               source.luau
                                                ^^^^^^^^
                                                source.luau meta.function.luau keyword.control.luau
                                                        ^
                                                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                         ^^^^^^^
                                                         source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                ^
                                                                source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                                 ^
                                                                 source.luau meta.function.luau meta.parameter.luau
                                                                  ^^^^^^
                                                                  source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                        ^
                                                                        source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                                         ^
                                                                         source.luau meta.function.luau meta.parameter.luau
                                                                          ^^^^^^^^
                                                                          source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                                  ^
                                                                                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	local newPromises = {}
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^
                      source.luau keyword.operator.assignment.luau
                       ^
                       source.luau
                        ^
                        source.luau punctuation.table.begin.luau
                         ^
                         source.luau punctuation.table.end.luau
>  	local finished = false
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^
          source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^
                   source.luau keyword.operator.assignment.luau
                    ^
                    source.luau
                     ^^^^^
                     source.luau constant.language.boolean.false.luau
>
 ^
 source.luau
>  	local function cancel()
 ^^^
 source.luau
    ^^^^^
    source.luau meta.function.luau storage.modifier.local.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^^
          source.luau meta.function.luau keyword.control.luau
                  ^
                  source.luau meta.function.luau
                   ^^^^^^
                   source.luau meta.function.luau entity.name.function.luau
                         ^
                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                          ^
                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		for _, promise in ipairs(newPromises) do
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
        ^
        source.luau
         ^
         source.luau variable.parameter.luau
          ^^
          source.luau
            ^^^^^^^
            source.luau variable.parameter.luau
                   ^
                   source.luau
                    ^^
                    source.luau keyword.control.luau
                      ^
                      source.luau
                       ^^^^^^
                       source.luau support.function.luau
                             ^
                             source.luau punctuation.arguments.begin.luau
                              ^^^^^^^^^^^
                              source.luau variable.other.readwrite.luau
                                         ^
                                         source.luau punctuation.arguments.end.luau
                                          ^
                                          source.luau
                                           ^^
                                           source.luau keyword.control.luau
>  			promise:cancel()
 ^^^^^
 source.luau
      ^^^^^^^
      source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^^^^^^
              source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^
                     source.luau punctuation.arguments.end.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	local function finalize(callback)
 ^^^
 source.luau
    ^^^^^
    source.luau meta.function.luau storage.modifier.local.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^^
          source.luau meta.function.luau keyword.control.luau
                  ^
                  source.luau meta.function.luau
                   ^^^^^^^^
                   source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                            ^^^^^^^^
                            source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                    ^
                                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		return function (...)
 ^^^^
 source.luau
     ^^^^^^
     source.luau keyword.control.luau
           ^
           source.luau
            ^^^^^^^^
            source.luau meta.function.luau keyword.control.luau
                    ^
                    source.luau meta.function.luau
                     ^
                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                      ^^^
                      source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                         ^
                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  			cancel()
 ^^^^^
 source.luau
      ^^^^^^
      source.luau entity.name.function.luau
            ^
            source.luau punctuation.arguments.begin.luau
             ^
             source.luau punctuation.arguments.end.luau
>  			finished = true
 ^^^^^
 source.luau
      ^^^^^^^^
      source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^
               source.luau keyword.operator.assignment.luau
                ^
                source.luau
                 ^^^^
                 source.luau constant.language.boolean.true.luau
>  			return callback(...)
 ^^^^^
 source.luau
      ^^^^^^
      source.luau keyword.control.luau
            ^
            source.luau
             ^^^^^^^^
             source.luau entity.name.function.luau
                     ^
                     source.luau punctuation.arguments.begin.luau
                      ^^^
                      source.luau keyword.other.unit.luau
                         ^
                         source.luau punctuation.arguments.end.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	if onCancel(finalize(reject)) then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^^^^^
       source.luau entity.name.function.luau
               ^
               source.luau punctuation.arguments.begin.luau
                ^^^^^^^^
                source.luau entity.name.function.luau
                        ^
                        source.luau punctuation.arguments.begin.luau
                         ^^^^^^
                         source.luau variable.other.readwrite.luau
                               ^
                               source.luau punctuation.arguments.end.luau
                                ^
                                source.luau punctuation.arguments.end.luau
                                 ^
                                 source.luau
                                  ^^^^
                                  source.luau keyword.control.luau
>  		return
 ^^^^
 source.luau
     ^^^^^^
     source.luau keyword.control.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	for i, promise in ipairs(promises) do
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau
        ^
        source.luau variable.parameter.luau
         ^^
         source.luau
           ^^^^^^^
           source.luau variable.parameter.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.control.luau
                     ^
                     source.luau
                      ^^^^^^
                      source.luau support.function.luau
                            ^
                            source.luau punctuation.arguments.begin.luau
                             ^^^^^^^^
                             source.luau variable.other.readwrite.luau
                                     ^
                                     source.luau punctuation.arguments.end.luau
                                      ^
                                      source.luau
                                       ^^
                                       source.luau keyword.control.luau
>  		newPromises[i] = promise:andThen(finalize(resolve), finalize(reject))
 ^^^^
 source.luau
     ^^^^^^^^^^^
     source.luau variable.other.readwrite.luau
                ^
                source.luau
                 ^
                 source.luau variable.other.readwrite.luau
                  ^^
                  source.luau
                    ^
                    source.luau keyword.operator.assignment.luau
                     ^
                     source.luau
                      ^^^^^^^
                      source.luau variable.other.readwrite.luau
                             ^
                             source.luau
                              ^^^^^^^
                              source.luau entity.name.function.luau
                                     ^
                                     source.luau punctuation.arguments.begin.luau
                                      ^^^^^^^^
                                      source.luau entity.name.function.luau
                                              ^
                                              source.luau punctuation.arguments.begin.luau
                                               ^^^^^^^
                                               source.luau variable.other.readwrite.luau
                                                      ^
                                                      source.luau punctuation.arguments.end.luau
                                                       ^
                                                       source.luau punctuation.separator.arguments.luau
                                                        ^
                                                        source.luau
                                                         ^^^^^^^^
                                                         source.luau entity.name.function.luau
                                                                 ^
                                                                 source.luau punctuation.arguments.begin.luau
                                                                  ^^^^^^
                                                                  source.luau variable.other.readwrite.luau
                                                                        ^
                                                                        source.luau punctuation.arguments.end.luau
                                                                         ^
                                                                         source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	if finished then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^^^^^
       source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^^^^
                source.luau keyword.control.luau
>  		cancel()
 ^^^^
 source.luau
     ^^^^^^
     source.luau entity.name.function.luau
           ^
           source.luau punctuation.arguments.begin.luau
            ^
            source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Iterates serially over the given an array of values, calling the predicate callback on each before continuing.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  If the predicate returns a Promise, we wait for that Promise to resolve before continuing to the next item
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  in the array. If the Promise the predicate returns rejects, the Promise from Promise.each is also rejected with
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  the same value.
 ^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>
 ^
 source.luau comment.block.luau
>  Returns a Promise containing an array of the return values from the predicate for each item in the original list.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.each(list, predicate)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^
                  source.luau meta.function.luau entity.name.function.luau
                      ^
                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                       ^^^^
                       source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                           ^
                           source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                            ^
                            source.luau meta.function.luau meta.parameter.luau
                             ^^^^^^^^^
                             source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                      ^
                                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  assert(type(list) == "table", string.format(ERROR_NON_LIST, "Promise.each"))
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau punctuation.arguments.begin.luau
               ^^^^
               source.luau variable.other.readwrite.luau
                   ^
                   source.luau punctuation.arguments.end.luau
                    ^
                    source.luau
                     ^^
                     source.luau keyword.operator.comparison.luau
                       ^
                       source.luau
                        ^
                        source.luau string.quoted.double.luau
                         ^^^^^
                         source.luau string.quoted.double.luau
                              ^
                              source.luau string.quoted.double.luau
                               ^
                               source.luau punctuation.separator.arguments.luau
                                ^
                                source.luau
                                 ^^^^^^^^^^^^^
                                 source.luau support.function.luau
                                              ^
                                              source.luau punctuation.arguments.begin.luau
                                               ^^^^^^^^^^^^^^
                                               source.luau variable.other.constant.luau
                                                             ^
                                                             source.luau punctuation.separator.arguments.luau
                                                              ^
                                                              source.luau
                                                               ^
                                                               source.luau string.quoted.double.luau
                                                                ^^^^^^^^^^^^
                                                                source.luau string.quoted.double.luau
                                                                            ^
                                                                            source.luau string.quoted.double.luau
                                                                             ^
                                                                             source.luau punctuation.arguments.end.luau
                                                                              ^
                                                                              source.luau punctuation.arguments.end.luau
>  assert(type(predicate) == "function", string.format(ERROR_NON_FUNCTION, "Promise.each"))
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau punctuation.arguments.begin.luau
               ^^^^^^^^^
               source.luau variable.other.readwrite.luau
                        ^
                        source.luau punctuation.arguments.end.luau
                         ^
                         source.luau
                          ^^
                          source.luau keyword.operator.comparison.luau
                            ^
                            source.luau
                             ^
                             source.luau string.quoted.double.luau
                              ^^^^^^^^
                              source.luau string.quoted.double.luau
                                      ^
                                      source.luau string.quoted.double.luau
                                       ^
                                       source.luau punctuation.separator.arguments.luau
                                        ^
                                        source.luau
                                         ^^^^^^^^^^^^^
                                         source.luau support.function.luau
                                                      ^
                                                      source.luau punctuation.arguments.begin.luau
                                                       ^^^^^^^^^^^^^^^^^^
                                                       source.luau variable.other.constant.luau
                                                                         ^
                                                                         source.luau punctuation.separator.arguments.luau
                                                                          ^
                                                                          source.luau
                                                                           ^
                                                                           source.luau string.quoted.double.luau
                                                                            ^^^^^^^^^^^^
                                                                            source.luau string.quoted.double.luau
                                                                                        ^
                                                                                        source.luau string.quoted.double.luau
                                                                                         ^
                                                                                         source.luau punctuation.arguments.end.luau
                                                                                          ^
                                                                                          source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  return Promise._new(debug.traceback(nil, 2), function(resolve, reject, onCancel)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^^^^^^^^^^^^
                       source.luau support.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^
                                       source.luau constant.language.nil.luau
                                          ^
                                          source.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau
                                            ^
                                            source.luau constant.numeric.decimal.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
                                              ^
                                              source.luau punctuation.separator.arguments.luau
                                               ^
                                               source.luau
                                                ^^^^^^^^
                                                source.luau meta.function.luau keyword.control.luau
                                                        ^
                                                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                         ^^^^^^^
                                                         source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                ^
                                                                source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                                 ^
                                                                 source.luau meta.function.luau meta.parameter.luau
                                                                  ^^^^^^
                                                                  source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                        ^
                                                                        source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                                         ^
                                                                         source.luau meta.function.luau meta.parameter.luau
                                                                          ^^^^^^^^
                                                                          source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                                  ^
                                                                                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	local results = {}
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^
                  source.luau keyword.operator.assignment.luau
                   ^
                   source.luau
                    ^
                    source.luau punctuation.table.begin.luau
                     ^
                     source.luau punctuation.table.end.luau
>  	local promisesToCancel = {}
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                          ^
                          source.luau
                           ^
                           source.luau keyword.operator.assignment.luau
                            ^
                            source.luau
                             ^
                             source.luau punctuation.table.begin.luau
                              ^
                              source.luau punctuation.table.end.luau
>
 ^
 source.luau
>  	local cancelled = false
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^
          source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^
                    source.luau keyword.operator.assignment.luau
                     ^
                     source.luau
                      ^^^^^
                      source.luau constant.language.boolean.false.luau
>
 ^
 source.luau
>  	local function cancel()
 ^^^
 source.luau
    ^^^^^
    source.luau meta.function.luau storage.modifier.local.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^^
          source.luau meta.function.luau keyword.control.luau
                  ^
                  source.luau meta.function.luau
                   ^^^^^^
                   source.luau meta.function.luau entity.name.function.luau
                         ^
                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                          ^
                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		for _, promiseToCancel in ipairs(promisesToCancel) do
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
        ^
        source.luau
         ^
         source.luau variable.parameter.luau
          ^^
          source.luau
            ^^^^^^^^^^^^^^^
            source.luau variable.parameter.luau
                           ^
                           source.luau
                            ^^
                            source.luau keyword.control.luau
                              ^
                              source.luau
                               ^^^^^^
                               source.luau support.function.luau
                                     ^
                                     source.luau punctuation.arguments.begin.luau
                                      ^^^^^^^^^^^^^^^^
                                      source.luau variable.other.readwrite.luau
                                                      ^
                                                      source.luau punctuation.arguments.end.luau
                                                       ^
                                                       source.luau
                                                        ^^
                                                        source.luau keyword.control.luau
>  			promiseToCancel:cancel()
 ^^^^^
 source.luau
      ^^^^^^^^^^^^^^^
      source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^^^^^^
                      source.luau entity.name.function.luau
                            ^
                            source.luau punctuation.arguments.begin.luau
                             ^
                             source.luau punctuation.arguments.end.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	onCancel(function()
 ^^^
 source.luau
    ^^^^^^^^
    source.luau entity.name.function.luau
            ^
            source.luau punctuation.arguments.begin.luau
             ^^^^^^^^
             source.luau meta.function.luau keyword.control.luau
                     ^
                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                      ^
                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		cancelled = true
 ^^^^
 source.luau
     ^^^^^^^^^
     source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^
               source.luau keyword.operator.assignment.luau
                ^
                source.luau
                 ^^^^
                 source.luau constant.language.boolean.true.luau
>
 ^
 source.luau
>  		cancel()
 ^^^^
 source.luau
     ^^^^^^
     source.luau entity.name.function.luau
           ^
           source.luau punctuation.arguments.begin.luau
            ^
            source.luau punctuation.arguments.end.luau
>  	end)
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  	-- We need to preprocess the list of values and look for Promises.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- If we find some, we must register our andThen calls now, so that those Promises have a consumer
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- from us registered. If we don't do this, those Promises might get cancelled by something else
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- before we get to them in the series because it's not possible to tell that we plan to use it
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- unless we indicate it here.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>
 ^
 source.luau
>  	local preprocessedList = {}
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                          ^
                          source.luau
                           ^
                           source.luau keyword.operator.assignment.luau
                            ^
                            source.luau
                             ^
                             source.luau punctuation.table.begin.luau
                              ^
                              source.luau punctuation.table.end.luau
>
 ^
 source.luau
>  	for index, value in ipairs(list) do
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau
        ^^^^^
        source.luau variable.parameter.luau
             ^^
             source.luau
               ^^^^^
               source.luau variable.parameter.luau
                    ^
                    source.luau
                     ^^
                     source.luau keyword.control.luau
                       ^
                       source.luau
                        ^^^^^^
                        source.luau support.function.luau
                              ^
                              source.luau punctuation.arguments.begin.luau
                               ^^^^
                               source.luau variable.other.readwrite.luau
                                   ^
                                   source.luau punctuation.arguments.end.luau
                                    ^
                                    source.luau
                                     ^^
                                     source.luau keyword.control.luau
>  		if Promise.is(value) then
 ^^^^
 source.luau
     ^^
     source.luau keyword.control.luau
       ^
       source.luau
        ^^^^^^^
        source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^^
                source.luau entity.name.function.luau
                  ^
                  source.luau punctuation.arguments.begin.luau
                   ^^^^^
                   source.luau variable.other.readwrite.luau
                        ^
                        source.luau punctuation.arguments.end.luau
                         ^
                         source.luau
                          ^^^^
                          source.luau keyword.control.luau
>  			if value:getStatus() == Promise.Status.Cancelled then
 ^^^^^
 source.luau
      ^^
      source.luau keyword.control.luau
        ^
        source.luau
         ^^^^^
         source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^^^^^^^^^
               source.luau entity.name.function.luau
                        ^
                        source.luau punctuation.arguments.begin.luau
                         ^
                         source.luau punctuation.arguments.end.luau
                          ^
                          source.luau
                           ^^
                           source.luau keyword.operator.comparison.luau
                             ^
                             source.luau
                              ^^^^^^^
                              source.luau variable.other.readwrite.luau
                                     ^
                                     source.luau
                                      ^^^^^^
                                      source.luau variable.other.property.luau
                                            ^
                                            source.luau
                                             ^^^^^^^^^
                                             source.luau variable.other.property.luau
                                                      ^
                                                      source.luau
                                                       ^^^^
                                                       source.luau keyword.control.luau
>  				cancel()
 ^^^^^^
 source.luau
       ^^^^^^
       source.luau entity.name.function.luau
             ^
             source.luau punctuation.arguments.begin.luau
              ^
              source.luau punctuation.arguments.end.luau
>  				return reject(Error.new({
 ^^^^^^
 source.luau
       ^^^^^^
       source.luau keyword.control.luau
             ^
             source.luau
              ^^^^^^
              source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^^^^^
                     source.luau variable.other.readwrite.luau
                          ^
                          source.luau
                           ^^^
                           source.luau entity.name.function.luau
                              ^
                              source.luau punctuation.arguments.begin.luau
                               ^
                               source.luau punctuation.table.begin.luau
>  					error = "Promise is cancelled",
 ^^^^^^^
 source.luau
        ^^^^^
        source.luau support.function.luau
             ^
             source.luau
              ^
              source.luau keyword.operator.assignment.luau
               ^
               source.luau
                ^
                source.luau string.quoted.double.luau
                 ^^^^^^^^^^^^^^^^^^^^
                 source.luau string.quoted.double.luau
                                     ^
                                     source.luau string.quoted.double.luau
                                      ^
                                      source.luau punctuation.separator.fields.luau
>  					kind = Error.Kind.AlreadyCancelled,
 ^^^^^^^
 source.luau
        ^^^^
        source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^
             source.luau keyword.operator.assignment.luau
              ^
              source.luau
               ^^^^^
               source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^^^^
                     source.luau variable.other.property.luau
                         ^
                         source.luau
                          ^^^^^^^^^^^^^^^^
                          source.luau variable.other.property.luau
                                          ^
                                          source.luau punctuation.separator.fields.luau
>  					context = string.format(
 ^^^^^^^
 source.luau
        ^^^^^^^
        source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^
                source.luau keyword.operator.assignment.luau
                 ^
                 source.luau
                  ^^^^^^^^^^^^^
                  source.luau support.function.luau
                               ^
                               source.luau punctuation.arguments.begin.luau
>  						"The Promise that was part of the array at index %d passed into Promise.each was already cancelled when Promise.each began.\n\nThat Promise was created at:\n\n%s",
 ^^^^^^^^
 source.luau
         ^
         source.luau string.quoted.double.luau
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          source.luau string.quoted.double.luau
                                                                                                                                    ^^
                                                                                                                                    source.luau string.quoted.double.luau constant.character.escape.luau
                                                                                                                                      ^^
                                                                                                                                      source.luau string.quoted.double.luau constant.character.escape.luau
                                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                                                                                                                        source.luau string.quoted.double.luau
                                                                                                                                                                    ^^
                                                                                                                                                                    source.luau string.quoted.double.luau constant.character.escape.luau
                                                                                                                                                                      ^^
                                                                                                                                                                      source.luau string.quoted.double.luau constant.character.escape.luau
                                                                                                                                                                        ^^
                                                                                                                                                                        source.luau string.quoted.double.luau
                                                                                                                                                                          ^
                                                                                                                                                                          source.luau string.quoted.double.luau
                                                                                                                                                                           ^
                                                                                                                                                                           source.luau punctuation.separator.arguments.luau
>  						index,
 ^^^^^^^^
 source.luau
         ^^^^^
         source.luau variable.other.readwrite.luau
              ^
              source.luau punctuation.separator.arguments.luau
>  						value._source
 ^^^^^^^^
 source.luau
         ^^^^^
         source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^^^^^^^
               source.luau variable.other.property.luau
>  					),
 ^^^^^^^
 source.luau
        ^
        source.luau punctuation.arguments.end.luau
         ^
         source.luau punctuation.separator.fields.luau
>  				}))
 ^^^^^^
 source.luau
       ^
       source.luau punctuation.table.end.luau
        ^
        source.luau punctuation.arguments.end.luau
         ^
         source.luau punctuation.arguments.end.luau
>  			elseif value:getStatus() == Promise.Status.Rejected then
 ^^^^^
 source.luau
      ^^^^^^
      source.luau keyword.control.luau
            ^
            source.luau
             ^^^^^
             source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^^^^^^^^
                   source.luau entity.name.function.luau
                            ^
                            source.luau punctuation.arguments.begin.luau
                             ^
                             source.luau punctuation.arguments.end.luau
                              ^
                              source.luau
                               ^^
                               source.luau keyword.operator.comparison.luau
                                 ^
                                 source.luau
                                  ^^^^^^^
                                  source.luau variable.other.readwrite.luau
                                         ^
                                         source.luau
                                          ^^^^^^
                                          source.luau variable.other.property.luau
                                                ^
                                                source.luau
                                                 ^^^^^^^^
                                                 source.luau variable.other.property.luau
                                                         ^
                                                         source.luau
                                                          ^^^^
                                                          source.luau keyword.control.luau
>  				cancel()
 ^^^^^^
 source.luau
       ^^^^^^
       source.luau entity.name.function.luau
             ^
             source.luau punctuation.arguments.begin.luau
              ^
              source.luau punctuation.arguments.end.luau
>  				return reject(select(2, value:await()))
 ^^^^^^
 source.luau
       ^^^^^^
       source.luau keyword.control.luau
             ^
             source.luau
              ^^^^^^
              source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^^^^^^
                     source.luau support.function.luau
                           ^
                           source.luau punctuation.arguments.begin.luau
                            ^
                            source.luau constant.numeric.decimal.luau
                             ^
                             source.luau punctuation.separator.arguments.luau
                              ^
                              source.luau
                               ^^^^^
                               source.luau variable.other.readwrite.luau
                                    ^
                                    source.luau
                                     ^^^^^
                                     source.luau entity.name.function.luau
                                          ^
                                          source.luau punctuation.arguments.begin.luau
                                           ^
                                           source.luau punctuation.arguments.end.luau
                                            ^
                                            source.luau punctuation.arguments.end.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
>  			end
 ^^^^^
 source.luau
      ^^^
      source.luau keyword.control.luau
>
 ^
 source.luau
>  			-- Chain a new Promise from this one so we only cancel ours
 ^^^^^
 source.luau
      ^^
      source.luau comment.line.double-dash.luau
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        source.luau comment.line.double-dash.luau
>  			local ourPromise = value:andThen(function(...)
 ^^^^^
 source.luau
      ^^^^^
      source.luau storage.modifier.local.luau
           ^
           source.luau
            ^^^^^^^^^^
            source.luau variable.other.readwrite.luau
                      ^
                      source.luau
                       ^
                       source.luau keyword.operator.assignment.luau
                        ^
                        source.luau
                         ^^^^^
                         source.luau variable.other.readwrite.luau
                              ^
                              source.luau
                               ^^^^^^^
                               source.luau entity.name.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^^^^^^
                                       source.luau meta.function.luau keyword.control.luau
                                               ^
                                               source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                ^^^
                                                source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                                   ^
                                                   source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  				return ...
 ^^^^^^
 source.luau
       ^^^^^^
       source.luau keyword.control.luau
             ^
             source.luau
              ^^^
              source.luau keyword.other.unit.luau
>  			end)
 ^^^^^
 source.luau
      ^^^
      source.luau keyword.control.luau
         ^
         source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  			table.insert(promisesToCancel, ourPromise)
 ^^^^^
 source.luau
      ^^^^^^^^^^^^
      source.luau support.function.luau
                  ^
                  source.luau punctuation.arguments.begin.luau
                   ^^^^^^^^^^^^^^^^
                   source.luau variable.other.readwrite.luau
                                   ^
                                   source.luau punctuation.separator.arguments.luau
                                    ^
                                    source.luau
                                     ^^^^^^^^^^
                                     source.luau variable.other.readwrite.luau
                                               ^
                                               source.luau punctuation.arguments.end.luau
>  			preprocessedList[index] = ourPromise
 ^^^^^
 source.luau
      ^^^^^^^^^^^^^^^^
      source.luau variable.other.readwrite.luau
                      ^
                      source.luau
                       ^^^^^
                       source.luau variable.other.readwrite.luau
                            ^^
                            source.luau
                              ^
                              source.luau keyword.operator.assignment.luau
                               ^
                               source.luau
                                ^^^^^^^^^^
                                source.luau variable.other.readwrite.luau
>  		else
 ^^^^
 source.luau
     ^^^^
     source.luau keyword.control.luau
>  			preprocessedList[index] = value
 ^^^^^
 source.luau
      ^^^^^^^^^^^^^^^^
      source.luau variable.other.readwrite.luau
                      ^
                      source.luau
                       ^^^^^
                       source.luau variable.other.readwrite.luau
                            ^^
                            source.luau
                              ^
                              source.luau keyword.operator.assignment.luau
                               ^
                               source.luau
                                ^^^^^
                                source.luau variable.other.readwrite.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	for index, value in ipairs(preprocessedList) do
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau
        ^^^^^
        source.luau variable.parameter.luau
             ^^
             source.luau
               ^^^^^
               source.luau variable.parameter.luau
                    ^
                    source.luau
                     ^^
                     source.luau keyword.control.luau
                       ^
                       source.luau
                        ^^^^^^
                        source.luau support.function.luau
                              ^
                              source.luau punctuation.arguments.begin.luau
                               ^^^^^^^^^^^^^^^^
                               source.luau variable.other.readwrite.luau
                                               ^
                                               source.luau punctuation.arguments.end.luau
                                                ^
                                                source.luau
                                                 ^^
                                                 source.luau keyword.control.luau
>  		if Promise.is(value) then
 ^^^^
 source.luau
     ^^
     source.luau keyword.control.luau
       ^
       source.luau
        ^^^^^^^
        source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^^
                source.luau entity.name.function.luau
                  ^
                  source.luau punctuation.arguments.begin.luau
                   ^^^^^
                   source.luau variable.other.readwrite.luau
                        ^
                        source.luau punctuation.arguments.end.luau
                         ^
                         source.luau
                          ^^^^
                          source.luau keyword.control.luau
>  			local success
 ^^^^^
 source.luau
      ^^^^^
      source.luau storage.modifier.local.luau
           ^
           source.luau
            ^^^^^^^
            source.luau variable.other.readwrite.luau
>  			success, value = value:await()
 ^^^^^
 source.luau
      ^^^^^^^
      source.luau variable.other.readwrite.luau
             ^
             source.luau punctuation.separator.arguments.luau
              ^
              source.luau
               ^^^^^
               source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^
                     source.luau keyword.operator.assignment.luau
                      ^
                      source.luau
                       ^^^^^
                       source.luau variable.other.readwrite.luau
                            ^
                            source.luau
                             ^^^^^
                             source.luau entity.name.function.luau
                                  ^
                                  source.luau punctuation.arguments.begin.luau
                                   ^
                                   source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  			if not success then
 ^^^^^
 source.luau
      ^^
      source.luau keyword.control.luau
        ^
        source.luau
         ^^^
         source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
            ^
            source.luau
             ^^^^^^^
             source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^^^^
                     source.luau keyword.control.luau
>  				cancel()
 ^^^^^^
 source.luau
       ^^^^^^
       source.luau entity.name.function.luau
             ^
             source.luau punctuation.arguments.begin.luau
              ^
              source.luau punctuation.arguments.end.luau
>  				return reject(value)
 ^^^^^^
 source.luau
       ^^^^^^
       source.luau keyword.control.luau
             ^
             source.luau
              ^^^^^^
              source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^^^^^
                     source.luau variable.other.readwrite.luau
                          ^
                          source.luau punctuation.arguments.end.luau
>  			end
 ^^^^^
 source.luau
      ^^^
      source.luau keyword.control.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>
 ^
 source.luau
>  		if cancelled then
 ^^^^
 source.luau
     ^^
     source.luau keyword.control.luau
       ^
       source.luau
        ^^^^^^^^^
        source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau keyword.control.luau
>  			return
 ^^^^^
 source.luau
      ^^^^^^
      source.luau keyword.control.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>
 ^
 source.luau
>  		local predicatePromise = Promise.resolve(predicate(value, index))
 ^^^^
 source.luau
     ^^^^^
     source.luau storage.modifier.local.luau
          ^
          source.luau
           ^^^^^^^^^^^^^^^^
           source.luau variable.other.readwrite.luau
                           ^
                           source.luau
                            ^
                            source.luau keyword.operator.assignment.luau
                             ^
                             source.luau
                              ^^^^^^^
                              source.luau variable.other.readwrite.luau
                                     ^
                                     source.luau
                                      ^^^^^^^
                                      source.luau entity.name.function.luau
                                             ^
                                             source.luau punctuation.arguments.begin.luau
                                              ^^^^^^^^^
                                              source.luau entity.name.function.luau
                                                       ^
                                                       source.luau punctuation.arguments.begin.luau
                                                        ^^^^^
                                                        source.luau variable.other.readwrite.luau
                                                             ^
                                                             source.luau punctuation.separator.arguments.luau
                                                              ^
                                                              source.luau
                                                               ^^^^^
                                                               source.luau variable.other.readwrite.luau
                                                                    ^
                                                                    source.luau punctuation.arguments.end.luau
                                                                     ^
                                                                     source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  		table.insert(promisesToCancel, predicatePromise)
 ^^^^
 source.luau
     ^^^^^^^^^^^^
     source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^^^^^^^^^^^^^
                  source.luau variable.other.readwrite.luau
                                  ^
                                  source.luau punctuation.separator.arguments.luau
                                   ^
                                   source.luau
                                    ^^^^^^^^^^^^^^^^
                                    source.luau variable.other.readwrite.luau
                                                    ^
                                                    source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  		local success, result = predicatePromise:await()
 ^^^^
 source.luau
     ^^^^^
     source.luau storage.modifier.local.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.readwrite.luau
                  ^^
                  source.luau
                    ^^^^^^
                    source.luau variable.other.readwrite.luau
                          ^
                          source.luau
                           ^
                           source.luau keyword.operator.assignment.luau
                            ^
                            source.luau
                             ^^^^^^^^^^^^^^^^
                             source.luau variable.other.readwrite.luau
                                             ^
                                             source.luau
                                              ^^^^^
                                              source.luau entity.name.function.luau
                                                   ^
                                                   source.luau punctuation.arguments.begin.luau
                                                    ^
                                                    source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  		if not success then
 ^^^^
 source.luau
     ^^
     source.luau keyword.control.luau
       ^
       source.luau
        ^^^
        source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
           ^
           source.luau
            ^^^^^^^
            source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^^^^
                    source.luau keyword.control.luau
>  			cancel()
 ^^^^^
 source.luau
      ^^^^^^
      source.luau entity.name.function.luau
            ^
            source.luau punctuation.arguments.begin.luau
             ^
             source.luau punctuation.arguments.end.luau
>  			return reject(result)
 ^^^^^
 source.luau
      ^^^^^^
      source.luau keyword.control.luau
            ^
            source.luau
             ^^^^^^
             source.luau entity.name.function.luau
                   ^
                   source.luau punctuation.arguments.begin.luau
                    ^^^^^^
                    source.luau variable.other.readwrite.luau
                          ^
                          source.luau punctuation.arguments.end.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>
 ^
 source.luau
>  		results[index] = result
 ^^^^
 source.luau
     ^^^^^^^
     source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^^^^^
             source.luau variable.other.readwrite.luau
                  ^^
                  source.luau
                    ^
                    source.luau keyword.operator.assignment.luau
                     ^
                     source.luau
                      ^^^^^^
                      source.luau variable.other.readwrite.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	resolve(results)
 ^^^
 source.luau
    ^^^^^^^
    source.luau entity.name.function.luau
           ^
           source.luau punctuation.arguments.begin.luau
            ^^^^^^^
            source.luau variable.other.readwrite.luau
                   ^
                   source.luau punctuation.arguments.end.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Is the given object a Promise instance?
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.is(object)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^
                  source.luau meta.function.luau entity.name.function.luau
                    ^
                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                     ^^^^^^
                     source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                           ^
                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  if type(object) ~= "table" then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^
      source.luau support.function.luau
          ^
          source.luau punctuation.arguments.begin.luau
           ^^^^^^
           source.luau variable.other.readwrite.luau
                 ^
                 source.luau punctuation.arguments.end.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.operator.comparison.luau
                     ^
                     source.luau
                      ^
                      source.luau string.quoted.double.luau
                       ^^^^^
                       source.luau string.quoted.double.luau
                            ^
                            source.luau string.quoted.double.luau
                             ^
                             source.luau
                              ^^^^
                              source.luau keyword.control.luau
>  	return false
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^
           source.luau constant.language.boolean.false.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  local objectMetatable = getmetatable(object)
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^^^^^^^^^^
         source.luau variable.other.readwrite.luau
                        ^
                        source.luau
                         ^
                         source.luau keyword.operator.assignment.luau
                          ^
                          source.luau
                           ^^^^^^^^^^^^
                           source.luau support.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^^^^^^
                                        source.luau variable.other.readwrite.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  if objectMetatable == Promise then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^^^^^^^^^^^^
      source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^^
                      source.luau keyword.operator.comparison.luau
                        ^
                        source.luau
                         ^^^^^^^
                         source.luau variable.other.readwrite.luau
                                ^
                                source.luau
                                 ^^^^
                                 source.luau keyword.control.luau
>  	-- The Promise came from this library.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	return true
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^
           source.luau constant.language.boolean.true.luau
>  elseif objectMetatable == nil then
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                         ^
                         source.luau
                          ^^
                          source.luau keyword.operator.comparison.luau
                            ^
                            source.luau
                             ^^^
                             source.luau constant.language.nil.luau
                                ^
                                source.luau
                                 ^^^^
                                 source.luau keyword.control.luau
>  	-- No metatable, but we should still chain onto tables with andThen methods
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	return type(object.andThen) == "function"
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^
           source.luau support.function.luau
               ^
               source.luau punctuation.arguments.begin.luau
                ^^^^^^
                source.luau variable.other.readwrite.luau
                      ^
                      source.luau
                       ^^^^^^^
                       source.luau variable.other.property.luau
                              ^
                              source.luau punctuation.arguments.end.luau
                               ^
                               source.luau
                                ^^
                                source.luau keyword.operator.comparison.luau
                                  ^
                                  source.luau
                                   ^
                                   source.luau string.quoted.double.luau
                                    ^^^^^^^^
                                    source.luau string.quoted.double.luau
                                            ^
                                            source.luau string.quoted.double.luau
>  elseif
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
>  	type(objectMetatable) == "table"
 ^^^
 source.luau
    ^^^^
    source.luau support.function.luau
        ^
        source.luau punctuation.arguments.begin.luau
         ^^^^^^^^^^^^^^^
         source.luau variable.other.readwrite.luau
                        ^
                        source.luau punctuation.arguments.end.luau
                         ^
                         source.luau
                          ^^
                          source.luau keyword.operator.comparison.luau
                            ^
                            source.luau
                             ^
                             source.luau string.quoted.double.luau
                              ^^^^^
                              source.luau string.quoted.double.luau
                                   ^
                                   source.luau string.quoted.double.luau
>  	and type(rawget(objectMetatable, "__index")) == "table"
 ^^^
 source.luau
    ^^^
    source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
       ^
       source.luau
        ^^^^
        source.luau support.function.luau
            ^
            source.luau punctuation.arguments.begin.luau
             ^^^^^^
             source.luau entity.name.function.luau
                   ^
                   source.luau punctuation.arguments.begin.luau
                    ^^^^^^^^^^^^^^^
                    source.luau variable.other.readwrite.luau
                                   ^
                                   source.luau punctuation.separator.arguments.luau
                                    ^
                                    source.luau
                                     ^
                                     source.luau string.quoted.double.luau
                                      ^^^^^^^
                                      source.luau string.quoted.double.luau
                                             ^
                                             source.luau string.quoted.double.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
                                               ^
                                               source.luau punctuation.arguments.end.luau
                                                ^
                                                source.luau
                                                 ^^
                                                 source.luau keyword.operator.comparison.luau
                                                   ^
                                                   source.luau
                                                    ^
                                                    source.luau string.quoted.double.luau
                                                     ^^^^^
                                                     source.luau string.quoted.double.luau
                                                          ^
                                                          source.luau string.quoted.double.luau
>  	and type(rawget(rawget(objectMetatable, "__index"), "andThen")) == "function"
 ^^^
 source.luau
    ^^^
    source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
       ^
       source.luau
        ^^^^
        source.luau support.function.luau
            ^
            source.luau punctuation.arguments.begin.luau
             ^^^^^^
             source.luau entity.name.function.luau
                   ^
                   source.luau punctuation.arguments.begin.luau
                    ^^^^^^
                    source.luau entity.name.function.luau
                          ^
                          source.luau punctuation.arguments.begin.luau
                           ^^^^^^^^^^^^^^^
                           source.luau variable.other.readwrite.luau
                                          ^
                                          source.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau
                                            ^
                                            source.luau string.quoted.double.luau
                                             ^^^^^^^
                                             source.luau string.quoted.double.luau
                                                    ^
                                                    source.luau string.quoted.double.luau
                                                     ^
                                                     source.luau punctuation.arguments.end.luau
                                                      ^
                                                      source.luau punctuation.separator.arguments.luau
                                                       ^
                                                       source.luau
                                                        ^
                                                        source.luau string.quoted.double.luau
                                                         ^^^^^^^
                                                         source.luau string.quoted.double.luau
                                                                ^
                                                                source.luau string.quoted.double.luau
                                                                 ^
                                                                 source.luau punctuation.arguments.end.luau
                                                                  ^
                                                                  source.luau punctuation.arguments.end.luau
                                                                   ^
                                                                   source.luau
                                                                    ^^
                                                                    source.luau keyword.operator.comparison.luau
                                                                      ^
                                                                      source.luau
                                                                       ^
                                                                       source.luau string.quoted.double.luau
                                                                        ^^^^^^^^
                                                                        source.luau string.quoted.double.luau
                                                                                ^
                                                                                source.luau string.quoted.double.luau
>  then
 ^^
 source.luau
   ^^^^
   source.luau keyword.control.luau
>  	-- Maybe this came from a different or older Promise library.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	return true
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^
           source.luau constant.language.boolean.true.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  return false
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^
          source.luau constant.language.boolean.false.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Converts a yielding function into a Promise-returning one.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.promisify(callback)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                            ^^^^^^^^
                            source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                    ^
                                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  return function(...)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^^
          source.luau meta.function.luau keyword.control.luau
                  ^
                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                   ^^^
                   source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                      ^
                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	return Promise._try(debug.traceback(nil, 2), callback, ...)
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^^^
                   source.luau entity.name.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^^^^
                        source.luau support.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^^^
                                        source.luau constant.language.nil.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^
                                             source.luau constant.numeric.decimal.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
                                               ^
                                               source.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau
                                                 ^^^^^^^^
                                                 source.luau variable.other.readwrite.luau
                                                         ^
                                                         source.luau punctuation.separator.arguments.luau
                                                          ^
                                                          source.luau
                                                           ^^^
                                                           source.luau keyword.other.unit.luau
                                                              ^
                                                              source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Creates a Promise that resolves after given number of seconds.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>do
 ^^
 source.luau keyword.control.luau
>  -- uses a sorted doubly linked list (queue) to achieve O(1) remove operations and O(n) for insert
 ^^
 source.luau
   ^^
   source.luau comment.line.double-dash.luau
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     source.luau comment.line.double-dash.luau
>
 ^
 source.luau
>  -- the initial node in the linked list
 ^^
 source.luau
   ^^
   source.luau comment.line.double-dash.luau
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     source.luau comment.line.double-dash.luau
>  local first
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^
         source.luau variable.other.readwrite.luau
>  local connection
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^^^^^
         source.luau variable.other.readwrite.luau
>
 ^
 source.luau
>  function Promise.delay(seconds)
 ^^
 source.luau
   ^^^^^^^^
   source.luau meta.function.luau keyword.control.luau
           ^
           source.luau meta.function.luau
            ^^^^^^^
            source.luau meta.function.luau entity.name.function.luau
                   ^
                   source.luau meta.function.luau
                    ^^^^^
                    source.luau meta.function.luau entity.name.function.luau
                         ^
                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                          ^^^^^^^
                          source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                 ^
                                 source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	assert(type(seconds) == "number", "Bad argument #1 to Promise.delay, must be a number.")
 ^^^
 source.luau
    ^^^^^^
    source.luau support.function.luau
          ^
          source.luau punctuation.arguments.begin.luau
           ^^^^
           source.luau support.function.luau
               ^
               source.luau punctuation.arguments.begin.luau
                ^^^^^^^
                source.luau variable.other.readwrite.luau
                       ^
                       source.luau punctuation.arguments.end.luau
                        ^
                        source.luau
                         ^^
                         source.luau keyword.operator.comparison.luau
                           ^
                           source.luau
                            ^
                            source.luau string.quoted.double.luau
                             ^^^^^^
                             source.luau string.quoted.double.luau
                                   ^
                                   source.luau string.quoted.double.luau
                                    ^
                                    source.luau punctuation.separator.arguments.luau
                                     ^
                                     source.luau
                                      ^
                                      source.luau string.quoted.double.luau
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                       source.luau string.quoted.double.luau
                                                                                          ^
                                                                                          source.luau string.quoted.double.luau
                                                                                           ^
                                                                                           source.luau punctuation.arguments.end.luau
>  	-- If seconds is -INF, INF, NaN, or less than 1 / 60, assume seconds is 1 / 60.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- This mirrors the behavior of wait()
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	if not (seconds >= 1 / 60) or seconds == math.huge then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^
       source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
          ^
          source.luau
           ^
           source.luau punctuation.arguments.begin.luau
            ^^^^^^^
            source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^^
                    source.luau keyword.operator.comparison.luau
                      ^
                      source.luau
                       ^
                       source.luau constant.numeric.decimal.luau
                        ^
                        source.luau
                         ^
                         source.luau keyword.operator.arithmetic.luau
                          ^
                          source.luau
                           ^^
                           source.luau constant.numeric.decimal.luau
                             ^
                             source.luau punctuation.arguments.end.luau
                              ^
                              source.luau
                               ^^
                               source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                                 ^
                                 source.luau
                                  ^^^^^^^
                                  source.luau variable.other.readwrite.luau
                                         ^
                                         source.luau
                                          ^^
                                          source.luau keyword.operator.comparison.luau
                                            ^
                                            source.luau
                                             ^^^^^^^^^
                                             source.luau support.constant.luau
                                                      ^
                                                      source.luau
                                                       ^^^^
                                                       source.luau keyword.control.luau
>  		seconds = 1 / 60
 ^^^^
 source.luau
     ^^^^^^^
     source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^
             source.luau keyword.operator.assignment.luau
              ^
              source.luau
               ^
               source.luau constant.numeric.decimal.luau
                ^
                source.luau
                 ^
                 source.luau keyword.operator.arithmetic.luau
                  ^
                  source.luau
                   ^^
                   source.luau constant.numeric.decimal.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^^^
                   source.luau entity.name.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^^^^
                        source.luau support.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^^^
                                        source.luau constant.language.nil.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^
                                             source.luau constant.numeric.decimal.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
                                               ^
                                               source.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau
                                                 ^^^^^^^^
                                                 source.luau meta.function.luau keyword.control.luau
                                                         ^
                                                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                          ^^^^^^^
                                                          source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                 ^
                                                                 source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                                  ^
                                                                  source.luau meta.function.luau meta.parameter.luau
                                                                   ^
                                                                   source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                    ^
                                                                    source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                                     ^
                                                                     source.luau meta.function.luau meta.parameter.luau
                                                                      ^^^^^^^^
                                                                      source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                              ^
                                                                              source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		local startTime = Promise._getTime()
 ^^^^
 source.luau
     ^^^^^
     source.luau storage.modifier.local.luau
          ^
          source.luau
           ^^^^^^^^^
           source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^
                     source.luau keyword.operator.assignment.luau
                      ^
                      source.luau
                       ^^^^^^^
                       source.luau variable.other.readwrite.luau
                              ^
                              source.luau
                               ^^^^^^^^
                               source.luau entity.name.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^
                                        source.luau punctuation.arguments.end.luau
>  		local endTime = startTime + seconds
 ^^^^
 source.luau
     ^^^^^
     source.luau storage.modifier.local.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^
                   source.luau keyword.operator.assignment.luau
                    ^
                    source.luau
                     ^^^^^^^^^
                     source.luau variable.other.readwrite.luau
                              ^
                              source.luau
                               ^
                               source.luau keyword.operator.arithmetic.luau
                                ^
                                source.luau
                                 ^^^^^^^
                                 source.luau variable.other.readwrite.luau
>
 ^
 source.luau
>  		local node = {
 ^^^^
 source.luau
     ^^^^^
     source.luau storage.modifier.local.luau
          ^
          source.luau
           ^^^^
           source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^
                source.luau keyword.operator.assignment.luau
                 ^
                 source.luau
                  ^
                  source.luau punctuation.table.begin.luau
>  			resolve = resolve,
 ^^^^^
 source.luau
      ^^^^^^^
      source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^
              source.luau keyword.operator.assignment.luau
               ^
               source.luau
                ^^^^^^^
                source.luau variable.other.readwrite.luau
                       ^
                       source.luau punctuation.separator.fields.luau
>  			startTime = startTime,
 ^^^^^
 source.luau
      ^^^^^^^^^
      source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^
                source.luau keyword.operator.assignment.luau
                 ^
                 source.luau
                  ^^^^^^^^^
                  source.luau variable.other.readwrite.luau
                           ^
                           source.luau punctuation.separator.fields.luau
>  			endTime = endTime,
 ^^^^^
 source.luau
      ^^^^^^^
      source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^
              source.luau keyword.operator.assignment.luau
               ^
               source.luau
                ^^^^^^^
                source.luau variable.other.readwrite.luau
                       ^
                       source.luau punctuation.separator.fields.luau
>  		}
 ^^^^
 source.luau
     ^
     source.luau punctuation.table.end.luau
>
 ^
 source.luau
>  		if connection == nil then -- first is nil when connection is nil
 ^^^^
 source.luau
     ^^
     source.luau keyword.control.luau
       ^
       source.luau
        ^^^^^^^^^^
        source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.operator.comparison.luau
                     ^
                     source.luau
                      ^^^
                      source.luau constant.language.nil.luau
                         ^
                         source.luau
                          ^^^^
                          source.luau keyword.control.luau
                              ^
                              source.luau
                               ^^
                               source.luau comment.line.double-dash.luau
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                 source.luau comment.line.double-dash.luau
>  			first = node
 ^^^^^
 source.luau
      ^^^^^
      source.luau variable.other.readwrite.luau
           ^
           source.luau
            ^
            source.luau keyword.operator.assignment.luau
             ^
             source.luau
              ^^^^
              source.luau variable.other.readwrite.luau
>  			connection = Promise._timeEvent:Connect(function()
 ^^^^^
 source.luau
      ^^^^^^^^^^
      source.luau variable.other.readwrite.luau
                ^
                source.luau
                 ^
                 source.luau keyword.operator.assignment.luau
                  ^
                  source.luau
                   ^^^^^^^
                   source.luau variable.other.readwrite.luau
                          ^
                          source.luau
                           ^^^^^^^^^^
                           source.luau variable.other.property.luau
                                     ^
                                     source.luau
                                      ^^^^^^^
                                      source.luau entity.name.function.luau
                                             ^
                                             source.luau punctuation.arguments.begin.luau
                                              ^^^^^^^^
                                              source.luau meta.function.luau keyword.control.luau
                                                      ^
                                                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                       ^
                                                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  				local threadStart = Promise._getTime()
 ^^^^^^
 source.luau
       ^^^^^
       source.luau storage.modifier.local.luau
            ^
            source.luau
             ^^^^^^^^^^^
             source.luau variable.other.readwrite.luau
                        ^
                        source.luau
                         ^
                         source.luau keyword.operator.assignment.luau
                          ^
                          source.luau
                           ^^^^^^^
                           source.luau variable.other.readwrite.luau
                                  ^
                                  source.luau
                                   ^^^^^^^^
                                   source.luau entity.name.function.luau
                                           ^
                                           source.luau punctuation.arguments.begin.luau
                                            ^
                                            source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  				while first ~= nil and first.endTime < threadStart do
 ^^^^^^
 source.luau
       ^^^^^
       source.luau keyword.control.luau
            ^
            source.luau
             ^^^^^
             source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.operator.comparison.luau
                     ^
                     source.luau
                      ^^^
                      source.luau constant.language.nil.luau
                         ^
                         source.luau
                          ^^^
                          source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                             ^
                             source.luau
                              ^^^^^
                              source.luau variable.other.readwrite.luau
                                   ^
                                   source.luau
                                    ^^^^^^^
                                    source.luau variable.other.property.luau
                                           ^
                                           source.luau
                                            ^
                                            source.luau keyword.operator.comparison.luau
                                             ^
                                             source.luau
                                              ^^^^^^^^^^^
                                              source.luau variable.other.readwrite.luau
                                                         ^
                                                         source.luau
                                                          ^^
                                                          source.luau keyword.control.luau
>  					local current = first
 ^^^^^^^
 source.luau
        ^^^^^
        source.luau storage.modifier.local.luau
             ^
             source.luau
              ^^^^^^^
              source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^
                      source.luau keyword.operator.assignment.luau
                       ^
                       source.luau
                        ^^^^^
                        source.luau variable.other.readwrite.luau
>  					first = current.next
 ^^^^^^^
 source.luau
        ^^^^^
        source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^
              source.luau keyword.operator.assignment.luau
               ^
               source.luau
                ^^^^^^^
                source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^^^^
                        source.luau variable.other.property.luau
>
 ^
 source.luau
>  					if first == nil then
 ^^^^^^^
 source.luau
        ^^
        source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^
           source.luau variable.other.readwrite.luau
                ^
                source.luau
                 ^^
                 source.luau keyword.operator.comparison.luau
                   ^
                   source.luau
                    ^^^
                    source.luau constant.language.nil.luau
                       ^
                       source.luau
                        ^^^^
                        source.luau keyword.control.luau
>  						connection:Disconnect()
 ^^^^^^^^
 source.luau
         ^^^^^^^^^^
         source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^^^^^^^^^^
                    source.luau entity.name.function.luau
                              ^
                              source.luau punctuation.arguments.begin.luau
                               ^
                               source.luau punctuation.arguments.end.luau
>  						connection = nil
 ^^^^^^^^
 source.luau
         ^^^^^^^^^^
         source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^
                    source.luau keyword.operator.assignment.luau
                     ^
                     source.luau
                      ^^^
                      source.luau constant.language.nil.luau
>  					else
 ^^^^^^^
 source.luau
        ^^^^
        source.luau keyword.control.luau
>  						first.previous = nil
 ^^^^^^^^
 source.luau
         ^^^^^
         source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^^^^^^^^
               source.luau variable.other.property.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^^^
                          source.luau constant.language.nil.luau
>  					end
 ^^^^^^^
 source.luau
        ^^^
        source.luau keyword.control.luau
>
 ^
 source.luau
>  					current.resolve(Promise._getTime() - current.startTime)
 ^^^^^^^
 source.luau
        ^^^^^^^
        source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^^^^^^^
                source.luau entity.name.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^
                        source.luau variable.other.readwrite.luau
                               ^
                               source.luau
                                ^^^^^^^^
                                source.luau entity.name.function.luau
                                        ^
                                        source.luau punctuation.arguments.begin.luau
                                         ^
                                         source.luau punctuation.arguments.end.luau
                                          ^
                                          source.luau
                                           ^
                                           source.luau keyword.operator.arithmetic.luau
                                            ^
                                            source.luau
                                             ^^^^^^^
                                             source.luau variable.other.readwrite.luau
                                                    ^
                                                    source.luau
                                                     ^^^^^^^^^
                                                     source.luau variable.other.property.luau
                                                              ^
                                                              source.luau punctuation.arguments.end.luau
>  				end
 ^^^^^^
 source.luau
       ^^^
       source.luau keyword.control.luau
>  			end)
 ^^^^^
 source.luau
      ^^^
      source.luau keyword.control.luau
         ^
         source.luau punctuation.arguments.end.luau
>  		else -- first is non-nil
 ^^^^
 source.luau
     ^^^^
     source.luau keyword.control.luau
         ^
         source.luau
          ^^
          source.luau comment.line.double-dash.luau
            ^^^^^^^^^^^^^^^^^
            source.luau comment.line.double-dash.luau
>  			if first.endTime < endTime then -- if `node` should be placed after `first`
 ^^^^^
 source.luau
      ^^
      source.luau keyword.control.luau
        ^
        source.luau
         ^^^^^
         source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^^^^^^^
               source.luau variable.other.property.luau
                      ^
                      source.luau
                       ^
                       source.luau keyword.operator.comparison.luau
                        ^
                        source.luau
                         ^^^^^^^
                         source.luau variable.other.readwrite.luau
                                ^
                                source.luau
                                 ^^^^
                                 source.luau keyword.control.luau
                                     ^
                                     source.luau
                                      ^^
                                      source.luau comment.line.double-dash.luau
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                        source.luau comment.line.double-dash.luau
>  				-- we will insert `node` between `current` and `next`
 ^^^^^^
 source.luau
       ^^
       source.luau comment.line.double-dash.luau
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         source.luau comment.line.double-dash.luau
>  				-- (i.e. after `current` if `next` is nil)
 ^^^^^^
 source.luau
       ^^
       source.luau comment.line.double-dash.luau
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         source.luau comment.line.double-dash.luau
>  				local current = first
 ^^^^^^
 source.luau
       ^^^^^
       source.luau storage.modifier.local.luau
            ^
            source.luau
             ^^^^^^^
             source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^
                     source.luau keyword.operator.assignment.luau
                      ^
                      source.luau
                       ^^^^^
                       source.luau variable.other.readwrite.luau
>  				local next = current.next
 ^^^^^^
 source.luau
       ^^^^^
       source.luau storage.modifier.local.luau
            ^
            source.luau
             ^^^^
             source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^
                  source.luau keyword.operator.assignment.luau
                   ^
                   source.luau
                    ^^^^^^^
                    source.luau variable.other.readwrite.luau
                           ^
                           source.luau
                            ^^^^
                            source.luau variable.other.property.luau
>
 ^
 source.luau
>  				while next ~= nil and next.endTime < endTime do
 ^^^^^^
 source.luau
       ^^^^^
       source.luau keyword.control.luau
            ^
            source.luau
             ^^^^
             source.luau support.function.luau
                 ^
                 source.luau
                  ^^
                  source.luau keyword.operator.comparison.luau
                    ^
                    source.luau
                     ^^^
                     source.luau constant.language.nil.luau
                        ^
                        source.luau
                         ^^^
                         source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                            ^
                            source.luau
                             ^^^^
                             source.luau support.function.luau
                                 ^
                                 source.luau
                                  ^^^^^^^
                                  source.luau variable.other.property.luau
                                         ^
                                         source.luau
                                          ^
                                          source.luau keyword.operator.comparison.luau
                                           ^
                                           source.luau
                                            ^^^^^^^
                                            source.luau variable.other.readwrite.luau
                                                   ^
                                                   source.luau
                                                    ^^
                                                    source.luau keyword.control.luau
>  					current = next
 ^^^^^^^
 source.luau
        ^^^^^^^
        source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^
                source.luau keyword.operator.assignment.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau support.function.luau
>  					next = current.next
 ^^^^^^^
 source.luau
        ^^^^
        source.luau support.function.luau
            ^
            source.luau
             ^
             source.luau keyword.operator.assignment.luau
              ^
              source.luau
               ^^^^^^^
               source.luau variable.other.readwrite.luau
                      ^
                      source.luau
                       ^^^^
                       source.luau variable.other.property.luau
>  				end
 ^^^^^^
 source.luau
       ^^^
       source.luau keyword.control.luau
>
 ^
 source.luau
>  				-- `current` must be non-nil, but `next` could be `nil` (i.e. last item in list)
 ^^^^^^
 source.luau
       ^^
       source.luau comment.line.double-dash.luau
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         source.luau comment.line.double-dash.luau
>  				current.next = node
 ^^^^^^
 source.luau
       ^^^^^^^
       source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^^^^
               source.luau variable.other.property.luau
                   ^
                   source.luau
                    ^
                    source.luau keyword.operator.assignment.luau
                     ^
                     source.luau
                      ^^^^
                      source.luau variable.other.readwrite.luau
>  				node.previous = current
 ^^^^^^
 source.luau
       ^^^^
       source.luau variable.other.readwrite.luau
           ^
           source.luau
            ^^^^^^^^
            source.luau variable.other.property.luau
                    ^
                    source.luau
                     ^
                     source.luau keyword.operator.assignment.luau
                      ^
                      source.luau
                       ^^^^^^^
                       source.luau variable.other.readwrite.luau
>
 ^
 source.luau
>  				if next ~= nil then
 ^^^^^^
 source.luau
       ^^
       source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau
               ^^
               source.luau keyword.operator.comparison.luau
                 ^
                 source.luau
                  ^^^
                  source.luau constant.language.nil.luau
                     ^
                     source.luau
                      ^^^^
                      source.luau keyword.control.luau
>  					node.next = next
 ^^^^^^^
 source.luau
        ^^^^
        source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^^^^
             source.luau variable.other.property.luau
                 ^
                 source.luau
                  ^
                  source.luau keyword.operator.assignment.luau
                   ^
                   source.luau
                    ^^^^
                    source.luau support.function.luau
>  					next.previous = node
 ^^^^^^^
 source.luau
        ^^^^
        source.luau support.function.luau
            ^
            source.luau
             ^^^^^^^^
             source.luau variable.other.property.luau
                     ^
                     source.luau
                      ^
                      source.luau keyword.operator.assignment.luau
                       ^
                       source.luau
                        ^^^^
                        source.luau variable.other.readwrite.luau
>  				end
 ^^^^^^
 source.luau
       ^^^
       source.luau keyword.control.luau
>  			else
 ^^^^^
 source.luau
      ^^^^
      source.luau keyword.control.luau
>  				-- set `node` to `first`
 ^^^^^^
 source.luau
       ^^
       source.luau comment.line.double-dash.luau
         ^^^^^^^^^^^^^^^^^^^^^^
         source.luau comment.line.double-dash.luau
>  				node.next = first
 ^^^^^^
 source.luau
       ^^^^
       source.luau variable.other.readwrite.luau
           ^
           source.luau
            ^^^^
            source.luau variable.other.property.luau
                ^
                source.luau
                 ^
                 source.luau keyword.operator.assignment.luau
                  ^
                  source.luau
                   ^^^^^
                   source.luau variable.other.readwrite.luau
>  				first.previous = node
 ^^^^^^
 source.luau
       ^^^^^
       source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^^^^^^^^
             source.luau variable.other.property.luau
                     ^
                     source.luau
                      ^
                      source.luau keyword.operator.assignment.luau
                       ^
                       source.luau
                        ^^^^
                        source.luau variable.other.readwrite.luau
>  				first = node
 ^^^^^^
 source.luau
       ^^^^^
       source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^
             source.luau keyword.operator.assignment.luau
              ^
              source.luau
               ^^^^
               source.luau variable.other.readwrite.luau
>  			end
 ^^^^^
 source.luau
      ^^^
      source.luau keyword.control.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>
 ^
 source.luau
>  		onCancel(function()
 ^^^^
 source.luau
     ^^^^^^^^
     source.luau entity.name.function.luau
             ^
             source.luau punctuation.arguments.begin.luau
              ^^^^^^^^
              source.luau meta.function.luau keyword.control.luau
                      ^
                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                       ^
                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  			-- remove node from queue
 ^^^^^
 source.luau
      ^^
      source.luau comment.line.double-dash.luau
        ^^^^^^^^^^^^^^^^^^^^^^^
        source.luau comment.line.double-dash.luau
>  			local next = node.next
 ^^^^^
 source.luau
      ^^^^^
      source.luau storage.modifier.local.luau
           ^
           source.luau
            ^^^^
            source.luau variable.other.readwrite.luau
                ^
                source.luau
                 ^
                 source.luau keyword.operator.assignment.luau
                  ^
                  source.luau
                   ^^^^
                   source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^^^^
                        source.luau variable.other.property.luau
>
 ^
 source.luau
>  			if first == node then
 ^^^^^
 source.luau
      ^^
      source.luau keyword.control.luau
        ^
        source.luau
         ^^^^^
         source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^^
               source.luau keyword.operator.comparison.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau variable.other.readwrite.luau
                      ^
                      source.luau
                       ^^^^
                       source.luau keyword.control.luau
>  				if next == nil then -- if `node` is the first and last
 ^^^^^^
 source.luau
       ^^
       source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau
               ^^
               source.luau keyword.operator.comparison.luau
                 ^
                 source.luau
                  ^^^
                  source.luau constant.language.nil.luau
                     ^
                     source.luau
                      ^^^^
                      source.luau keyword.control.luau
                          ^
                          source.luau
                           ^^
                           source.luau comment.line.double-dash.luau
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             source.luau comment.line.double-dash.luau
>  					connection:Disconnect()
 ^^^^^^^
 source.luau
        ^^^^^^^^^^
        source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^^^^^^^^^
                   source.luau entity.name.function.luau
                             ^
                             source.luau punctuation.arguments.begin.luau
                              ^
                              source.luau punctuation.arguments.end.luau
>  					connection = nil
 ^^^^^^^
 source.luau
        ^^^^^^^^^^
        source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^
                   source.luau keyword.operator.assignment.luau
                    ^
                    source.luau
                     ^^^
                     source.luau constant.language.nil.luau
>  				else -- if `node` is `first` and not the last
 ^^^^^^
 source.luau
       ^^^^
       source.luau keyword.control.luau
           ^
           source.luau
            ^^
            source.luau comment.line.double-dash.luau
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              source.luau comment.line.double-dash.luau
>  					next.previous = nil
 ^^^^^^^
 source.luau
        ^^^^
        source.luau support.function.luau
            ^
            source.luau
             ^^^^^^^^
             source.luau variable.other.property.luau
                     ^
                     source.luau
                      ^
                      source.luau keyword.operator.assignment.luau
                       ^
                       source.luau
                        ^^^
                        source.luau constant.language.nil.luau
>  				end
 ^^^^^^
 source.luau
       ^^^
       source.luau keyword.control.luau
>  				first = next
 ^^^^^^
 source.luau
       ^^^^^
       source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^
             source.luau keyword.operator.assignment.luau
              ^
              source.luau
               ^^^^
               source.luau support.function.luau
>  			else
 ^^^^^
 source.luau
      ^^^^
      source.luau keyword.control.luau
>  				local previous = node.previous
 ^^^^^^
 source.luau
       ^^^^^
       source.luau storage.modifier.local.luau
            ^
            source.luau
             ^^^^^^^^
             source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^
                      source.luau keyword.operator.assignment.luau
                       ^
                       source.luau
                        ^^^^
                        source.luau variable.other.readwrite.luau
                            ^
                            source.luau
                             ^^^^^^^^
                             source.luau variable.other.property.luau
>  				-- since `node` is not `first`, then we know `previous` is non-nil
 ^^^^^^
 source.luau
       ^^
       source.luau comment.line.double-dash.luau
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         source.luau comment.line.double-dash.luau
>  				previous.next = next
 ^^^^^^
 source.luau
       ^^^^^^^^
       source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^^^^
                source.luau variable.other.property.luau
                    ^
                    source.luau
                     ^
                     source.luau keyword.operator.assignment.luau
                      ^
                      source.luau
                       ^^^^
                       source.luau support.function.luau
>
 ^
 source.luau
>  				if next ~= nil then
 ^^^^^^
 source.luau
       ^^
       source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau
               ^^
               source.luau keyword.operator.comparison.luau
                 ^
                 source.luau
                  ^^^
                  source.luau constant.language.nil.luau
                     ^
                     source.luau
                      ^^^^
                      source.luau keyword.control.luau
>  					next.previous = previous
 ^^^^^^^
 source.luau
        ^^^^
        source.luau support.function.luau
            ^
            source.luau
             ^^^^^^^^
             source.luau variable.other.property.luau
                     ^
                     source.luau
                      ^
                      source.luau keyword.operator.assignment.luau
                       ^
                       source.luau
                        ^^^^^^^^
                        source.luau variable.other.readwrite.luau
>  				end
 ^^^^^^
 source.luau
       ^^^
       source.luau keyword.control.luau
>  			end
 ^^^^^
 source.luau
      ^^^
      source.luau keyword.control.luau
>  		end)
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
        ^
        source.luau punctuation.arguments.end.luau
>  	end)
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Rejects the promise after `seconds` seconds.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:timeout(seconds, rejectionValue)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                   ^
                                   source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                    ^^^^^^^
                                    source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                           ^
                                           source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau meta.function.luau meta.parameter.luau
                                             ^^^^^^^^^^^^^^
                                             source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                           ^
                                                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  local traceback = debug.traceback(nil, 2)
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^^^^
         source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^
                   source.luau keyword.operator.assignment.luau
                    ^
                    source.luau
                     ^^^^^^^^^^^^^^^
                     source.luau support.function.luau
                                    ^
                                    source.luau punctuation.arguments.begin.luau
                                     ^^^
                                     source.luau constant.language.nil.luau
                                        ^
                                        source.luau punctuation.separator.arguments.luau
                                         ^
                                         source.luau
                                          ^
                                          source.luau constant.numeric.decimal.luau
                                           ^
                                           source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  return Promise.race({
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^
                       source.luau punctuation.table.begin.luau
>  	Promise.delay(seconds):andThen(function()
 ^^^
 source.luau
    ^^^^^^^
    source.luau variable.other.readwrite.luau
           ^
           source.luau
            ^^^^^
            source.luau entity.name.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^^^^
                  source.luau variable.other.readwrite.luau
                         ^
                         source.luau punctuation.arguments.end.luau
                          ^
                          source.luau
                           ^^^^^^^
                           source.luau entity.name.function.luau
                                  ^
                                  source.luau punctuation.arguments.begin.luau
                                   ^^^^^^^^
                                   source.luau meta.function.luau keyword.control.luau
                                           ^
                                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                            ^
                                            source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		return Promise.reject(rejectionValue == nil and Error.new({
 ^^^^
 source.luau
     ^^^^^^
     source.luau keyword.control.luau
           ^
           source.luau
            ^^^^^^^
            source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^^^^^^
                    source.luau entity.name.function.luau
                          ^
                          source.luau punctuation.arguments.begin.luau
                           ^^^^^^^^^^^^^^
                           source.luau variable.other.readwrite.luau
                                         ^
                                         source.luau
                                          ^^
                                          source.luau keyword.operator.comparison.luau
                                            ^
                                            source.luau
                                             ^^^
                                             source.luau constant.language.nil.luau
                                                ^
                                                source.luau
                                                 ^^^
                                                 source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                                                    ^
                                                    source.luau
                                                     ^^^^^
                                                     source.luau variable.other.readwrite.luau
                                                          ^
                                                          source.luau
                                                           ^^^
                                                           source.luau entity.name.function.luau
                                                              ^
                                                              source.luau punctuation.arguments.begin.luau
                                                               ^
                                                               source.luau punctuation.table.begin.luau
>  			kind = Error.Kind.TimedOut,
 ^^^^^
 source.luau
      ^^^^
      source.luau variable.other.readwrite.luau
          ^
          source.luau
           ^
           source.luau keyword.operator.assignment.luau
            ^
            source.luau
             ^^^^^
             source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^^^
                   source.luau variable.other.property.luau
                       ^
                       source.luau
                        ^^^^^^^^
                        source.luau variable.other.property.luau
                                ^
                                source.luau punctuation.separator.fields.luau
>  			error = "Timed out",
 ^^^^^
 source.luau
      ^^^^^
      source.luau support.function.luau
           ^
           source.luau
            ^
            source.luau keyword.operator.assignment.luau
             ^
             source.luau
              ^
              source.luau string.quoted.double.luau
               ^^^^^^^^^
               source.luau string.quoted.double.luau
                        ^
                        source.luau string.quoted.double.luau
                         ^
                         source.luau punctuation.separator.fields.luau
>  			context = string.format(
 ^^^^^
 source.luau
      ^^^^^^^
      source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^
              source.luau keyword.operator.assignment.luau
               ^
               source.luau
                ^^^^^^^^^^^^^
                source.luau support.function.luau
                             ^
                             source.luau punctuation.arguments.begin.luau
>  				"Timeout of %d seconds exceeded.\n:timeout() called at:\n\n%s",
 ^^^^^^
 source.luau
       ^
       source.luau string.quoted.double.luau
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        source.luau string.quoted.double.luau
                                       ^^
                                       source.luau string.quoted.double.luau constant.character.escape.luau
                                         ^^^^^^^^^^^^^^^^^^^^^
                                         source.luau string.quoted.double.luau
                                                              ^^
                                                              source.luau string.quoted.double.luau constant.character.escape.luau
                                                                ^^
                                                                source.luau string.quoted.double.luau constant.character.escape.luau
                                                                  ^^
                                                                  source.luau string.quoted.double.luau
                                                                    ^
                                                                    source.luau string.quoted.double.luau
                                                                     ^
                                                                     source.luau punctuation.separator.arguments.luau
>  				seconds,
 ^^^^^^
 source.luau
       ^^^^^^^
       source.luau variable.other.readwrite.luau
              ^
              source.luau punctuation.separator.arguments.luau
>  				traceback
 ^^^^^^
 source.luau
       ^^^^^^^^^
       source.luau variable.other.readwrite.luau
>  			),
 ^^^^^
 source.luau
      ^
      source.luau punctuation.arguments.end.luau
       ^
       source.luau punctuation.separator.fields.luau
>  		}) or rejectionValue)
 ^^^^
 source.luau
     ^
     source.luau punctuation.table.end.luau
      ^
      source.luau punctuation.arguments.end.luau
       ^
       source.luau
        ^^
        source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
          ^
          source.luau
           ^^^^^^^^^^^^^^
           source.luau variable.other.readwrite.luau
                         ^
                         source.luau punctuation.arguments.end.luau
>  	end),
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau punctuation.arguments.end.luau
        ^
        source.luau punctuation.separator.fields.luau
>  	self,
 ^^^
 source.luau
    ^^^^
    source.luau variable.language.self.luau
        ^
        source.luau punctuation.separator.fields.luau
>  })
 ^^
 source.luau
   ^
   source.luau punctuation.table.end.luau
    ^
    source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>function Promise.prototype:getStatus()
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                     ^
                                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                      ^
                                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  return self._status
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau variable.language.self.luau
              ^
              source.luau
               ^^^^^^^
               source.luau variable.other.property.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Creates a new promise that receives the result of this promise.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>
 ^
 source.luau comment.block.luau
>  The given callbacks are invoked depending on that result.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:_andThen(traceback, successHandler, failureHandler)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                    ^
                                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                     ^^^^^^^^^
                                     source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                              ^
                                              source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                               ^
                                               source.luau meta.function.luau meta.parameter.luau
                                                ^^^^^^^^^^^^^^
                                                source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                              ^
                                                              source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                               ^
                                                               source.luau meta.function.luau meta.parameter.luau
                                                                ^^^^^^^^^^^^^^
                                                                source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                              ^
                                                                              source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  self._unhandledRejection = false
 ^^
 source.luau
   ^^^^
   source.luau variable.language.self.luau
       ^
       source.luau
        ^^^^^^^^^^^^^^^^^^^
        source.luau variable.other.property.luau
                           ^
                           source.luau
                            ^
                            source.luau keyword.operator.assignment.luau
                             ^
                             source.luau
                              ^^^^^
                              source.luau constant.language.boolean.false.luau
>
 ^
 source.luau
>  -- Create a new promise to follow this part of the chain
 ^^
 source.luau
   ^^
   source.luau comment.line.double-dash.luau
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     source.luau comment.line.double-dash.luau
>  return Promise._new(traceback, function(resolve, reject)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^^^^^^
                       source.luau variable.other.readwrite.luau
                                ^
                                source.luau punctuation.separator.arguments.luau
                                 ^
                                 source.luau
                                  ^^^^^^^^
                                  source.luau meta.function.luau keyword.control.luau
                                          ^
                                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                           ^^^^^^^
                                           source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                  ^
                                                  source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                   ^
                                                   source.luau meta.function.luau meta.parameter.luau
                                                    ^^^^^^
                                                    source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                          ^
                                                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	-- Our default callbacks just pass values onto the next promise.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- This lets success and failure cascade correctly!
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>
 ^
 source.luau
>  	local successCallback = resolve
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                         ^
                         source.luau
                          ^
                          source.luau keyword.operator.assignment.luau
                           ^
                           source.luau
                            ^^^^^^^
                            source.luau variable.other.readwrite.luau
>  	if successHandler then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^^^^^^^^^^^
       source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^^^^
                      source.luau keyword.control.luau
>  		successCallback = createAdvancer(
 ^^^^
 source.luau
     ^^^^^^^^^^^^^^^
     source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^
                     source.luau keyword.operator.assignment.luau
                      ^
                      source.luau
                       ^^^^^^^^^^^^^^
                       source.luau entity.name.function.luau
                                     ^
                                     source.luau punctuation.arguments.begin.luau
>  			traceback,
 ^^^^^
 source.luau
      ^^^^^^^^^
      source.luau variable.other.readwrite.luau
               ^
               source.luau punctuation.separator.arguments.luau
>  			successHandler,
 ^^^^^
 source.luau
      ^^^^^^^^^^^^^^
      source.luau variable.other.readwrite.luau
                    ^
                    source.luau punctuation.separator.arguments.luau
>  			resolve,
 ^^^^^
 source.luau
      ^^^^^^^
      source.luau variable.other.readwrite.luau
             ^
             source.luau punctuation.separator.arguments.luau
>  			reject
 ^^^^^
 source.luau
      ^^^^^^
      source.luau variable.other.readwrite.luau
>  		)
 ^^^^
 source.luau
     ^
     source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	local failureCallback = reject
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                         ^
                         source.luau
                          ^
                          source.luau keyword.operator.assignment.luau
                           ^
                           source.luau
                            ^^^^^^
                            source.luau variable.other.readwrite.luau
>  	if failureHandler then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^^^^^^^^^^^
       source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^^^^
                      source.luau keyword.control.luau
>  		failureCallback = createAdvancer(
 ^^^^
 source.luau
     ^^^^^^^^^^^^^^^
     source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^
                     source.luau keyword.operator.assignment.luau
                      ^
                      source.luau
                       ^^^^^^^^^^^^^^
                       source.luau entity.name.function.luau
                                     ^
                                     source.luau punctuation.arguments.begin.luau
>  			traceback,
 ^^^^^
 source.luau
      ^^^^^^^^^
      source.luau variable.other.readwrite.luau
               ^
               source.luau punctuation.separator.arguments.luau
>  			failureHandler,
 ^^^^^
 source.luau
      ^^^^^^^^^^^^^^
      source.luau variable.other.readwrite.luau
                    ^
                    source.luau punctuation.separator.arguments.luau
>  			resolve,
 ^^^^^
 source.luau
      ^^^^^^^
      source.luau variable.other.readwrite.luau
             ^
             source.luau punctuation.separator.arguments.luau
>  			reject
 ^^^^^
 source.luau
      ^^^^^^
      source.luau variable.other.readwrite.luau
>  		)
 ^^^^
 source.luau
     ^
     source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	if self._status == Promise.Status.Started then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^
       source.luau variable.language.self.luau
           ^
           source.luau
            ^^^^^^^
            source.luau variable.other.property.luau
                   ^
                   source.luau
                    ^^
                    source.luau keyword.operator.comparison.luau
                      ^
                      source.luau
                       ^^^^^^^
                       source.luau variable.other.readwrite.luau
                              ^
                              source.luau
                               ^^^^^^
                               source.luau variable.other.property.luau
                                     ^
                                     source.luau
                                      ^^^^^^^
                                      source.luau variable.other.property.luau
                                             ^
                                             source.luau
                                              ^^^^
                                              source.luau keyword.control.luau
>  		-- If we haven't resolved yet, put ourselves into the queue
 ^^^^
 source.luau
     ^^
     source.luau comment.line.double-dash.luau
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       source.luau comment.line.double-dash.luau
>  		table.insert(self._queuedResolve, successCallback)
 ^^^^
 source.luau
     ^^^^^^^^^^^^
     source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^
                  source.luau variable.language.self.luau
                      ^
                      source.luau
                       ^^^^^^^^^^^^^^
                       source.luau variable.other.property.luau
                                     ^
                                     source.luau punctuation.separator.arguments.luau
                                      ^
                                      source.luau
                                       ^^^^^^^^^^^^^^^
                                       source.luau variable.other.readwrite.luau
                                                      ^
                                                      source.luau punctuation.arguments.end.luau
>  		table.insert(self._queuedReject, failureCallback)
 ^^^^
 source.luau
     ^^^^^^^^^^^^
     source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^
                  source.luau variable.language.self.luau
                      ^
                      source.luau
                       ^^^^^^^^^^^^^
                       source.luau variable.other.property.luau
                                    ^
                                    source.luau punctuation.separator.arguments.luau
                                     ^
                                     source.luau
                                      ^^^^^^^^^^^^^^^
                                      source.luau variable.other.readwrite.luau
                                                     ^
                                                     source.luau punctuation.arguments.end.luau
>  	elseif self._status == Promise.Status.Resolved then
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^
           source.luau variable.language.self.luau
               ^
               source.luau
                ^^^^^^^
                source.luau variable.other.property.luau
                       ^
                       source.luau
                        ^^
                        source.luau keyword.operator.comparison.luau
                          ^
                          source.luau
                           ^^^^^^^
                           source.luau variable.other.readwrite.luau
                                  ^
                                  source.luau
                                   ^^^^^^
                                   source.luau variable.other.property.luau
                                         ^
                                         source.luau
                                          ^^^^^^^^
                                          source.luau variable.other.property.luau
                                                  ^
                                                  source.luau
                                                   ^^^^
                                                   source.luau keyword.control.luau
>  		-- This promise has already resolved! Trigger success immediately.
 ^^^^
 source.luau
     ^^
     source.luau comment.line.double-dash.luau
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       source.luau comment.line.double-dash.luau
>  		successCallback(unpack(self._values, 1, self._valuesLength))
 ^^^^
 source.luau
     ^^^^^^^^^^^^^^^
     source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^^^^^^
                     source.luau support.function.luau
                           ^
                           source.luau punctuation.arguments.begin.luau
                            ^^^^
                            source.luau variable.language.self.luau
                                ^
                                source.luau
                                 ^^^^^^^
                                 source.luau variable.other.property.luau
                                        ^
                                        source.luau punctuation.separator.arguments.luau
                                         ^
                                         source.luau
                                          ^
                                          source.luau constant.numeric.decimal.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^^^^
                                             source.luau variable.language.self.luau
                                                 ^
                                                 source.luau
                                                  ^^^^^^^^^^^^^
                                                  source.luau variable.other.property.luau
                                                               ^
                                                               source.luau punctuation.arguments.end.luau
                                                                ^
                                                                source.luau punctuation.arguments.end.luau
>  	elseif self._status == Promise.Status.Rejected then
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^
           source.luau variable.language.self.luau
               ^
               source.luau
                ^^^^^^^
                source.luau variable.other.property.luau
                       ^
                       source.luau
                        ^^
                        source.luau keyword.operator.comparison.luau
                          ^
                          source.luau
                           ^^^^^^^
                           source.luau variable.other.readwrite.luau
                                  ^
                                  source.luau
                                   ^^^^^^
                                   source.luau variable.other.property.luau
                                         ^
                                         source.luau
                                          ^^^^^^^^
                                          source.luau variable.other.property.luau
                                                  ^
                                                  source.luau
                                                   ^^^^
                                                   source.luau keyword.control.luau
>  		-- This promise died a terrible death! Trigger failure immediately.
 ^^^^
 source.luau
     ^^
     source.luau comment.line.double-dash.luau
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       source.luau comment.line.double-dash.luau
>  		failureCallback(unpack(self._values, 1, self._valuesLength))
 ^^^^
 source.luau
     ^^^^^^^^^^^^^^^
     source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^^^^^^
                     source.luau support.function.luau
                           ^
                           source.luau punctuation.arguments.begin.luau
                            ^^^^
                            source.luau variable.language.self.luau
                                ^
                                source.luau
                                 ^^^^^^^
                                 source.luau variable.other.property.luau
                                        ^
                                        source.luau punctuation.separator.arguments.luau
                                         ^
                                         source.luau
                                          ^
                                          source.luau constant.numeric.decimal.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^^^^
                                             source.luau variable.language.self.luau
                                                 ^
                                                 source.luau
                                                  ^^^^^^^^^^^^^
                                                  source.luau variable.other.property.luau
                                                               ^
                                                               source.luau punctuation.arguments.end.luau
                                                                ^
                                                                source.luau punctuation.arguments.end.luau
>  	elseif self._status == Promise.Status.Cancelled then
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^
           source.luau variable.language.self.luau
               ^
               source.luau
                ^^^^^^^
                source.luau variable.other.property.luau
                       ^
                       source.luau
                        ^^
                        source.luau keyword.operator.comparison.luau
                          ^
                          source.luau
                           ^^^^^^^
                           source.luau variable.other.readwrite.luau
                                  ^
                                  source.luau
                                   ^^^^^^
                                   source.luau variable.other.property.luau
                                         ^
                                         source.luau
                                          ^^^^^^^^^
                                          source.luau variable.other.property.luau
                                                   ^
                                                   source.luau
                                                    ^^^^
                                                    source.luau keyword.control.luau
>  		-- We don't want to call the success handler or the failure handler,
 ^^^^
 source.luau
     ^^
     source.luau comment.line.double-dash.luau
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       source.luau comment.line.double-dash.luau
>  		-- we just reject this promise outright.
 ^^^^
 source.luau
     ^^
     source.luau comment.line.double-dash.luau
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       source.luau comment.line.double-dash.luau
>  		reject(Error.new({
 ^^^^
 source.luau
     ^^^^^^
     source.luau entity.name.function.luau
           ^
           source.luau punctuation.arguments.begin.luau
            ^^^^^
            source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^
                  source.luau entity.name.function.luau
                     ^
                     source.luau punctuation.arguments.begin.luau
                      ^
                      source.luau punctuation.table.begin.luau
>  			error = "Promise is cancelled",
 ^^^^^
 source.luau
      ^^^^^
      source.luau support.function.luau
           ^
           source.luau
            ^
            source.luau keyword.operator.assignment.luau
             ^
             source.luau
              ^
              source.luau string.quoted.double.luau
               ^^^^^^^^^^^^^^^^^^^^
               source.luau string.quoted.double.luau
                                   ^
                                   source.luau string.quoted.double.luau
                                    ^
                                    source.luau punctuation.separator.fields.luau
>  			kind = Error.Kind.AlreadyCancelled,
 ^^^^^
 source.luau
      ^^^^
      source.luau variable.other.readwrite.luau
          ^
          source.luau
           ^
           source.luau keyword.operator.assignment.luau
            ^
            source.luau
             ^^^^^
             source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^^^
                   source.luau variable.other.property.luau
                       ^
                       source.luau
                        ^^^^^^^^^^^^^^^^
                        source.luau variable.other.property.luau
                                        ^
                                        source.luau punctuation.separator.fields.luau
>  			context = "Promise created at\n\n" .. traceback,
 ^^^^^
 source.luau
      ^^^^^^^
      source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^
              source.luau keyword.operator.assignment.luau
               ^
               source.luau
                ^
                source.luau string.quoted.double.luau
                 ^^^^^^^^^^^^^^^^^^
                 source.luau string.quoted.double.luau
                                   ^^
                                   source.luau string.quoted.double.luau constant.character.escape.luau
                                     ^^
                                     source.luau string.quoted.double.luau constant.character.escape.luau
                                       ^
                                       source.luau string.quoted.double.luau
                                        ^
                                        source.luau
                                         ^^
                                         source.luau keyword.operator.other.luau
                                           ^
                                           source.luau
                                            ^^^^^^^^^
                                            source.luau variable.other.readwrite.luau
                                                     ^
                                                     source.luau punctuation.separator.fields.luau
>  		}))
 ^^^^
 source.luau
     ^
     source.luau punctuation.table.end.luau
      ^
      source.luau punctuation.arguments.end.luau
       ^
       source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>  end, self)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.separator.arguments.luau
       ^
       source.luau
        ^^^^
        source.luau variable.language.self.luau
            ^
            source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>function Promise.prototype:andThen(successHandler, failureHandler)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                   ^
                                   source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                    ^^^^^^^^^^^^^^
                                    source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                  ^
                                                  source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                   ^
                                                   source.luau meta.function.luau meta.parameter.luau
                                                    ^^^^^^^^^^^^^^
                                                    source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                  ^
                                                                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  assert(
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
>  	successHandler == nil or type(successHandler) == "function",
 ^^^
 source.luau
    ^^^^^^^^^^^^^^
    source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.operator.comparison.luau
                     ^
                     source.luau
                      ^^^
                      source.luau constant.language.nil.luau
                         ^
                         source.luau
                          ^^
                          source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                            ^
                            source.luau
                             ^^^^
                             source.luau support.function.luau
                                 ^
                                 source.luau punctuation.arguments.begin.luau
                                  ^^^^^^^^^^^^^^
                                  source.luau variable.other.readwrite.luau
                                                ^
                                                source.luau punctuation.arguments.end.luau
                                                 ^
                                                 source.luau
                                                  ^^
                                                  source.luau keyword.operator.comparison.luau
                                                    ^
                                                    source.luau
                                                     ^
                                                     source.luau string.quoted.double.luau
                                                      ^^^^^^^^
                                                      source.luau string.quoted.double.luau
                                                              ^
                                                              source.luau string.quoted.double.luau
                                                               ^
                                                               source.luau punctuation.separator.arguments.luau
>  	string.format(ERROR_NON_FUNCTION, "Promise:andThen")
 ^^^
 source.luau
    ^^^^^^^^^^^^^
    source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^^^^^^^^^^^^^^^
                  source.luau variable.other.constant.luau
                                    ^
                                    source.luau punctuation.separator.arguments.luau
                                     ^
                                     source.luau
                                      ^
                                      source.luau string.quoted.double.luau
                                       ^^^^^^^^^^^^^^^
                                       source.luau string.quoted.double.luau
                                                      ^
                                                      source.luau string.quoted.double.luau
                                                       ^
                                                       source.luau punctuation.arguments.end.luau
>  )
 ^^
 source.luau
   ^
   source.luau punctuation.arguments.end.luau
>  assert(
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
>  	failureHandler == nil or type(failureHandler) == "function",
 ^^^
 source.luau
    ^^^^^^^^^^^^^^
    source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.operator.comparison.luau
                     ^
                     source.luau
                      ^^^
                      source.luau constant.language.nil.luau
                         ^
                         source.luau
                          ^^
                          source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                            ^
                            source.luau
                             ^^^^
                             source.luau support.function.luau
                                 ^
                                 source.luau punctuation.arguments.begin.luau
                                  ^^^^^^^^^^^^^^
                                  source.luau variable.other.readwrite.luau
                                                ^
                                                source.luau punctuation.arguments.end.luau
                                                 ^
                                                 source.luau
                                                  ^^
                                                  source.luau keyword.operator.comparison.luau
                                                    ^
                                                    source.luau
                                                     ^
                                                     source.luau string.quoted.double.luau
                                                      ^^^^^^^^
                                                      source.luau string.quoted.double.luau
                                                              ^
                                                              source.luau string.quoted.double.luau
                                                               ^
                                                               source.luau punctuation.separator.arguments.luau
>  	string.format(ERROR_NON_FUNCTION, "Promise:andThen")
 ^^^
 source.luau
    ^^^^^^^^^^^^^
    source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^^^^^^^^^^^^^^^
                  source.luau variable.other.constant.luau
                                    ^
                                    source.luau punctuation.separator.arguments.luau
                                     ^
                                     source.luau
                                      ^
                                      source.luau string.quoted.double.luau
                                       ^^^^^^^^^^^^^^^
                                       source.luau string.quoted.double.luau
                                                      ^
                                                      source.luau string.quoted.double.luau
                                                       ^
                                                       source.luau punctuation.arguments.end.luau
>  )
 ^^
 source.luau
   ^
   source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  return self:_andThen(debug.traceback(nil, 2), successHandler, failureHandler)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau variable.language.self.luau
              ^
              source.luau
               ^^^^^^^^
               source.luau entity.name.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^^^^
                        source.luau support.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^^^
                                        source.luau constant.language.nil.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^
                                             source.luau constant.numeric.decimal.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
                                               ^
                                               source.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau
                                                 ^^^^^^^^^^^^^^
                                                 source.luau variable.other.readwrite.luau
                                                               ^
                                                               source.luau punctuation.separator.arguments.luau
                                                                ^
                                                                source.luau
                                                                 ^^^^^^^^^^^^^^
                                                                 source.luau variable.other.readwrite.luau
                                                                               ^
                                                                               source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Used to catch any errors that may have occurred in the promise.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:catch(failureCallback)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                 ^
                                 source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                  ^^^^^^^^^^^^^^^
                                  source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                 ^
                                                 source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  assert(
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
>  	failureCallback == nil or type(failureCallback) == "function",
 ^^^
 source.luau
    ^^^^^^^^^^^^^^^
    source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^^
                    source.luau keyword.operator.comparison.luau
                      ^
                      source.luau
                       ^^^
                       source.luau constant.language.nil.luau
                          ^
                          source.luau
                           ^^
                           source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                             ^
                             source.luau
                              ^^^^
                              source.luau support.function.luau
                                  ^
                                  source.luau punctuation.arguments.begin.luau
                                   ^^^^^^^^^^^^^^^
                                   source.luau variable.other.readwrite.luau
                                                  ^
                                                  source.luau punctuation.arguments.end.luau
                                                   ^
                                                   source.luau
                                                    ^^
                                                    source.luau keyword.operator.comparison.luau
                                                      ^
                                                      source.luau
                                                       ^
                                                       source.luau string.quoted.double.luau
                                                        ^^^^^^^^
                                                        source.luau string.quoted.double.luau
                                                                ^
                                                                source.luau string.quoted.double.luau
                                                                 ^
                                                                 source.luau punctuation.separator.arguments.luau
>  	string.format(ERROR_NON_FUNCTION, "Promise:catch")
 ^^^
 source.luau
    ^^^^^^^^^^^^^
    source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^^^^^^^^^^^^^^^
                  source.luau variable.other.constant.luau
                                    ^
                                    source.luau punctuation.separator.arguments.luau
                                     ^
                                     source.luau
                                      ^
                                      source.luau string.quoted.double.luau
                                       ^^^^^^^^^^^^^
                                       source.luau string.quoted.double.luau
                                                    ^
                                                    source.luau string.quoted.double.luau
                                                     ^
                                                     source.luau punctuation.arguments.end.luau
>  )
 ^^
 source.luau
   ^
   source.luau punctuation.arguments.end.luau
>  return self:_andThen(debug.traceback(nil, 2), nil, failureCallback)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau variable.language.self.luau
              ^
              source.luau
               ^^^^^^^^
               source.luau entity.name.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^^^^
                        source.luau support.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^^^
                                        source.luau constant.language.nil.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^
                                             source.luau constant.numeric.decimal.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
                                               ^
                                               source.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau
                                                 ^^^
                                                 source.luau constant.language.nil.luau
                                                    ^
                                                    source.luau punctuation.separator.arguments.luau
                                                     ^
                                                     source.luau
                                                      ^^^^^^^^^^^^^^^
                                                      source.luau variable.other.readwrite.luau
                                                                     ^
                                                                     source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Like andThen, but the value passed into the handler is also the
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  value returned from the handler.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:tap(tapCallback)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^
                            source.luau meta.function.luau entity.name.function.luau
                               ^
                               source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                ^^^^^^^^^^^
                                source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                           ^
                                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  assert(type(tapCallback) == "function", string.format(ERROR_NON_FUNCTION, "Promise:tap"))
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau punctuation.arguments.begin.luau
               ^^^^^^^^^^^
               source.luau variable.other.readwrite.luau
                          ^
                          source.luau punctuation.arguments.end.luau
                           ^
                           source.luau
                            ^^
                            source.luau keyword.operator.comparison.luau
                              ^
                              source.luau
                               ^
                               source.luau string.quoted.double.luau
                                ^^^^^^^^
                                source.luau string.quoted.double.luau
                                        ^
                                        source.luau string.quoted.double.luau
                                         ^
                                         source.luau punctuation.separator.arguments.luau
                                          ^
                                          source.luau
                                           ^^^^^^^^^^^^^
                                           source.luau support.function.luau
                                                        ^
                                                        source.luau punctuation.arguments.begin.luau
                                                         ^^^^^^^^^^^^^^^^^^
                                                         source.luau variable.other.constant.luau
                                                                           ^
                                                                           source.luau punctuation.separator.arguments.luau
                                                                            ^
                                                                            source.luau
                                                                             ^
                                                                             source.luau string.quoted.double.luau
                                                                              ^^^^^^^^^^^
                                                                              source.luau string.quoted.double.luau
                                                                                         ^
                                                                                         source.luau string.quoted.double.luau
                                                                                          ^
                                                                                          source.luau punctuation.arguments.end.luau
                                                                                           ^
                                                                                           source.luau punctuation.arguments.end.luau
>  return self:_andThen(debug.traceback(nil, 2), function(...)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau variable.language.self.luau
              ^
              source.luau
               ^^^^^^^^
               source.luau entity.name.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^^^^
                        source.luau support.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^^^
                                        source.luau constant.language.nil.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^
                                             source.luau constant.numeric.decimal.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
                                               ^
                                               source.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau
                                                 ^^^^^^^^
                                                 source.luau meta.function.luau keyword.control.luau
                                                         ^
                                                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                          ^^^
                                                          source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                                             ^
                                                             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	local callbackReturn = tapCallback(...)
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                        ^
                        source.luau
                         ^
                         source.luau keyword.operator.assignment.luau
                          ^
                          source.luau
                           ^^^^^^^^^^^
                           source.luau entity.name.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^
                                       source.luau keyword.other.unit.luau
                                          ^
                                          source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  	if Promise.is(callbackReturn) then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^^^^
       source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^^
               source.luau entity.name.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^^^^^^^^^^^
                  source.luau variable.other.readwrite.luau
                                ^
                                source.luau punctuation.arguments.end.luau
                                 ^
                                 source.luau
                                  ^^^^
                                  source.luau keyword.control.luau
>  		local length, values = pack(...)
 ^^^^
 source.luau
     ^^^^^
     source.luau storage.modifier.local.luau
          ^
          source.luau
           ^^^^^^
           source.luau variable.other.readwrite.luau
                 ^^
                 source.luau
                   ^^^^^^
                   source.luau variable.other.readwrite.luau
                         ^
                         source.luau
                          ^
                          source.luau keyword.operator.assignment.luau
                           ^
                           source.luau
                            ^^^^
                            source.luau entity.name.function.luau
                                ^
                                source.luau punctuation.arguments.begin.luau
                                 ^^^
                                 source.luau keyword.other.unit.luau
                                    ^
                                    source.luau punctuation.arguments.end.luau
>  		return callbackReturn:andThen(function()
 ^^^^
 source.luau
     ^^^^^^
     source.luau keyword.control.luau
           ^
           source.luau
            ^^^^^^^^^^^^^^
            source.luau variable.other.readwrite.luau
                          ^
                          source.luau
                           ^^^^^^^
                           source.luau entity.name.function.luau
                                  ^
                                  source.luau punctuation.arguments.begin.luau
                                   ^^^^^^^^
                                   source.luau meta.function.luau keyword.control.luau
                                           ^
                                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                            ^
                                            source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  			return unpack(values, 1, length)
 ^^^^^
 source.luau
      ^^^^^^
      source.luau keyword.control.luau
            ^
            source.luau
             ^^^^^^
             source.luau support.function.luau
                   ^
                   source.luau punctuation.arguments.begin.luau
                    ^^^^^^
                    source.luau variable.other.readwrite.luau
                          ^
                          source.luau punctuation.separator.arguments.luau
                           ^
                           source.luau
                            ^
                            source.luau constant.numeric.decimal.luau
                             ^
                             source.luau punctuation.separator.arguments.luau
                              ^
                              source.luau
                               ^^^^^^
                               source.luau variable.other.readwrite.luau
                                     ^
                                     source.luau punctuation.arguments.end.luau
>  		end)
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
        ^
        source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	return ...
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^
           source.luau keyword.other.unit.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Calls a callback on `andThen` with specific arguments.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:andThenCall(callback, ...)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                       ^
                                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                        ^^^^^^^^
                                        source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                ^
                                                source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                 ^
                                                 source.luau meta.function.luau meta.parameter.luau
                                                  ^^^
                                                  source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                                     ^
                                                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  assert(type(callback) == "function", string.format(ERROR_NON_FUNCTION, "Promise:andThenCall"))
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau punctuation.arguments.begin.luau
               ^^^^^^^^
               source.luau variable.other.readwrite.luau
                       ^
                       source.luau punctuation.arguments.end.luau
                        ^
                        source.luau
                         ^^
                         source.luau keyword.operator.comparison.luau
                           ^
                           source.luau
                            ^
                            source.luau string.quoted.double.luau
                             ^^^^^^^^
                             source.luau string.quoted.double.luau
                                     ^
                                     source.luau string.quoted.double.luau
                                      ^
                                      source.luau punctuation.separator.arguments.luau
                                       ^
                                       source.luau
                                        ^^^^^^^^^^^^^
                                        source.luau support.function.luau
                                                     ^
                                                     source.luau punctuation.arguments.begin.luau
                                                      ^^^^^^^^^^^^^^^^^^
                                                      source.luau variable.other.constant.luau
                                                                        ^
                                                                        source.luau punctuation.separator.arguments.luau
                                                                         ^
                                                                         source.luau
                                                                          ^
                                                                          source.luau string.quoted.double.luau
                                                                           ^^^^^^^^^^^^^^^^^^^
                                                                           source.luau string.quoted.double.luau
                                                                                              ^
                                                                                              source.luau string.quoted.double.luau
                                                                                               ^
                                                                                               source.luau punctuation.arguments.end.luau
                                                                                                ^
                                                                                                source.luau punctuation.arguments.end.luau
>  local length, values = pack(...)
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^
         source.luau variable.other.readwrite.luau
               ^^
               source.luau
                 ^^^^^^
                 source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^^^^
                          source.luau entity.name.function.luau
                              ^
                              source.luau punctuation.arguments.begin.luau
                               ^^^
                               source.luau keyword.other.unit.luau
                                  ^
                                  source.luau punctuation.arguments.end.luau
>  return self:_andThen(debug.traceback(nil, 2), function()
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau variable.language.self.luau
              ^
              source.luau
               ^^^^^^^^
               source.luau entity.name.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^^^^
                        source.luau support.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^^^
                                        source.luau constant.language.nil.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^
                                             source.luau constant.numeric.decimal.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
                                               ^
                                               source.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau
                                                 ^^^^^^^^
                                                 source.luau meta.function.luau keyword.control.luau
                                                         ^
                                                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                          ^
                                                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	return callback(unpack(values, 1, length))
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^^^
           source.luau entity.name.function.luau
                   ^
                   source.luau punctuation.arguments.begin.luau
                    ^^^^^^
                    source.luau support.function.luau
                          ^
                          source.luau punctuation.arguments.begin.luau
                           ^^^^^^
                           source.luau variable.other.readwrite.luau
                                 ^
                                 source.luau punctuation.separator.arguments.luau
                                  ^
                                  source.luau
                                   ^
                                   source.luau constant.numeric.decimal.luau
                                    ^
                                    source.luau punctuation.separator.arguments.luau
                                     ^
                                     source.luau
                                      ^^^^^^
                                      source.luau variable.other.readwrite.luau
                                            ^
                                            source.luau punctuation.arguments.end.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Shorthand for an andThen handler that returns the given value.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:andThenReturn(...)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                         ^
                                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                          ^^^
                                          source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                             ^
                                             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  local length, values = pack(...)
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^
         source.luau variable.other.readwrite.luau
               ^^
               source.luau
                 ^^^^^^
                 source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^^^^
                          source.luau entity.name.function.luau
                              ^
                              source.luau punctuation.arguments.begin.luau
                               ^^^
                               source.luau keyword.other.unit.luau
                                  ^
                                  source.luau punctuation.arguments.end.luau
>  return self:_andThen(debug.traceback(nil, 2), function()
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau variable.language.self.luau
              ^
              source.luau
               ^^^^^^^^
               source.luau entity.name.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^^^^
                        source.luau support.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^^^
                                        source.luau constant.language.nil.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^
                                             source.luau constant.numeric.decimal.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
                                               ^
                                               source.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau
                                                 ^^^^^^^^
                                                 source.luau meta.function.luau keyword.control.luau
                                                         ^
                                                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                          ^
                                                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	return unpack(values, 1, length)
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^
           source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^^^
                  source.luau variable.other.readwrite.luau
                        ^
                        source.luau punctuation.separator.arguments.luau
                         ^
                         source.luau
                          ^
                          source.luau constant.numeric.decimal.luau
                           ^
                           source.luau punctuation.separator.arguments.luau
                            ^
                            source.luau
                             ^^^^^^
                             source.luau variable.other.readwrite.luau
                                   ^
                                   source.luau punctuation.arguments.end.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Cancels the promise, disallowing it from rejecting or resolving, and calls
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  the cancellation hook if provided.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:cancel()
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                  ^
                                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                   ^
                                   source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  if self._status ~= Promise.Status.Started then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^
      source.luau variable.language.self.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.property.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.operator.comparison.luau
                     ^
                     source.luau
                      ^^^^^^^
                      source.luau variable.other.readwrite.luau
                             ^
                             source.luau
                              ^^^^^^
                              source.luau variable.other.property.luau
                                    ^
                                    source.luau
                                     ^^^^^^^
                                     source.luau variable.other.property.luau
                                            ^
                                            source.luau
                                             ^^^^
                                             source.luau keyword.control.luau
>  	return
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  self._status = Promise.Status.Cancelled
 ^^
 source.luau
   ^^^^
   source.luau variable.language.self.luau
       ^
       source.luau
        ^^^^^^^
        source.luau variable.other.property.luau
               ^
               source.luau
                ^
                source.luau keyword.operator.assignment.luau
                 ^
                 source.luau
                  ^^^^^^^
                  source.luau variable.other.readwrite.luau
                         ^
                         source.luau
                          ^^^^^^
                          source.luau variable.other.property.luau
                                ^
                                source.luau
                                 ^^^^^^^^^
                                 source.luau variable.other.property.luau
>
 ^
 source.luau
>  if self._cancellationHook then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^
      source.luau variable.language.self.luau
          ^
          source.luau
           ^^^^^^^^^^^^^^^^^
           source.luau variable.other.property.luau
                            ^
                            source.luau
                             ^^^^
                             source.luau keyword.control.luau
>  	self._cancellationHook()
 ^^^
 source.luau
    ^^^^
    source.luau variable.language.self.luau
        ^
        source.luau
         ^^^^^^^^^^^^^^^^^
         source.luau entity.name.function.luau
                          ^
                          source.luau punctuation.arguments.begin.luau
                           ^
                           source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  if self._parent then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^
      source.luau variable.language.self.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.property.luau
                  ^
                  source.luau
                   ^^^^
                   source.luau keyword.control.luau
>  	self._parent:_consumerCancelled(self)
 ^^^
 source.luau
    ^^^^
    source.luau variable.language.self.luau
        ^
        source.luau
         ^^^^^^^
         source.luau variable.other.property.luau
                ^
                source.luau
                 ^^^^^^^^^^^^^^^^^^
                 source.luau entity.name.function.luau
                                   ^
                                   source.luau punctuation.arguments.begin.luau
                                    ^^^^
                                    source.luau variable.language.self.luau
                                        ^
                                        source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  for child in pairs(self._consumers) do
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau
       ^^^^^
       source.luau variable.parameter.luau
            ^
            source.luau
             ^^
             source.luau keyword.control.luau
               ^
               source.luau
                ^^^^^
                source.luau support.function.luau
                     ^
                     source.luau punctuation.arguments.begin.luau
                      ^^^^
                      source.luau variable.language.self.luau
                          ^
                          source.luau
                           ^^^^^^^^^^
                           source.luau variable.other.property.luau
                                     ^
                                     source.luau punctuation.arguments.end.luau
                                      ^
                                      source.luau
                                       ^^
                                       source.luau keyword.control.luau
>  	child:cancel()
 ^^^
 source.luau
    ^^^^^
    source.luau variable.other.readwrite.luau
         ^
         source.luau
          ^^^^^^
          source.luau entity.name.function.luau
                ^
                source.luau punctuation.arguments.begin.luau
                 ^
                 source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  self:_finalize()
 ^^
 source.luau
   ^^^^
   source.luau variable.language.self.luau
       ^
       source.luau
        ^^^^^^^^^
        source.luau entity.name.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^
                  source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Used to decrease the number of consumers by 1, and if there are no more,
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  cancel this promise.
 ^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:_consumerCancelled(consumer)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^^^^^^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                              ^
                                              source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                               ^^^^^^^^
                                               source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                       ^
                                                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  if self._status ~= Promise.Status.Started then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^
      source.luau variable.language.self.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.property.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.operator.comparison.luau
                     ^
                     source.luau
                      ^^^^^^^
                      source.luau variable.other.readwrite.luau
                             ^
                             source.luau
                              ^^^^^^
                              source.luau variable.other.property.luau
                                    ^
                                    source.luau
                                     ^^^^^^^
                                     source.luau variable.other.property.luau
                                            ^
                                            source.luau
                                             ^^^^
                                             source.luau keyword.control.luau
>  	return
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  self._consumers[consumer] = nil
 ^^
 source.luau
   ^^^^
   source.luau variable.language.self.luau
       ^
       source.luau
        ^^^^^^^^^^
        source.luau variable.other.property.luau
                  ^
                  source.luau
                   ^^^^^^^^
                   source.luau variable.other.readwrite.luau
                           ^^
                           source.luau
                             ^
                             source.luau keyword.operator.assignment.luau
                              ^
                              source.luau
                               ^^^
                               source.luau constant.language.nil.luau
>
 ^
 source.luau
>  if next(self._consumers) == nil then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^
      source.luau support.function.luau
          ^
          source.luau punctuation.arguments.begin.luau
           ^^^^
           source.luau variable.language.self.luau
               ^
               source.luau
                ^^^^^^^^^^
                source.luau variable.other.property.luau
                          ^
                          source.luau punctuation.arguments.end.luau
                           ^
                           source.luau
                            ^^
                            source.luau keyword.operator.comparison.luau
                              ^
                              source.luau
                               ^^^
                               source.luau constant.language.nil.luau
                                  ^
                                  source.luau
                                   ^^^^
                                   source.luau keyword.control.luau
>  	self:cancel()
 ^^^
 source.luau
    ^^^^
    source.luau variable.language.self.luau
        ^
        source.luau
         ^^^^^^
         source.luau entity.name.function.luau
               ^
               source.luau punctuation.arguments.begin.luau
                ^
                source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Used to set a handler for when the promise resolves, rejects, or is
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  cancelled. Returns a new promise chained from this promise.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:_finally(traceback, finallyHandler, onlyOk)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                    ^
                                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                     ^^^^^^^^^
                                     source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                              ^
                                              source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                               ^
                                               source.luau meta.function.luau meta.parameter.luau
                                                ^^^^^^^^^^^^^^
                                                source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                              ^
                                                              source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                               ^
                                                               source.luau meta.function.luau meta.parameter.luau
                                                                ^^^^^^
                                                                source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                      ^
                                                                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  if not onlyOk then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^
      source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
         ^
         source.luau
          ^^^^^^
          source.luau variable.other.readwrite.luau
                ^
                source.luau
                 ^^^^
                 source.luau keyword.control.luau
>  	self._unhandledRejection = false
 ^^^
 source.luau
    ^^^^
    source.luau variable.language.self.luau
        ^
        source.luau
         ^^^^^^^^^^^^^^^^^^^
         source.luau variable.other.property.luau
                            ^
                            source.luau
                             ^
                             source.luau keyword.operator.assignment.luau
                              ^
                              source.luau
                               ^^^^^
                               source.luau constant.language.boolean.false.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  -- Return a promise chained off of this promise
 ^^
 source.luau
   ^^
   source.luau comment.line.double-dash.luau
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     source.luau comment.line.double-dash.luau
>  return Promise._new(traceback, function(resolve, reject)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^^^^^^
                       source.luau variable.other.readwrite.luau
                                ^
                                source.luau punctuation.separator.arguments.luau
                                 ^
                                 source.luau
                                  ^^^^^^^^
                                  source.luau meta.function.luau keyword.control.luau
                                          ^
                                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                           ^^^^^^^
                                           source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                  ^
                                                  source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                   ^
                                                   source.luau meta.function.luau meta.parameter.luau
                                                    ^^^^^^
                                                    source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                          ^
                                                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	local finallyCallback = resolve
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                         ^
                         source.luau
                          ^
                          source.luau keyword.operator.assignment.luau
                           ^
                           source.luau
                            ^^^^^^^
                            source.luau variable.other.readwrite.luau
>  	if finallyHandler then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^^^^^^^^^^^
       source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^^^^
                      source.luau keyword.control.luau
>  		finallyCallback = createAdvancer(
 ^^^^
 source.luau
     ^^^^^^^^^^^^^^^
     source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^
                     source.luau keyword.operator.assignment.luau
                      ^
                      source.luau
                       ^^^^^^^^^^^^^^
                       source.luau entity.name.function.luau
                                     ^
                                     source.luau punctuation.arguments.begin.luau
>  			traceback,
 ^^^^^
 source.luau
      ^^^^^^^^^
      source.luau variable.other.readwrite.luau
               ^
               source.luau punctuation.separator.arguments.luau
>  			finallyHandler,
 ^^^^^
 source.luau
      ^^^^^^^^^^^^^^
      source.luau variable.other.readwrite.luau
                    ^
                    source.luau punctuation.separator.arguments.luau
>  			resolve,
 ^^^^^
 source.luau
      ^^^^^^^
      source.luau variable.other.readwrite.luau
             ^
             source.luau punctuation.separator.arguments.luau
>  			reject
 ^^^^^
 source.luau
      ^^^^^^
      source.luau variable.other.readwrite.luau
>  		)
 ^^^^
 source.luau
     ^
     source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	if onlyOk then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^^^
       source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^^^^
              source.luau keyword.control.luau
>  		local callback = finallyCallback
 ^^^^
 source.luau
     ^^^^^
     source.luau storage.modifier.local.luau
          ^
          source.luau
           ^^^^^^^^
           source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^
                    source.luau keyword.operator.assignment.luau
                     ^
                     source.luau
                      ^^^^^^^^^^^^^^^
                      source.luau variable.other.readwrite.luau
>  		finallyCallback = function(...)
 ^^^^
 source.luau
     ^^^^^^^^^^^^^^^
     source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^
                     source.luau keyword.operator.assignment.luau
                      ^
                      source.luau
                       ^^^^^^^^
                       source.luau meta.function.luau keyword.control.luau
                               ^
                               source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                ^^^
                                source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                   ^
                                   source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  			if self._status == Promise.Status.Rejected then
 ^^^^^
 source.luau
      ^^
      source.luau keyword.control.luau
        ^
        source.luau
         ^^^^
         source.luau variable.language.self.luau
             ^
             source.luau
              ^^^^^^^
              source.luau variable.other.property.luau
                     ^
                     source.luau
                      ^^
                      source.luau keyword.operator.comparison.luau
                        ^
                        source.luau
                         ^^^^^^^
                         source.luau variable.other.readwrite.luau
                                ^
                                source.luau
                                 ^^^^^^
                                 source.luau variable.other.property.luau
                                       ^
                                       source.luau
                                        ^^^^^^^^
                                        source.luau variable.other.property.luau
                                                ^
                                                source.luau
                                                 ^^^^
                                                 source.luau keyword.control.luau
>  				return resolve(self)
 ^^^^^^
 source.luau
       ^^^^^^
       source.luau keyword.control.luau
             ^
             source.luau
              ^^^^^^^
              source.luau entity.name.function.luau
                     ^
                     source.luau punctuation.arguments.begin.luau
                      ^^^^
                      source.luau variable.language.self.luau
                          ^
                          source.luau punctuation.arguments.end.luau
>  			end
 ^^^^^
 source.luau
      ^^^
      source.luau keyword.control.luau
>
 ^
 source.luau
>  			return callback(...)
 ^^^^^
 source.luau
      ^^^^^^
      source.luau keyword.control.luau
            ^
            source.luau
             ^^^^^^^^
             source.luau entity.name.function.luau
                     ^
                     source.luau punctuation.arguments.begin.luau
                      ^^^
                      source.luau keyword.other.unit.luau
                         ^
                         source.luau punctuation.arguments.end.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	if self._status == Promise.Status.Started then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^
       source.luau variable.language.self.luau
           ^
           source.luau
            ^^^^^^^
            source.luau variable.other.property.luau
                   ^
                   source.luau
                    ^^
                    source.luau keyword.operator.comparison.luau
                      ^
                      source.luau
                       ^^^^^^^
                       source.luau variable.other.readwrite.luau
                              ^
                              source.luau
                               ^^^^^^
                               source.luau variable.other.property.luau
                                     ^
                                     source.luau
                                      ^^^^^^^
                                      source.luau variable.other.property.luau
                                             ^
                                             source.luau
                                              ^^^^
                                              source.luau keyword.control.luau
>  		-- The promise is not settled, so queue this.
 ^^^^
 source.luau
     ^^
     source.luau comment.line.double-dash.luau
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       source.luau comment.line.double-dash.luau
>  		table.insert(self._queuedFinally, finallyCallback)
 ^^^^
 source.luau
     ^^^^^^^^^^^^
     source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^
                  source.luau variable.language.self.luau
                      ^
                      source.luau
                       ^^^^^^^^^^^^^^
                       source.luau variable.other.property.luau
                                     ^
                                     source.luau punctuation.separator.arguments.luau
                                      ^
                                      source.luau
                                       ^^^^^^^^^^^^^^^
                                       source.luau variable.other.readwrite.luau
                                                      ^
                                                      source.luau punctuation.arguments.end.luau
>  	else
 ^^^
 source.luau
    ^^^^
    source.luau keyword.control.luau
>  		-- The promise already settled or was cancelled, run the callback now.
 ^^^^
 source.luau
     ^^
     source.luau comment.line.double-dash.luau
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       source.luau comment.line.double-dash.luau
>  		finallyCallback(self._status)
 ^^^^
 source.luau
     ^^^^^^^^^^^^^^^
     source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^^^^
                     source.luau variable.language.self.luau
                         ^
                         source.luau
                          ^^^^^^^
                          source.luau variable.other.property.luau
                                 ^
                                 source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>  end, self)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.separator.arguments.luau
       ^
       source.luau
        ^^^^
        source.luau variable.language.self.luau
            ^
            source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>function Promise.prototype:finally(finallyHandler)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                   ^
                                   source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                    ^^^^^^^^^^^^^^
                                    source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                  ^
                                                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  assert(
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
>  	finallyHandler == nil or type(finallyHandler) == "function",
 ^^^
 source.luau
    ^^^^^^^^^^^^^^
    source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.operator.comparison.luau
                     ^
                     source.luau
                      ^^^
                      source.luau constant.language.nil.luau
                         ^
                         source.luau
                          ^^
                          source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                            ^
                            source.luau
                             ^^^^
                             source.luau support.function.luau
                                 ^
                                 source.luau punctuation.arguments.begin.luau
                                  ^^^^^^^^^^^^^^
                                  source.luau variable.other.readwrite.luau
                                                ^
                                                source.luau punctuation.arguments.end.luau
                                                 ^
                                                 source.luau
                                                  ^^
                                                  source.luau keyword.operator.comparison.luau
                                                    ^
                                                    source.luau
                                                     ^
                                                     source.luau string.quoted.double.luau
                                                      ^^^^^^^^
                                                      source.luau string.quoted.double.luau
                                                              ^
                                                              source.luau string.quoted.double.luau
                                                               ^
                                                               source.luau punctuation.separator.arguments.luau
>  	string.format(ERROR_NON_FUNCTION, "Promise:finally")
 ^^^
 source.luau
    ^^^^^^^^^^^^^
    source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^^^^^^^^^^^^^^^
                  source.luau variable.other.constant.luau
                                    ^
                                    source.luau punctuation.separator.arguments.luau
                                     ^
                                     source.luau
                                      ^
                                      source.luau string.quoted.double.luau
                                       ^^^^^^^^^^^^^^^
                                       source.luau string.quoted.double.luau
                                                      ^
                                                      source.luau string.quoted.double.luau
                                                       ^
                                                       source.luau punctuation.arguments.end.luau
>  )
 ^^
 source.luau
   ^
   source.luau punctuation.arguments.end.luau
>  return self:_finally(debug.traceback(nil, 2), finallyHandler)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau variable.language.self.luau
              ^
              source.luau
               ^^^^^^^^
               source.luau entity.name.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^^^^
                        source.luau support.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^^^
                                        source.luau constant.language.nil.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^
                                             source.luau constant.numeric.decimal.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
                                               ^
                                               source.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau
                                                 ^^^^^^^^^^^^^^
                                                 source.luau variable.other.readwrite.luau
                                                               ^
                                                               source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Calls a callback on `finally` with specific arguments.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:finallyCall(callback, ...)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                       ^
                                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                        ^^^^^^^^
                                        source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                ^
                                                source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                 ^
                                                 source.luau meta.function.luau meta.parameter.luau
                                                  ^^^
                                                  source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                                     ^
                                                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  assert(type(callback) == "function", string.format(ERROR_NON_FUNCTION, "Promise:finallyCall"))
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau punctuation.arguments.begin.luau
               ^^^^^^^^
               source.luau variable.other.readwrite.luau
                       ^
                       source.luau punctuation.arguments.end.luau
                        ^
                        source.luau
                         ^^
                         source.luau keyword.operator.comparison.luau
                           ^
                           source.luau
                            ^
                            source.luau string.quoted.double.luau
                             ^^^^^^^^
                             source.luau string.quoted.double.luau
                                     ^
                                     source.luau string.quoted.double.luau
                                      ^
                                      source.luau punctuation.separator.arguments.luau
                                       ^
                                       source.luau
                                        ^^^^^^^^^^^^^
                                        source.luau support.function.luau
                                                     ^
                                                     source.luau punctuation.arguments.begin.luau
                                                      ^^^^^^^^^^^^^^^^^^
                                                      source.luau variable.other.constant.luau
                                                                        ^
                                                                        source.luau punctuation.separator.arguments.luau
                                                                         ^
                                                                         source.luau
                                                                          ^
                                                                          source.luau string.quoted.double.luau
                                                                           ^^^^^^^^^^^^^^^^^^^
                                                                           source.luau string.quoted.double.luau
                                                                                              ^
                                                                                              source.luau string.quoted.double.luau
                                                                                               ^
                                                                                               source.luau punctuation.arguments.end.luau
                                                                                                ^
                                                                                                source.luau punctuation.arguments.end.luau
>  local length, values = pack(...)
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^
         source.luau variable.other.readwrite.luau
               ^^
               source.luau
                 ^^^^^^
                 source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^^^^
                          source.luau entity.name.function.luau
                              ^
                              source.luau punctuation.arguments.begin.luau
                               ^^^
                               source.luau keyword.other.unit.luau
                                  ^
                                  source.luau punctuation.arguments.end.luau
>  return self:_finally(debug.traceback(nil, 2), function()
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau variable.language.self.luau
              ^
              source.luau
               ^^^^^^^^
               source.luau entity.name.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^^^^
                        source.luau support.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^^^
                                        source.luau constant.language.nil.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^
                                             source.luau constant.numeric.decimal.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
                                               ^
                                               source.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau
                                                 ^^^^^^^^
                                                 source.luau meta.function.luau keyword.control.luau
                                                         ^
                                                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                          ^
                                                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	return callback(unpack(values, 1, length))
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^^^
           source.luau entity.name.function.luau
                   ^
                   source.luau punctuation.arguments.begin.luau
                    ^^^^^^
                    source.luau support.function.luau
                          ^
                          source.luau punctuation.arguments.begin.luau
                           ^^^^^^
                           source.luau variable.other.readwrite.luau
                                 ^
                                 source.luau punctuation.separator.arguments.luau
                                  ^
                                  source.luau
                                   ^
                                   source.luau constant.numeric.decimal.luau
                                    ^
                                    source.luau punctuation.separator.arguments.luau
                                     ^
                                     source.luau
                                      ^^^^^^
                                      source.luau variable.other.readwrite.luau
                                            ^
                                            source.luau punctuation.arguments.end.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Shorthand for a finally handler that returns the given value.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:finallyReturn(...)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                         ^
                                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                          ^^^
                                          source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                             ^
                                             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  local length, values = pack(...)
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^
         source.luau variable.other.readwrite.luau
               ^^
               source.luau
                 ^^^^^^
                 source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^^^^
                          source.luau entity.name.function.luau
                              ^
                              source.luau punctuation.arguments.begin.luau
                               ^^^
                               source.luau keyword.other.unit.luau
                                  ^
                                  source.luau punctuation.arguments.end.luau
>  return self:_finally(debug.traceback(nil, 2), function()
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau variable.language.self.luau
              ^
              source.luau
               ^^^^^^^^
               source.luau entity.name.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^^^^
                        source.luau support.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^^^
                                        source.luau constant.language.nil.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^
                                             source.luau constant.numeric.decimal.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
                                               ^
                                               source.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau
                                                 ^^^^^^^^
                                                 source.luau meta.function.luau keyword.control.luau
                                                         ^
                                                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                          ^
                                                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	return unpack(values, 1, length)
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^
           source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^^^
                  source.luau variable.other.readwrite.luau
                        ^
                        source.luau punctuation.separator.arguments.luau
                         ^
                         source.luau
                          ^
                          source.luau constant.numeric.decimal.luau
                           ^
                           source.luau punctuation.separator.arguments.luau
                            ^
                            source.luau
                             ^^^^^^
                             source.luau variable.other.readwrite.luau
                                   ^
                                   source.luau punctuation.arguments.end.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Similar to finally, except rejections are propagated through it.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:done(finallyHandler)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                ^
                                source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                 ^^^^^^^^^^^^^^
                                 source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                               ^
                                               source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  assert(
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
>  	finallyHandler == nil or type(finallyHandler) == "function",
 ^^^
 source.luau
    ^^^^^^^^^^^^^^
    source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.operator.comparison.luau
                     ^
                     source.luau
                      ^^^
                      source.luau constant.language.nil.luau
                         ^
                         source.luau
                          ^^
                          source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                            ^
                            source.luau
                             ^^^^
                             source.luau support.function.luau
                                 ^
                                 source.luau punctuation.arguments.begin.luau
                                  ^^^^^^^^^^^^^^
                                  source.luau variable.other.readwrite.luau
                                                ^
                                                source.luau punctuation.arguments.end.luau
                                                 ^
                                                 source.luau
                                                  ^^
                                                  source.luau keyword.operator.comparison.luau
                                                    ^
                                                    source.luau
                                                     ^
                                                     source.luau string.quoted.double.luau
                                                      ^^^^^^^^
                                                      source.luau string.quoted.double.luau
                                                              ^
                                                              source.luau string.quoted.double.luau
                                                               ^
                                                               source.luau punctuation.separator.arguments.luau
>  	string.format(ERROR_NON_FUNCTION, "Promise:done")
 ^^^
 source.luau
    ^^^^^^^^^^^^^
    source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^^^^^^^^^^^^^^^
                  source.luau variable.other.constant.luau
                                    ^
                                    source.luau punctuation.separator.arguments.luau
                                     ^
                                     source.luau
                                      ^
                                      source.luau string.quoted.double.luau
                                       ^^^^^^^^^^^^
                                       source.luau string.quoted.double.luau
                                                   ^
                                                   source.luau string.quoted.double.luau
                                                    ^
                                                    source.luau punctuation.arguments.end.luau
>  )
 ^^
 source.luau
   ^
   source.luau punctuation.arguments.end.luau
>  return self:_finally(debug.traceback(nil, 2), finallyHandler, true)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau variable.language.self.luau
              ^
              source.luau
               ^^^^^^^^
               source.luau entity.name.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^^^^
                        source.luau support.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^^^
                                        source.luau constant.language.nil.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^
                                             source.luau constant.numeric.decimal.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
                                               ^
                                               source.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau
                                                 ^^^^^^^^^^^^^^
                                                 source.luau variable.other.readwrite.luau
                                                               ^
                                                               source.luau punctuation.separator.arguments.luau
                                                                ^
                                                                source.luau
                                                                 ^^^^
                                                                 source.luau constant.language.boolean.true.luau
                                                                     ^
                                                                     source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Calls a callback on `done` with specific arguments.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:doneCall(callback, ...)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                    ^
                                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                     ^^^^^^^^
                                     source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                             ^
                                             source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                              ^
                                              source.luau meta.function.luau meta.parameter.luau
                                               ^^^
                                               source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                                  ^
                                                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  assert(type(callback) == "function", string.format(ERROR_NON_FUNCTION, "Promise:doneCall"))
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau punctuation.arguments.begin.luau
               ^^^^^^^^
               source.luau variable.other.readwrite.luau
                       ^
                       source.luau punctuation.arguments.end.luau
                        ^
                        source.luau
                         ^^
                         source.luau keyword.operator.comparison.luau
                           ^
                           source.luau
                            ^
                            source.luau string.quoted.double.luau
                             ^^^^^^^^
                             source.luau string.quoted.double.luau
                                     ^
                                     source.luau string.quoted.double.luau
                                      ^
                                      source.luau punctuation.separator.arguments.luau
                                       ^
                                       source.luau
                                        ^^^^^^^^^^^^^
                                        source.luau support.function.luau
                                                     ^
                                                     source.luau punctuation.arguments.begin.luau
                                                      ^^^^^^^^^^^^^^^^^^
                                                      source.luau variable.other.constant.luau
                                                                        ^
                                                                        source.luau punctuation.separator.arguments.luau
                                                                         ^
                                                                         source.luau
                                                                          ^
                                                                          source.luau string.quoted.double.luau
                                                                           ^^^^^^^^^^^^^^^^
                                                                           source.luau string.quoted.double.luau
                                                                                           ^
                                                                                           source.luau string.quoted.double.luau
                                                                                            ^
                                                                                            source.luau punctuation.arguments.end.luau
                                                                                             ^
                                                                                             source.luau punctuation.arguments.end.luau
>  local length, values = pack(...)
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^
         source.luau variable.other.readwrite.luau
               ^^
               source.luau
                 ^^^^^^
                 source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^^^^
                          source.luau entity.name.function.luau
                              ^
                              source.luau punctuation.arguments.begin.luau
                               ^^^
                               source.luau keyword.other.unit.luau
                                  ^
                                  source.luau punctuation.arguments.end.luau
>  return self:_finally(debug.traceback(nil, 2), function()
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau variable.language.self.luau
              ^
              source.luau
               ^^^^^^^^
               source.luau entity.name.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^^^^
                        source.luau support.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^^^
                                        source.luau constant.language.nil.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^
                                             source.luau constant.numeric.decimal.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
                                               ^
                                               source.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau
                                                 ^^^^^^^^
                                                 source.luau meta.function.luau keyword.control.luau
                                                         ^
                                                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                          ^
                                                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	return callback(unpack(values, 1, length))
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^^^
           source.luau entity.name.function.luau
                   ^
                   source.luau punctuation.arguments.begin.luau
                    ^^^^^^
                    source.luau support.function.luau
                          ^
                          source.luau punctuation.arguments.begin.luau
                           ^^^^^^
                           source.luau variable.other.readwrite.luau
                                 ^
                                 source.luau punctuation.separator.arguments.luau
                                  ^
                                  source.luau
                                   ^
                                   source.luau constant.numeric.decimal.luau
                                    ^
                                    source.luau punctuation.separator.arguments.luau
                                     ^
                                     source.luau
                                      ^^^^^^
                                      source.luau variable.other.readwrite.luau
                                            ^
                                            source.luau punctuation.arguments.end.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
>  end, true)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.separator.arguments.luau
       ^
       source.luau
        ^^^^
        source.luau constant.language.boolean.true.luau
            ^
            source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Shorthand for a done handler that returns the given value.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:doneReturn(...)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                      ^
                                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                       ^^^
                                       source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                          ^
                                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  local length, values = pack(...)
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^
         source.luau variable.other.readwrite.luau
               ^^
               source.luau
                 ^^^^^^
                 source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^^^^
                          source.luau entity.name.function.luau
                              ^
                              source.luau punctuation.arguments.begin.luau
                               ^^^
                               source.luau keyword.other.unit.luau
                                  ^
                                  source.luau punctuation.arguments.end.luau
>  return self:_finally(debug.traceback(nil, 2), function()
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau variable.language.self.luau
              ^
              source.luau
               ^^^^^^^^
               source.luau entity.name.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^^^^^^^^^^^^^^^
                        source.luau support.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^^^
                                        source.luau constant.language.nil.luau
                                           ^
                                           source.luau punctuation.separator.arguments.luau
                                            ^
                                            source.luau
                                             ^
                                             source.luau constant.numeric.decimal.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
                                               ^
                                               source.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau
                                                 ^^^^^^^^
                                                 source.luau meta.function.luau keyword.control.luau
                                                         ^
                                                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                          ^
                                                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	return unpack(values, 1, length)
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^
           source.luau support.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^^^
                  source.luau variable.other.readwrite.luau
                        ^
                        source.luau punctuation.separator.arguments.luau
                         ^
                         source.luau
                          ^
                          source.luau constant.numeric.decimal.luau
                           ^
                           source.luau punctuation.separator.arguments.luau
                            ^
                            source.luau
                             ^^^^^^
                             source.luau variable.other.readwrite.luau
                                   ^
                                   source.luau punctuation.arguments.end.luau
>  end, true)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.separator.arguments.luau
       ^
       source.luau
        ^^^^
        source.luau constant.language.boolean.true.luau
            ^
            source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Yield until the promise is completed.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>
 ^
 source.luau comment.block.luau
>  This matches the execution model of normal Roblox functions.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:awaitStatus()
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                       ^
                                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                        ^
                                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  self._unhandledRejection = false
 ^^
 source.luau
   ^^^^
   source.luau variable.language.self.luau
       ^
       source.luau
        ^^^^^^^^^^^^^^^^^^^
        source.luau variable.other.property.luau
                           ^
                           source.luau
                            ^
                            source.luau keyword.operator.assignment.luau
                             ^
                             source.luau
                              ^^^^^
                              source.luau constant.language.boolean.false.luau
>
 ^
 source.luau
>  if self._status == Promise.Status.Started then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^
      source.luau variable.language.self.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.property.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.operator.comparison.luau
                     ^
                     source.luau
                      ^^^^^^^
                      source.luau variable.other.readwrite.luau
                             ^
                             source.luau
                              ^^^^^^
                              source.luau variable.other.property.luau
                                    ^
                                    source.luau
                                     ^^^^^^^
                                     source.luau variable.other.property.luau
                                            ^
                                            source.luau
                                             ^^^^
                                             source.luau keyword.control.luau
>  	local bindable = Instance.new("BindableEvent")
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^
          source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^
                   source.luau keyword.operator.assignment.luau
                    ^
                    source.luau
                     ^^^^^^^^
                     source.luau variable.other.readwrite.luau
                             ^
                             source.luau
                              ^^^
                              source.luau entity.name.function.luau
                                 ^
                                 source.luau punctuation.arguments.begin.luau
                                  ^
                                  source.luau string.quoted.double.luau
                                   ^^^^^^^^^^^^^
                                   source.luau string.quoted.double.luau
                                                ^
                                                source.luau string.quoted.double.luau
                                                 ^
                                                 source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  	self:finally(function()
 ^^^
 source.luau
    ^^^^
    source.luau variable.language.self.luau
        ^
        source.luau
         ^^^^^^^
         source.luau entity.name.function.luau
                ^
                source.luau punctuation.arguments.begin.luau
                 ^^^^^^^^
                 source.luau meta.function.luau keyword.control.luau
                         ^
                         source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                          ^
                          source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		bindable:Fire()
 ^^^^
 source.luau
     ^^^^^^^^
     source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^^^^
              source.luau entity.name.function.luau
                  ^
                  source.luau punctuation.arguments.begin.luau
                   ^
                   source.luau punctuation.arguments.end.luau
>  	end)
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  	bindable.Event:Wait()
 ^^^
 source.luau
    ^^^^^^^^
    source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^^^^^
             source.luau variable.other.property.luau
                  ^
                  source.luau
                   ^^^^
                   source.luau entity.name.function.luau
                       ^
                       source.luau punctuation.arguments.begin.luau
                        ^
                        source.luau punctuation.arguments.end.luau
>  	bindable:Destroy()
 ^^^
 source.luau
    ^^^^^^^^
    source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^^^^^^^
             source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^
                     source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  if self._status == Promise.Status.Resolved then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^
      source.luau variable.language.self.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.property.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.operator.comparison.luau
                     ^
                     source.luau
                      ^^^^^^^
                      source.luau variable.other.readwrite.luau
                             ^
                             source.luau
                              ^^^^^^
                              source.luau variable.other.property.luau
                                    ^
                                    source.luau
                                     ^^^^^^^^
                                     source.luau variable.other.property.luau
                                             ^
                                             source.luau
                                              ^^^^
                                              source.luau keyword.control.luau
>  	return self._status, unpack(self._values, 1, self._valuesLength)
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^
           source.luau variable.language.self.luau
               ^
               source.luau
                ^^^^^^^
                source.luau variable.other.property.luau
                       ^^
                       source.luau
                         ^^^^^^
                         source.luau support.function.luau
                               ^
                               source.luau punctuation.arguments.begin.luau
                                ^^^^
                                source.luau variable.language.self.luau
                                    ^
                                    source.luau
                                     ^^^^^^^
                                     source.luau variable.other.property.luau
                                            ^
                                            source.luau punctuation.separator.arguments.luau
                                             ^
                                             source.luau
                                              ^
                                              source.luau constant.numeric.decimal.luau
                                               ^
                                               source.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau
                                                 ^^^^
                                                 source.luau variable.language.self.luau
                                                     ^
                                                     source.luau
                                                      ^^^^^^^^^^^^^
                                                      source.luau variable.other.property.luau
                                                                   ^
                                                                   source.luau punctuation.arguments.end.luau
>  elseif self._status == Promise.Status.Rejected then
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau variable.language.self.luau
              ^
              source.luau
               ^^^^^^^
               source.luau variable.other.property.luau
                      ^
                      source.luau
                       ^^
                       source.luau keyword.operator.comparison.luau
                         ^
                         source.luau
                          ^^^^^^^
                          source.luau variable.other.readwrite.luau
                                 ^
                                 source.luau
                                  ^^^^^^
                                  source.luau variable.other.property.luau
                                        ^
                                        source.luau
                                         ^^^^^^^^
                                         source.luau variable.other.property.luau
                                                 ^
                                                 source.luau
                                                  ^^^^
                                                  source.luau keyword.control.luau
>  	return self._status, unpack(self._values, 1, self._valuesLength)
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^
           source.luau variable.language.self.luau
               ^
               source.luau
                ^^^^^^^
                source.luau variable.other.property.luau
                       ^^
                       source.luau
                         ^^^^^^
                         source.luau support.function.luau
                               ^
                               source.luau punctuation.arguments.begin.luau
                                ^^^^
                                source.luau variable.language.self.luau
                                    ^
                                    source.luau
                                     ^^^^^^^
                                     source.luau variable.other.property.luau
                                            ^
                                            source.luau punctuation.separator.arguments.luau
                                             ^
                                             source.luau
                                              ^
                                              source.luau constant.numeric.decimal.luau
                                               ^
                                               source.luau punctuation.separator.arguments.luau
                                                ^
                                                source.luau
                                                 ^^^^
                                                 source.luau variable.language.self.luau
                                                     ^
                                                     source.luau
                                                      ^^^^^^^^^^^^^
                                                      source.luau variable.other.property.luau
                                                                   ^
                                                                   source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  return self._status
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^
          source.luau variable.language.self.luau
              ^
              source.luau
               ^^^^^^^
               source.luau variable.other.property.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>local function awaitHelper(status, ...)
 ^^^^^
 source.luau meta.function.luau storage.modifier.local.luau
      ^
      source.luau meta.function.luau
       ^^^^^^^^
       source.luau meta.function.luau keyword.control.luau
               ^
               source.luau meta.function.luau
                ^^^^^^^^^^^
                source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                            ^^^^^^
                            source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                  ^
                                  source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                   ^
                                   source.luau meta.function.luau meta.parameter.luau
                                    ^^^
                                    source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                       ^
                                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  return status == Promise.Status.Resolved, ...
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^
          source.luau variable.other.readwrite.luau
                ^
                source.luau
                 ^^
                 source.luau keyword.operator.comparison.luau
                   ^
                   source.luau
                    ^^^^^^^
                    source.luau variable.other.readwrite.luau
                           ^
                           source.luau
                            ^^^^^^
                            source.luau variable.other.property.luau
                                  ^
                                  source.luau
                                   ^^^^^^^^
                                   source.luau variable.other.property.luau
                                           ^^
                                           source.luau
                                             ^^^
                                             source.luau keyword.other.unit.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Calls awaitStatus internally, returns (isResolved, values...)
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:await()
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                 ^
                                 source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                  ^
                                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  return awaitHelper(self:awaitStatus())
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^^^^^
          source.luau entity.name.function.luau
                     ^
                     source.luau punctuation.arguments.begin.luau
                      ^^^^
                      source.luau variable.language.self.luau
                          ^
                          source.luau
                           ^^^^^^^^^^^
                           source.luau entity.name.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^
                                       source.luau punctuation.arguments.end.luau
                                        ^
                                        source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>local function expectHelper(status, ...)
 ^^^^^
 source.luau meta.function.luau storage.modifier.local.luau
      ^
      source.luau meta.function.luau
       ^^^^^^^^
       source.luau meta.function.luau keyword.control.luau
               ^
               source.luau meta.function.luau
                ^^^^^^^^^^^^
                source.luau meta.function.luau entity.name.function.luau
                            ^
                            source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                             ^^^^^^
                             source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                   ^
                                   source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                    ^
                                    source.luau meta.function.luau meta.parameter.luau
                                     ^^^
                                     source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                        ^
                                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  if status ~= Promise.Status.Resolved then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^^^
      source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^^
             source.luau keyword.operator.comparison.luau
               ^
               source.luau
                ^^^^^^^
                source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^^^^^^
                        source.luau variable.other.property.luau
                              ^
                              source.luau
                               ^^^^^^^^
                               source.luau variable.other.property.luau
                                       ^
                                       source.luau
                                        ^^^^
                                        source.luau keyword.control.luau
>  	error((...) == nil and "Expected Promise rejected with no value." or (...), 3)
 ^^^
 source.luau
    ^^^^^
    source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^
          source.luau punctuation.arguments.begin.luau
           ^^^
           source.luau keyword.other.unit.luau
              ^
              source.luau punctuation.arguments.end.luau
               ^
               source.luau
                ^^
                source.luau keyword.operator.comparison.luau
                  ^
                  source.luau
                   ^^^
                   source.luau constant.language.nil.luau
                      ^
                      source.luau
                       ^^^
                       source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                          ^
                          source.luau
                           ^
                           source.luau string.quoted.double.luau
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                            source.luau string.quoted.double.luau
                                                                    ^
                                                                    source.luau string.quoted.double.luau
                                                                     ^
                                                                     source.luau
                                                                      ^^
                                                                      source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                                                                        ^
                                                                        source.luau
                                                                         ^
                                                                         source.luau punctuation.arguments.begin.luau
                                                                          ^^^
                                                                          source.luau keyword.other.unit.luau
                                                                             ^
                                                                             source.luau punctuation.arguments.end.luau
                                                                              ^
                                                                              source.luau punctuation.separator.arguments.luau
                                                                               ^
                                                                               source.luau
                                                                                ^
                                                                                source.luau constant.numeric.decimal.luau
                                                                                 ^
                                                                                 source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  return ...
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^
          source.luau keyword.other.unit.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Calls await and only returns if the Promise resolves.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  Throws if the Promise rejects or gets cancelled.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:expect()
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                  ^
                                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                   ^
                                   source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  return expectHelper(self:awaitStatus())
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^^^^^^
          source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^
                       source.luau variable.language.self.luau
                           ^
                           source.luau
                            ^^^^^^^^^^^
                            source.luau entity.name.function.luau
                                       ^
                                       source.luau punctuation.arguments.begin.luau
                                        ^
                                        source.luau punctuation.arguments.end.luau
                                         ^
                                         source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>-- Backwards compatibility
 ^^
 source.luau comment.line.double-dash.luau
   ^^^^^^^^^^^^^^^^^^^^^^^^
   source.luau comment.line.double-dash.luau
>Promise.prototype.awaitValue = Promise.prototype.expect
 ^^^^^^^
 source.luau variable.other.readwrite.luau
        ^
        source.luau
         ^^^^^^^^^
         source.luau variable.other.property.luau
                  ^
                  source.luau
                   ^^^^^^^^^^
                   source.luau variable.other.property.luau
                             ^
                             source.luau
                              ^
                              source.luau keyword.operator.assignment.luau
                               ^
                               source.luau
                                ^^^^^^^
                                source.luau variable.other.readwrite.luau
                                       ^
                                       source.luau
                                        ^^^^^^^^^
                                        source.luau variable.other.property.luau
                                                 ^
                                                 source.luau
                                                  ^^^^^^
                                                  source.luau variable.other.property.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Intended for use in tests.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>
 ^
 source.luau comment.block.luau
>  Similar to await(), but instead of yielding if the promise is unresolved,
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  _unwrap will throw. This indicates an assumption that a promise has
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  resolved.
 ^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:_unwrap()
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                   ^
                                   source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                    ^
                                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  if self._status == Promise.Status.Started then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^
      source.luau variable.language.self.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.property.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.operator.comparison.luau
                     ^
                     source.luau
                      ^^^^^^^
                      source.luau variable.other.readwrite.luau
                             ^
                             source.luau
                              ^^^^^^
                              source.luau variable.other.property.luau
                                    ^
                                    source.luau
                                     ^^^^^^^
                                     source.luau variable.other.property.luau
                                            ^
                                            source.luau
                                             ^^^^
                                             source.luau keyword.control.luau
>  	error("Promise has not resolved or rejected.", 2)
 ^^^
 source.luau
    ^^^^^
    source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^
          source.luau string.quoted.double.luau
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           source.luau string.quoted.double.luau
                                                ^
                                                source.luau string.quoted.double.luau
                                                 ^
                                                 source.luau punctuation.separator.arguments.luau
                                                  ^
                                                  source.luau
                                                   ^
                                                   source.luau constant.numeric.decimal.luau
                                                    ^
                                                    source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  local success = self._status == Promise.Status.Resolved
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^^
         source.luau variable.other.readwrite.luau
                ^
                source.luau
                 ^
                 source.luau keyword.operator.assignment.luau
                  ^
                  source.luau
                   ^^^^
                   source.luau variable.language.self.luau
                       ^
                       source.luau
                        ^^^^^^^
                        source.luau variable.other.property.luau
                               ^
                               source.luau
                                ^^
                                source.luau keyword.operator.comparison.luau
                                  ^
                                  source.luau
                                   ^^^^^^^
                                   source.luau variable.other.readwrite.luau
                                          ^
                                          source.luau
                                           ^^^^^^
                                           source.luau variable.other.property.luau
                                                 ^
                                                 source.luau
                                                  ^^^^^^^^
                                                  source.luau variable.other.property.luau
>
 ^
 source.luau
>  return success, unpack(self._values, 1, self._valuesLength)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^^
                 source.luau
                   ^^^^^^
                   source.luau support.function.luau
                         ^
                         source.luau punctuation.arguments.begin.luau
                          ^^^^
                          source.luau variable.language.self.luau
                              ^
                              source.luau
                               ^^^^^^^
                               source.luau variable.other.property.luau
                                      ^
                                      source.luau punctuation.separator.arguments.luau
                                       ^
                                       source.luau
                                        ^
                                        source.luau constant.numeric.decimal.luau
                                         ^
                                         source.luau punctuation.separator.arguments.luau
                                          ^
                                          source.luau
                                           ^^^^
                                           source.luau variable.language.self.luau
                                               ^
                                               source.luau
                                                ^^^^^^^^^^^^^
                                                source.luau variable.other.property.luau
                                                             ^
                                                             source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>function Promise.prototype:_resolve(...)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                    ^
                                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                     ^^^
                                     source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                        ^
                                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  if self._status ~= Promise.Status.Started then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^
      source.luau variable.language.self.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.property.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.operator.comparison.luau
                     ^
                     source.luau
                      ^^^^^^^
                      source.luau variable.other.readwrite.luau
                             ^
                             source.luau
                              ^^^^^^
                              source.luau variable.other.property.luau
                                    ^
                                    source.luau
                                     ^^^^^^^
                                     source.luau variable.other.property.luau
                                            ^
                                            source.luau
                                             ^^^^
                                             source.luau keyword.control.luau
>  	if Promise.is((...)) then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^^^^
       source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^^
               source.luau entity.name.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^
                  source.luau punctuation.arguments.begin.luau
                   ^^^
                   source.luau keyword.other.unit.luau
                      ^
                      source.luau punctuation.arguments.end.luau
                       ^
                       source.luau punctuation.arguments.end.luau
                        ^
                        source.luau
                         ^^^^
                         source.luau keyword.control.luau
>  		(...):_consumerCancelled(self)
 ^^^^
 source.luau
     ^
     source.luau punctuation.arguments.begin.luau
      ^^^
      source.luau keyword.other.unit.luau
         ^
         source.luau punctuation.arguments.end.luau
          ^
          source.luau
           ^^^^^^^^^^^^^^^^^^
           source.luau entity.name.function.luau
                             ^
                             source.luau punctuation.arguments.begin.luau
                              ^^^^
                              source.luau variable.language.self.luau
                                  ^
                                  source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>  	return
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  -- If the resolved value was a Promise, we chain onto it!
 ^^
 source.luau
   ^^
   source.luau comment.line.double-dash.luau
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     source.luau comment.line.double-dash.luau
>  if Promise.is((...)) then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^^^^
      source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^^
              source.luau entity.name.function.luau
                ^
                source.luau punctuation.arguments.begin.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^
                  source.luau keyword.other.unit.luau
                     ^
                     source.luau punctuation.arguments.end.luau
                      ^
                      source.luau punctuation.arguments.end.luau
                       ^
                       source.luau
                        ^^^^
                        source.luau keyword.control.luau
>  	-- Without this warning, arguments sometimes mysteriously disappear
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	if select("#", ...) > 1 then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^^^
       source.luau support.function.luau
             ^
             source.luau punctuation.arguments.begin.luau
              ^
              source.luau string.quoted.double.luau
               ^
               source.luau string.quoted.double.luau
                ^
                source.luau string.quoted.double.luau
                 ^
                 source.luau punctuation.separator.arguments.luau
                  ^
                  source.luau
                   ^^^
                   source.luau keyword.other.unit.luau
                      ^
                      source.luau punctuation.arguments.end.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.comparison.luau
                         ^
                         source.luau
                          ^
                          source.luau constant.numeric.decimal.luau
                           ^
                           source.luau
                            ^^^^
                            source.luau keyword.control.luau
>  		local message = string.format(
 ^^^^
 source.luau
     ^^^^^
     source.luau storage.modifier.local.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^
                   source.luau keyword.operator.assignment.luau
                    ^
                    source.luau
                     ^^^^^^^^^^^^^
                     source.luau support.function.luau
                                  ^
                                  source.luau punctuation.arguments.begin.luau
>  			"When returning a Promise from andThen, extra arguments are " ..
 ^^^^^
 source.luau
      ^
      source.luau string.quoted.double.luau
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       source.luau string.quoted.double.luau
                                                                  ^
                                                                  source.luau string.quoted.double.luau
                                                                   ^
                                                                   source.luau
                                                                    ^^
                                                                    source.luau keyword.operator.other.luau
>  			"discarded! See:\n\n%s",
 ^^^^^
 source.luau
      ^
      source.luau string.quoted.double.luau
       ^^^^^^^^^^^^^^^
       source.luau string.quoted.double.luau
                      ^^
                      source.luau string.quoted.double.luau constant.character.escape.luau
                        ^^
                        source.luau string.quoted.double.luau constant.character.escape.luau
                          ^^
                          source.luau string.quoted.double.luau
                            ^
                            source.luau string.quoted.double.luau
                             ^
                             source.luau punctuation.separator.arguments.luau
>  			self._source
 ^^^^^
 source.luau
      ^^^^
      source.luau variable.language.self.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.property.luau
>  		)
 ^^^^
 source.luau
     ^
     source.luau punctuation.arguments.end.luau
>  		warn(message)
 ^^^^
 source.luau
     ^^^^
     source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	local chainedPromise = ...
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                        ^
                        source.luau
                         ^
                         source.luau keyword.operator.assignment.luau
                          ^
                          source.luau
                           ^^^
                           source.luau keyword.other.unit.luau
>
 ^
 source.luau
>  	local promise = chainedPromise:andThen(
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^
                  source.luau keyword.operator.assignment.luau
                   ^
                   source.luau
                    ^^^^^^^^^^^^^^
                    source.luau variable.other.readwrite.luau
                                  ^
                                  source.luau
                                   ^^^^^^^
                                   source.luau entity.name.function.luau
                                          ^
                                          source.luau punctuation.arguments.begin.luau
>  		function(...)
 ^^^^
 source.luau
     ^^^^^^^^
     source.luau meta.function.luau keyword.control.luau
             ^
             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
              ^^^
              source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                 ^
                 source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  			self:_resolve(...)
 ^^^^^
 source.luau
      ^^^^
      source.luau variable.language.self.luau
          ^
          source.luau
           ^^^^^^^^
           source.luau entity.name.function.luau
                   ^
                   source.luau punctuation.arguments.begin.luau
                    ^^^
                    source.luau keyword.other.unit.luau
                       ^
                       source.luau punctuation.arguments.end.luau
>  		end,
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
        ^
        source.luau punctuation.separator.arguments.luau
>  		function(...)
 ^^^^
 source.luau
     ^^^^^^^^
     source.luau meta.function.luau keyword.control.luau
             ^
             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
              ^^^
              source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                 ^
                 source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  			local maybeRuntimeError = chainedPromise._values[1]
 ^^^^^
 source.luau
      ^^^^^
      source.luau storage.modifier.local.luau
           ^
           source.luau
            ^^^^^^^^^^^^^^^^^
            source.luau variable.other.readwrite.luau
                             ^
                             source.luau
                              ^
                              source.luau keyword.operator.assignment.luau
                               ^
                               source.luau
                                ^^^^^^^^^^^^^^
                                source.luau variable.other.readwrite.luau
                                              ^
                                              source.luau
                                               ^^^^^^^
                                               source.luau variable.other.property.luau
                                                      ^
                                                      source.luau
                                                       ^
                                                       source.luau constant.numeric.decimal.luau
                                                        ^^
                                                        source.luau
>
 ^
 source.luau
>  			-- Backwards compatibility < v2
 ^^^^^
 source.luau
      ^^
      source.luau comment.line.double-dash.luau
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        source.luau comment.line.double-dash.luau
>  			if chainedPromise._error then
 ^^^^^
 source.luau
      ^^
      source.luau keyword.control.luau
        ^
        source.luau
         ^^^^^^^^^^^^^^
         source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^^^^^^
                        source.luau variable.other.property.luau
                              ^
                              source.luau
                               ^^^^
                               source.luau keyword.control.luau
>  				maybeRuntimeError = Error.new({
 ^^^^^^
 source.luau
       ^^^^^^^^^^^^^^^^^
       source.luau variable.other.readwrite.luau
                        ^
                        source.luau
                         ^
                         source.luau keyword.operator.assignment.luau
                          ^
                          source.luau
                           ^^^^^
                           source.luau variable.other.readwrite.luau
                                ^
                                source.luau
                                 ^^^
                                 source.luau entity.name.function.luau
                                    ^
                                    source.luau punctuation.arguments.begin.luau
                                     ^
                                     source.luau punctuation.table.begin.luau
>  					error = chainedPromise._error,
 ^^^^^^^
 source.luau
        ^^^^^
        source.luau support.function.luau
             ^
             source.luau
              ^
              source.luau keyword.operator.assignment.luau
               ^
               source.luau
                ^^^^^^^^^^^^^^
                source.luau variable.other.readwrite.luau
                              ^
                              source.luau
                               ^^^^^^
                               source.luau variable.other.property.luau
                                     ^
                                     source.luau punctuation.separator.fields.luau
>  					kind = Error.Kind.ExecutionError,
 ^^^^^^^
 source.luau
        ^^^^
        source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^
             source.luau keyword.operator.assignment.luau
              ^
              source.luau
               ^^^^^
               source.luau variable.other.readwrite.luau
                    ^
                    source.luau
                     ^^^^
                     source.luau variable.other.property.luau
                         ^
                         source.luau
                          ^^^^^^^^^^^^^^
                          source.luau variable.other.property.luau
                                        ^
                                        source.luau punctuation.separator.fields.luau
>  					context = "[No stack trace available as this Promise originated from an older version of the Promise library (< v2)]",
 ^^^^^^^
 source.luau
        ^^^^^^^
        source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^
                source.luau keyword.operator.assignment.luau
                 ^
                 source.luau
                  ^
                  source.luau string.quoted.double.luau
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                   source.luau string.quoted.double.luau
                                                                                                                            ^
                                                                                                                            source.luau string.quoted.double.luau
                                                                                                                             ^
                                                                                                                             source.luau punctuation.separator.fields.luau
>  				})
 ^^^^^^
 source.luau
       ^
       source.luau punctuation.table.end.luau
        ^
        source.luau punctuation.arguments.end.luau
>  			end
 ^^^^^
 source.luau
      ^^^
      source.luau keyword.control.luau
>
 ^
 source.luau
>  			if Error.isKind(maybeRuntimeError, Error.Kind.ExecutionError) then
 ^^^^^
 source.luau
      ^^
      source.luau keyword.control.luau
        ^
        source.luau
         ^^^^^
         source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^^^^^^
               source.luau entity.name.function.luau
                     ^
                     source.luau punctuation.arguments.begin.luau
                      ^^^^^^^^^^^^^^^^^
                      source.luau variable.other.readwrite.luau
                                       ^
                                       source.luau punctuation.separator.arguments.luau
                                        ^
                                        source.luau
                                         ^^^^^
                                         source.luau variable.other.readwrite.luau
                                              ^
                                              source.luau
                                               ^^^^
                                               source.luau variable.other.property.luau
                                                   ^
                                                   source.luau
                                                    ^^^^^^^^^^^^^^
                                                    source.luau variable.other.property.luau
                                                                  ^
                                                                  source.luau punctuation.arguments.end.luau
                                                                   ^
                                                                   source.luau
                                                                    ^^^^
                                                                    source.luau keyword.control.luau
>  				return self:_reject(maybeRuntimeError:extend({
 ^^^^^^
 source.luau
       ^^^^^^
       source.luau keyword.control.luau
             ^
             source.luau
              ^^^^
              source.luau variable.language.self.luau
                  ^
                  source.luau
                   ^^^^^^^
                   source.luau entity.name.function.luau
                          ^
                          source.luau punctuation.arguments.begin.luau
                           ^^^^^^^^^^^^^^^^^
                           source.luau variable.other.readwrite.luau
                                            ^
                                            source.luau
                                             ^^^^^^
                                             source.luau entity.name.function.luau
                                                   ^
                                                   source.luau punctuation.arguments.begin.luau
                                                    ^
                                                    source.luau punctuation.table.begin.luau
>  					error = "This Promise was chained to a Promise that errored.",
 ^^^^^^^
 source.luau
        ^^^^^
        source.luau support.function.luau
             ^
             source.luau
              ^
              source.luau keyword.operator.assignment.luau
               ^
               source.luau
                ^
                source.luau string.quoted.double.luau
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                 source.luau string.quoted.double.luau
                                                                    ^
                                                                    source.luau string.quoted.double.luau
                                                                     ^
                                                                     source.luau punctuation.separator.fields.luau
>  					trace = "",
 ^^^^^^^
 source.luau
        ^^^^^
        source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^
              source.luau keyword.operator.assignment.luau
               ^
               source.luau
                ^
                source.luau string.quoted.double.luau
                 ^
                 source.luau string.quoted.double.luau
                  ^
                  source.luau punctuation.separator.fields.luau
>  					context = string.format(
 ^^^^^^^
 source.luau
        ^^^^^^^
        source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^
                source.luau keyword.operator.assignment.luau
                 ^
                 source.luau
                  ^^^^^^^^^^^^^
                  source.luau support.function.luau
                               ^
                               source.luau punctuation.arguments.begin.luau
>  						"The Promise at:\n\n%s\n...Rejected because it was chained to the following Promise, which encountered an error:\n",
 ^^^^^^^^
 source.luau
         ^
         source.luau string.quoted.double.luau
          ^^^^^^^^^^^^^^^
          source.luau string.quoted.double.luau
                         ^^
                         source.luau string.quoted.double.luau constant.character.escape.luau
                           ^^
                           source.luau string.quoted.double.luau constant.character.escape.luau
                             ^^
                             source.luau string.quoted.double.luau
                               ^^
                               source.luau string.quoted.double.luau constant.character.escape.luau
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                 source.luau string.quoted.double.luau
                                                                                                                         ^^
                                                                                                                         source.luau string.quoted.double.luau constant.character.escape.luau
                                                                                                                           ^
                                                                                                                           source.luau string.quoted.double.luau
                                                                                                                            ^
                                                                                                                            source.luau punctuation.separator.arguments.luau
>  						self._source
 ^^^^^^^^
 source.luau
         ^^^^
         source.luau variable.language.self.luau
             ^
             source.luau
              ^^^^^^^
              source.luau variable.other.property.luau
>  					),
 ^^^^^^^
 source.luau
        ^
        source.luau punctuation.arguments.end.luau
         ^
         source.luau punctuation.separator.fields.luau
>  				}))
 ^^^^^^
 source.luau
       ^
       source.luau punctuation.table.end.luau
        ^
        source.luau punctuation.arguments.end.luau
         ^
         source.luau punctuation.arguments.end.luau
>  			end
 ^^^^^
 source.luau
      ^^^
      source.luau keyword.control.luau
>
 ^
 source.luau
>  			self:_reject(...)
 ^^^^^
 source.luau
      ^^^^
      source.luau variable.language.self.luau
          ^
          source.luau
           ^^^^^^^
           source.luau entity.name.function.luau
                  ^
                  source.luau punctuation.arguments.begin.luau
                   ^^^
                   source.luau keyword.other.unit.luau
                      ^
                      source.luau punctuation.arguments.end.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>  	)
 ^^^
 source.luau
    ^
    source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  	if promise._status == Promise.Status.Cancelled then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^^^^
       source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^^^^^^^
               source.luau variable.other.property.luau
                      ^
                      source.luau
                       ^^
                       source.luau keyword.operator.comparison.luau
                         ^
                         source.luau
                          ^^^^^^^
                          source.luau variable.other.readwrite.luau
                                 ^
                                 source.luau
                                  ^^^^^^
                                  source.luau variable.other.property.luau
                                        ^
                                        source.luau
                                         ^^^^^^^^^
                                         source.luau variable.other.property.luau
                                                  ^
                                                  source.luau
                                                   ^^^^
                                                   source.luau keyword.control.luau
>  		self:cancel()
 ^^^^
 source.luau
     ^^^^
     source.luau variable.language.self.luau
         ^
         source.luau
          ^^^^^^
          source.luau entity.name.function.luau
                ^
                source.luau punctuation.arguments.begin.luau
                 ^
                 source.luau punctuation.arguments.end.luau
>  	elseif promise._status == Promise.Status.Started then
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^^^^^^
                   source.luau variable.other.property.luau
                          ^
                          source.luau
                           ^^
                           source.luau keyword.operator.comparison.luau
                             ^
                             source.luau
                              ^^^^^^^
                              source.luau variable.other.readwrite.luau
                                     ^
                                     source.luau
                                      ^^^^^^
                                      source.luau variable.other.property.luau
                                            ^
                                            source.luau
                                             ^^^^^^^
                                             source.luau variable.other.property.luau
                                                    ^
                                                    source.luau
                                                     ^^^^
                                                     source.luau keyword.control.luau
>  		-- Adopt ourselves into promise for cancellation propagation.
 ^^^^
 source.luau
     ^^
     source.luau comment.line.double-dash.luau
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       source.luau comment.line.double-dash.luau
>  		self._parent = promise
 ^^^^
 source.luau
     ^^^^
     source.luau variable.language.self.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.property.luau
                 ^
                 source.luau
                  ^
                  source.luau keyword.operator.assignment.luau
                   ^
                   source.luau
                    ^^^^^^^
                    source.luau variable.other.readwrite.luau
>  		promise._consumers[self] = true
 ^^^^
 source.luau
     ^^^^^^^
     source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^^^^^^^^^^
             source.luau variable.other.property.luau
                       ^
                       source.luau
                        ^^^^
                        source.luau variable.language.self.luau
                            ^^
                            source.luau
                              ^
                              source.luau keyword.operator.assignment.luau
                               ^
                               source.luau
                                ^^^^
                                source.luau constant.language.boolean.true.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	return
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  self._status = Promise.Status.Resolved
 ^^
 source.luau
   ^^^^
   source.luau variable.language.self.luau
       ^
       source.luau
        ^^^^^^^
        source.luau variable.other.property.luau
               ^
               source.luau
                ^
                source.luau keyword.operator.assignment.luau
                 ^
                 source.luau
                  ^^^^^^^
                  source.luau variable.other.readwrite.luau
                         ^
                         source.luau
                          ^^^^^^
                          source.luau variable.other.property.luau
                                ^
                                source.luau
                                 ^^^^^^^^
                                 source.luau variable.other.property.luau
>  self._valuesLength, self._values = pack(...)
 ^^
 source.luau
   ^^^^
   source.luau variable.language.self.luau
       ^
       source.luau
        ^^^^^^^^^^^^^
        source.luau variable.other.property.luau
                     ^^
                     source.luau
                       ^^^^
                       source.luau variable.language.self.luau
                           ^
                           source.luau
                            ^^^^^^^
                            source.luau variable.other.property.luau
                                   ^
                                   source.luau
                                    ^
                                    source.luau keyword.operator.assignment.luau
                                     ^
                                     source.luau
                                      ^^^^
                                      source.luau entity.name.function.luau
                                          ^
                                          source.luau punctuation.arguments.begin.luau
                                           ^^^
                                           source.luau keyword.other.unit.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  -- We assume that these callbacks will not throw errors.
 ^^
 source.luau
   ^^
   source.luau comment.line.double-dash.luau
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     source.luau comment.line.double-dash.luau
>  for _, callback in ipairs(self._queuedResolve) do
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau
       ^
       source.luau variable.parameter.luau
        ^^
        source.luau
          ^^^^^^^^
          source.luau variable.parameter.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.control.luau
                     ^
                     source.luau
                      ^^^^^^
                      source.luau support.function.luau
                            ^
                            source.luau punctuation.arguments.begin.luau
                             ^^^^
                             source.luau variable.language.self.luau
                                 ^
                                 source.luau
                                  ^^^^^^^^^^^^^^
                                  source.luau variable.other.property.luau
                                                ^
                                                source.luau punctuation.arguments.end.luau
                                                 ^
                                                 source.luau
                                                  ^^
                                                  source.luau keyword.control.luau
>  	coroutine.wrap(callback)(...)
 ^^^
 source.luau
    ^^^^^^^^^^^^^^
    source.luau support.function.luau
                  ^
                  source.luau punctuation.arguments.begin.luau
                   ^^^^^^^^
                   source.luau variable.other.readwrite.luau
                           ^
                           source.luau punctuation.arguments.end.luau
                            ^
                            source.luau punctuation.arguments.begin.luau
                             ^^^
                             source.luau keyword.other.unit.luau
                                ^
                                source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  self:_finalize()
 ^^
 source.luau
   ^^^^
   source.luau variable.language.self.luau
       ^
       source.luau
        ^^^^^^^^^
        source.luau entity.name.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^
                  source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>function Promise.prototype:_reject(...)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                   ^
                                   source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                    ^^^
                                    source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                       ^
                                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  if self._status ~= Promise.Status.Started then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^
      source.luau variable.language.self.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.property.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.operator.comparison.luau
                     ^
                     source.luau
                      ^^^^^^^
                      source.luau variable.other.readwrite.luau
                             ^
                             source.luau
                              ^^^^^^
                              source.luau variable.other.property.luau
                                    ^
                                    source.luau
                                     ^^^^^^^
                                     source.luau variable.other.property.luau
                                            ^
                                            source.luau
                                             ^^^^
                                             source.luau keyword.control.luau
>  	return
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  self._status = Promise.Status.Rejected
 ^^
 source.luau
   ^^^^
   source.luau variable.language.self.luau
       ^
       source.luau
        ^^^^^^^
        source.luau variable.other.property.luau
               ^
               source.luau
                ^
                source.luau keyword.operator.assignment.luau
                 ^
                 source.luau
                  ^^^^^^^
                  source.luau variable.other.readwrite.luau
                         ^
                         source.luau
                          ^^^^^^
                          source.luau variable.other.property.luau
                                ^
                                source.luau
                                 ^^^^^^^^
                                 source.luau variable.other.property.luau
>  self._valuesLength, self._values = pack(...)
 ^^
 source.luau
   ^^^^
   source.luau variable.language.self.luau
       ^
       source.luau
        ^^^^^^^^^^^^^
        source.luau variable.other.property.luau
                     ^^
                     source.luau
                       ^^^^
                       source.luau variable.language.self.luau
                           ^
                           source.luau
                            ^^^^^^^
                            source.luau variable.other.property.luau
                                   ^
                                   source.luau
                                    ^
                                    source.luau keyword.operator.assignment.luau
                                     ^
                                     source.luau
                                      ^^^^
                                      source.luau entity.name.function.luau
                                          ^
                                          source.luau punctuation.arguments.begin.luau
                                           ^^^
                                           source.luau keyword.other.unit.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  -- If there are any rejection handlers, call those!
 ^^
 source.luau
   ^^
   source.luau comment.line.double-dash.luau
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     source.luau comment.line.double-dash.luau
>  if not isEmpty(self._queuedReject) then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^
      source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
         ^
         source.luau
          ^^^^^^^
          source.luau entity.name.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^^^^
                  source.luau variable.language.self.luau
                      ^
                      source.luau
                       ^^^^^^^^^^^^^
                       source.luau variable.other.property.luau
                                    ^
                                    source.luau punctuation.arguments.end.luau
                                     ^
                                     source.luau
                                      ^^^^
                                      source.luau keyword.control.luau
>  	-- We assume that these callbacks will not throw errors.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	for _, callback in ipairs(self._queuedReject) do
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau
        ^
        source.luau variable.parameter.luau
         ^^
         source.luau
           ^^^^^^^^
           source.luau variable.parameter.luau
                   ^
                   source.luau
                    ^^
                    source.luau keyword.control.luau
                      ^
                      source.luau
                       ^^^^^^
                       source.luau support.function.luau
                             ^
                             source.luau punctuation.arguments.begin.luau
                              ^^^^
                              source.luau variable.language.self.luau
                                  ^
                                  source.luau
                                   ^^^^^^^^^^^^^
                                   source.luau variable.other.property.luau
                                                ^
                                                source.luau punctuation.arguments.end.luau
                                                 ^
                                                 source.luau
                                                  ^^
                                                  source.luau keyword.control.luau
>  		coroutine.wrap(callback)(...)
 ^^^^
 source.luau
     ^^^^^^^^^^^^^^
     source.luau support.function.luau
                   ^
                   source.luau punctuation.arguments.begin.luau
                    ^^^^^^^^
                    source.luau variable.other.readwrite.luau
                            ^
                            source.luau punctuation.arguments.end.luau
                             ^
                             source.luau punctuation.arguments.begin.luau
                              ^^^
                              source.luau keyword.other.unit.luau
                                 ^
                                 source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>  else
 ^^
 source.luau
   ^^^^
   source.luau keyword.control.luau
>  	-- At this point, no one was able to observe the error.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- An error handler might still be attached if the error occurred
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- synchronously. We'll wait one tick, and if there are still no
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- observers, then we should put a message in the console.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>
 ^
 source.luau
>  	local err = tostring((...))
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^
          source.luau variable.other.readwrite.luau
             ^
             source.luau
              ^
              source.luau keyword.operator.assignment.luau
               ^
               source.luau
                ^^^^^^^^
                source.luau support.function.luau
                        ^
                        source.luau punctuation.arguments.begin.luau
                         ^
                         source.luau punctuation.arguments.begin.luau
                          ^^^
                          source.luau keyword.other.unit.luau
                             ^
                             source.luau punctuation.arguments.end.luau
                              ^
                              source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  	coroutine.wrap(function()
 ^^^
 source.luau
    ^^^^^^^^^^^^^^
    source.luau support.function.luau
                  ^
                  source.luau punctuation.arguments.begin.luau
                   ^^^^^^^^
                   source.luau meta.function.luau keyword.control.luau
                           ^
                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                            ^
                            source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		Promise._timeEvent:Wait()
 ^^^^
 source.luau
     ^^^^^^^
     source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^^^^^^^^^^
             source.luau variable.other.property.luau
                       ^
                       source.luau
                        ^^^^
                        source.luau entity.name.function.luau
                            ^
                            source.luau punctuation.arguments.begin.luau
                             ^
                             source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  		-- Someone observed the error, hooray!
 ^^^^
 source.luau
     ^^
     source.luau comment.line.double-dash.luau
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       source.luau comment.line.double-dash.luau
>  		if not self._unhandledRejection then
 ^^^^
 source.luau
     ^^
     source.luau keyword.control.luau
       ^
       source.luau
        ^^^
        source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
           ^
           source.luau
            ^^^^
            source.luau variable.language.self.luau
                ^
                source.luau
                 ^^^^^^^^^^^^^^^^^^^
                 source.luau variable.other.property.luau
                                    ^
                                    source.luau
                                     ^^^^
                                     source.luau keyword.control.luau
>  			return
 ^^^^^
 source.luau
      ^^^^^^
      source.luau keyword.control.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>
 ^
 source.luau
>  		-- Build a reasonable message
 ^^^^
 source.luau
     ^^
     source.luau comment.line.double-dash.luau
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
       source.luau comment.line.double-dash.luau
>  		local message = string.format(
 ^^^^
 source.luau
     ^^^^^
     source.luau storage.modifier.local.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^
                   source.luau keyword.operator.assignment.luau
                    ^
                    source.luau
                     ^^^^^^^^^^^^^
                     source.luau support.function.luau
                                  ^
                                  source.luau punctuation.arguments.begin.luau
>  			"Unhandled Promise rejection:\n\n%s\n\n%s",
 ^^^^^
 source.luau
      ^
      source.luau string.quoted.double.luau
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       source.luau string.quoted.double.luau
                                   ^^
                                   source.luau string.quoted.double.luau constant.character.escape.luau
                                     ^^
                                     source.luau string.quoted.double.luau constant.character.escape.luau
                                       ^^
                                       source.luau string.quoted.double.luau
                                         ^^
                                         source.luau string.quoted.double.luau constant.character.escape.luau
                                           ^^
                                           source.luau string.quoted.double.luau constant.character.escape.luau
                                             ^^
                                             source.luau string.quoted.double.luau
                                               ^
                                               source.luau string.quoted.double.luau
                                                ^
                                                source.luau punctuation.separator.arguments.luau
>  			err,
 ^^^^^
 source.luau
      ^^^
      source.luau variable.other.readwrite.luau
         ^
         source.luau punctuation.separator.arguments.luau
>  			self._source
 ^^^^^
 source.luau
      ^^^^
      source.luau variable.language.self.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.property.luau
>  		)
 ^^^^
 source.luau
     ^
     source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  		if Promise.TEST then
 ^^^^
 source.luau
     ^^
     source.luau keyword.control.luau
       ^
       source.luau
        ^^^^^^^
        source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^^^^
                source.luau variable.other.property.luau
                    ^
                    source.luau
                     ^^^^
                     source.luau keyword.control.luau
>  			-- Don't spam output when we're running tests.
 ^^^^^
 source.luau
      ^^
      source.luau comment.line.double-dash.luau
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        source.luau comment.line.double-dash.luau
>  			return
 ^^^^^
 source.luau
      ^^^^^^
      source.luau keyword.control.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>
 ^
 source.luau
>  		warn(message)
 ^^^^
 source.luau
     ^^^^
     source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau punctuation.arguments.end.luau
>  	end)()
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau punctuation.arguments.end.luau
        ^
        source.luau punctuation.arguments.begin.luau
         ^
         source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  self:_finalize()
 ^^
 source.luau
   ^^^^
   source.luau variable.language.self.luau
       ^
       source.luau
        ^^^^^^^^^
        source.luau entity.name.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^
                  source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Calls any :finally handlers. We need this to be a separate method and
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  queue because we must call all of the finally callbacks upon a success,
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  failure, *and* cancellation.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:_finalize()
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^^^^^^^
                            source.luau meta.function.luau entity.name.function.luau
                                     ^
                                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                      ^
                                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  for _, callback in ipairs(self._queuedFinally) do
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau
       ^
       source.luau variable.parameter.luau
        ^^
        source.luau
          ^^^^^^^^
          source.luau variable.parameter.luau
                  ^
                  source.luau
                   ^^
                   source.luau keyword.control.luau
                     ^
                     source.luau
                      ^^^^^^
                      source.luau support.function.luau
                            ^
                            source.luau punctuation.arguments.begin.luau
                             ^^^^
                             source.luau variable.language.self.luau
                                 ^
                                 source.luau
                                  ^^^^^^^^^^^^^^
                                  source.luau variable.other.property.luau
                                                ^
                                                source.luau punctuation.arguments.end.luau
                                                 ^
                                                 source.luau
                                                  ^^
                                                  source.luau keyword.control.luau
>  	-- Purposefully not passing values to callbacks here, as it could be the
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- resolved values, or rejected errors. If the developer needs the values,
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- they should use :andThen or :catch explicitly.
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	coroutine.wrap(callback)(self._status)
 ^^^
 source.luau
    ^^^^^^^^^^^^^^
    source.luau support.function.luau
                  ^
                  source.luau punctuation.arguments.begin.luau
                   ^^^^^^^^
                   source.luau variable.other.readwrite.luau
                           ^
                           source.luau punctuation.arguments.end.luau
                            ^
                            source.luau punctuation.arguments.begin.luau
                             ^^^^
                             source.luau variable.language.self.luau
                                 ^
                                 source.luau
                                  ^^^^^^^
                                  source.luau variable.other.property.luau
                                         ^
                                         source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  self._queuedFinally = nil
 ^^
 source.luau
   ^^^^
   source.luau variable.language.self.luau
       ^
       source.luau
        ^^^^^^^^^^^^^^
        source.luau variable.other.property.luau
                      ^
                      source.luau
                       ^
                       source.luau keyword.operator.assignment.luau
                        ^
                        source.luau
                         ^^^
                         source.luau constant.language.nil.luau
>  self._queuedReject = nil
 ^^
 source.luau
   ^^^^
   source.luau variable.language.self.luau
       ^
       source.luau
        ^^^^^^^^^^^^^
        source.luau variable.other.property.luau
                     ^
                     source.luau
                      ^
                      source.luau keyword.operator.assignment.luau
                       ^
                       source.luau
                        ^^^
                        source.luau constant.language.nil.luau
>  self._queuedResolve = nil
 ^^
 source.luau
   ^^^^
   source.luau variable.language.self.luau
       ^
       source.luau
        ^^^^^^^^^^^^^^
        source.luau variable.other.property.luau
                      ^
                      source.luau
                       ^
                       source.luau keyword.operator.assignment.luau
                        ^
                        source.luau
                         ^^^
                         source.luau constant.language.nil.luau
>
 ^
 source.luau
>  -- Clear references to other Promises to allow gc
 ^^
 source.luau
   ^^
   source.luau comment.line.double-dash.luau
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     source.luau comment.line.double-dash.luau
>  if not Promise.TEST then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^
      source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau variable.other.property.luau
                      ^
                      source.luau
                       ^^^^
                       source.luau keyword.control.luau
>  	self._parent = nil
 ^^^
 source.luau
    ^^^^
    source.luau variable.language.self.luau
        ^
        source.luau
         ^^^^^^^
         source.luau variable.other.property.luau
                ^
                source.luau
                 ^
                 source.luau keyword.operator.assignment.luau
                  ^
                  source.luau
                   ^^^
                   source.luau constant.language.nil.luau
>  	self._consumers = nil
 ^^^
 source.luau
    ^^^^
    source.luau variable.language.self.luau
        ^
        source.luau
         ^^^^^^^^^^
         source.luau variable.other.property.luau
                   ^
                   source.luau
                    ^
                    source.luau keyword.operator.assignment.luau
                     ^
                     source.luau
                      ^^^
                      source.luau constant.language.nil.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Chains a Promise from this one that is resolved if this Promise is
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>  resolved, and rejected if it is not resolved.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.prototype:now(rejectionValue)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau
                            ^^^
                            source.luau meta.function.luau entity.name.function.luau
                               ^
                               source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                ^^^^^^^^^^^^^^
                                source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                              ^
                                              source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  local traceback = debug.traceback(nil, 2)
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^^^^^^
         source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^
                   source.luau keyword.operator.assignment.luau
                    ^
                    source.luau
                     ^^^^^^^^^^^^^^^
                     source.luau support.function.luau
                                    ^
                                    source.luau punctuation.arguments.begin.luau
                                     ^^^
                                     source.luau constant.language.nil.luau
                                        ^
                                        source.luau punctuation.separator.arguments.luau
                                         ^
                                         source.luau
                                          ^
                                          source.luau constant.numeric.decimal.luau
                                           ^
                                           source.luau punctuation.arguments.end.luau
>  if self:getStatus() == Promise.Status.Resolved then
 ^^
 source.luau
   ^^
   source.luau keyword.control.luau
     ^
     source.luau
      ^^^^
      source.luau variable.language.self.luau
          ^
          source.luau
           ^^^^^^^^^
           source.luau entity.name.function.luau
                    ^
                    source.luau punctuation.arguments.begin.luau
                     ^
                     source.luau punctuation.arguments.end.luau
                      ^
                      source.luau
                       ^^
                       source.luau keyword.operator.comparison.luau
                         ^
                         source.luau
                          ^^^^^^^
                          source.luau variable.other.readwrite.luau
                                 ^
                                 source.luau
                                  ^^^^^^
                                  source.luau variable.other.property.luau
                                        ^
                                        source.luau
                                         ^^^^^^^^
                                         source.luau variable.other.property.luau
                                                 ^
                                                 source.luau
                                                  ^^^^
                                                  source.luau keyword.control.luau
>  	return self:_andThen(traceback, function(...)
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^
           source.luau variable.language.self.luau
               ^
               source.luau
                ^^^^^^^^
                source.luau entity.name.function.luau
                        ^
                        source.luau punctuation.arguments.begin.luau
                         ^^^^^^^^^
                         source.luau variable.other.readwrite.luau
                                  ^
                                  source.luau punctuation.separator.arguments.luau
                                   ^
                                   source.luau
                                    ^^^^^^^^
                                    source.luau meta.function.luau keyword.control.luau
                                            ^
                                            source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                             ^^^
                                             source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                                ^
                                                source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		return ...
 ^^^^
 source.luau
     ^^^^^^
     source.luau keyword.control.luau
           ^
           source.luau
            ^^^
            source.luau keyword.other.unit.luau
>  	end)
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau punctuation.arguments.end.luau
>  else
 ^^
 source.luau
   ^^^^
   source.luau keyword.control.luau
>  	return Promise.reject(rejectionValue == nil and Error.new({
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^^^^
           source.luau variable.other.readwrite.luau
                  ^
                  source.luau
                   ^^^^^^
                   source.luau entity.name.function.luau
                         ^
                         source.luau punctuation.arguments.begin.luau
                          ^^^^^^^^^^^^^^
                          source.luau variable.other.readwrite.luau
                                        ^
                                        source.luau
                                         ^^
                                         source.luau keyword.operator.comparison.luau
                                           ^
                                           source.luau
                                            ^^^
                                            source.luau constant.language.nil.luau
                                               ^
                                               source.luau
                                                ^^^
                                                source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                                                   ^
                                                   source.luau
                                                    ^^^^^
                                                    source.luau variable.other.readwrite.luau
                                                         ^
                                                         source.luau
                                                          ^^^
                                                          source.luau entity.name.function.luau
                                                             ^
                                                             source.luau punctuation.arguments.begin.luau
                                                              ^
                                                              source.luau punctuation.table.begin.luau
>  		kind = Error.Kind.NotResolvedInTime,
 ^^^^
 source.luau
     ^^^^
     source.luau variable.other.readwrite.luau
         ^
         source.luau
          ^
          source.luau keyword.operator.assignment.luau
           ^
           source.luau
            ^^^^^
            source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau variable.other.property.luau
                      ^
                      source.luau
                       ^^^^^^^^^^^^^^^^^
                       source.luau variable.other.property.luau
                                        ^
                                        source.luau punctuation.separator.fields.luau
>  		error = "This Promise was not resolved in time for :now()",
 ^^^^
 source.luau
     ^^^^^
     source.luau support.function.luau
          ^
          source.luau
           ^
           source.luau keyword.operator.assignment.luau
            ^
            source.luau
             ^
             source.luau string.quoted.double.luau
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              source.luau string.quoted.double.luau
                                                              ^
                                                              source.luau string.quoted.double.luau
                                                               ^
                                                               source.luau punctuation.separator.fields.luau
>  		context = ":now() was called at:\n\n" .. traceback,
 ^^^^
 source.luau
     ^^^^^^^
     source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^
             source.luau keyword.operator.assignment.luau
              ^
              source.luau
               ^
               source.luau string.quoted.double.luau
                ^^^^^^^^^^^^^^^^^^^^^
                source.luau string.quoted.double.luau
                                     ^^
                                     source.luau string.quoted.double.luau constant.character.escape.luau
                                       ^^
                                       source.luau string.quoted.double.luau constant.character.escape.luau
                                         ^
                                         source.luau string.quoted.double.luau
                                          ^
                                          source.luau
                                           ^^
                                           source.luau keyword.operator.other.luau
                                             ^
                                             source.luau
                                              ^^^^^^^^^
                                              source.luau variable.other.readwrite.luau
                                                       ^
                                                       source.luau punctuation.separator.fields.luau
>  	}) or rejectionValue)
 ^^^
 source.luau
    ^
    source.luau punctuation.table.end.luau
     ^
     source.luau punctuation.arguments.end.luau
      ^
      source.luau
       ^^
       source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
         ^
         source.luau
          ^^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                        ^
                        source.luau punctuation.arguments.end.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Retries a Promise-returning callback N times until it succeeds.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.retry(callback, times, ...)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                       ^
                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                        ^^^^^^^^
                        source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                ^
                                source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                 ^
                                 source.luau meta.function.luau meta.parameter.luau
                                  ^^^^^
                                  source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                       ^
                                       source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                        ^
                                        source.luau meta.function.luau meta.parameter.luau
                                         ^^^
                                         source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                            ^
                                            source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  assert(type(callback) == "function", "Parameter #1 to Promise.retry must be a function")
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau punctuation.arguments.begin.luau
               ^^^^^^^^
               source.luau variable.other.readwrite.luau
                       ^
                       source.luau punctuation.arguments.end.luau
                        ^
                        source.luau
                         ^^
                         source.luau keyword.operator.comparison.luau
                           ^
                           source.luau
                            ^
                            source.luau string.quoted.double.luau
                             ^^^^^^^^
                             source.luau string.quoted.double.luau
                                     ^
                                     source.luau string.quoted.double.luau
                                      ^
                                      source.luau punctuation.separator.arguments.luau
                                       ^
                                       source.luau
                                        ^
                                        source.luau string.quoted.double.luau
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                         source.luau string.quoted.double.luau
                                                                                         ^
                                                                                         source.luau string.quoted.double.luau
                                                                                          ^
                                                                                          source.luau punctuation.arguments.end.luau
>  assert(type(times) == "number", "Parameter #2 to Promise.retry must be a number")
 ^^
 source.luau
   ^^^^^^
   source.luau support.function.luau
         ^
         source.luau punctuation.arguments.begin.luau
          ^^^^
          source.luau support.function.luau
              ^
              source.luau punctuation.arguments.begin.luau
               ^^^^^
               source.luau variable.other.readwrite.luau
                    ^
                    source.luau punctuation.arguments.end.luau
                     ^
                     source.luau
                      ^^
                      source.luau keyword.operator.comparison.luau
                        ^
                        source.luau
                         ^
                         source.luau string.quoted.double.luau
                          ^^^^^^
                          source.luau string.quoted.double.luau
                                ^
                                source.luau string.quoted.double.luau
                                 ^
                                 source.luau punctuation.separator.arguments.luau
                                  ^
                                  source.luau
                                   ^
                                   source.luau string.quoted.double.luau
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                    source.luau string.quoted.double.luau
                                                                                  ^
                                                                                  source.luau string.quoted.double.luau
                                                                                   ^
                                                                                   source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  local args, length = {...}, select("#", ...)
 ^^
 source.luau
   ^^^^^
   source.luau storage.modifier.local.luau
        ^
        source.luau
         ^^^^
         source.luau variable.other.readwrite.luau
             ^^
             source.luau
               ^^^^^^
               source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^
                      source.luau keyword.operator.assignment.luau
                       ^
                       source.luau
                        ^
                        source.luau punctuation.table.begin.luau
                         ^^^
                         source.luau keyword.other.unit.luau
                            ^
                            source.luau punctuation.table.end.luau
                             ^^
                             source.luau
                               ^^^^^^
                               source.luau support.function.luau
                                     ^
                                     source.luau punctuation.arguments.begin.luau
                                      ^
                                      source.luau string.quoted.double.luau
                                       ^
                                       source.luau string.quoted.double.luau
                                        ^
                                        source.luau string.quoted.double.luau
                                         ^
                                         source.luau punctuation.separator.arguments.luau
                                          ^
                                          source.luau
                                           ^^^
                                           source.luau keyword.other.unit.luau
                                              ^
                                              source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  return Promise.resolve(callback(...)):catch(function(...)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^^^^
                  source.luau entity.name.function.luau
                         ^
                         source.luau punctuation.arguments.begin.luau
                          ^^^^^^^^
                          source.luau entity.name.function.luau
                                  ^
                                  source.luau punctuation.arguments.begin.luau
                                   ^^^
                                   source.luau keyword.other.unit.luau
                                      ^
                                      source.luau punctuation.arguments.end.luau
                                       ^
                                       source.luau punctuation.arguments.end.luau
                                        ^
                                        source.luau
                                         ^^^^^
                                         source.luau entity.name.function.luau
                                              ^
                                              source.luau punctuation.arguments.begin.luau
                                               ^^^^^^^^
                                               source.luau meta.function.luau keyword.control.luau
                                                       ^
                                                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                        ^^^
                                                        source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                                           ^
                                                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	if times > 0 then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^^
       source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^
             source.luau keyword.operator.comparison.luau
              ^
              source.luau
               ^
               source.luau constant.numeric.decimal.luau
                ^
                source.luau
                 ^^^^
                 source.luau keyword.control.luau
>  		return Promise.retry(callback, times - 1, unpack(args, 1, length))
 ^^^^
 source.luau
     ^^^^^^
     source.luau keyword.control.luau
           ^
           source.luau
            ^^^^^^^
            source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^^^^^
                    source.luau entity.name.function.luau
                         ^
                         source.luau punctuation.arguments.begin.luau
                          ^^^^^^^^
                          source.luau variable.other.readwrite.luau
                                  ^
                                  source.luau punctuation.separator.arguments.luau
                                   ^
                                   source.luau
                                    ^^^^^
                                    source.luau variable.other.readwrite.luau
                                         ^
                                         source.luau
                                          ^
                                          source.luau keyword.operator.arithmetic.luau
                                           ^
                                           source.luau
                                            ^
                                            source.luau constant.numeric.decimal.luau
                                             ^
                                             source.luau punctuation.separator.arguments.luau
                                              ^
                                              source.luau
                                               ^^^^^^
                                               source.luau support.function.luau
                                                     ^
                                                     source.luau punctuation.arguments.begin.luau
                                                      ^^^^
                                                      source.luau variable.other.readwrite.luau
                                                          ^
                                                          source.luau punctuation.separator.arguments.luau
                                                           ^
                                                           source.luau
                                                            ^
                                                            source.luau constant.numeric.decimal.luau
                                                             ^
                                                             source.luau punctuation.separator.arguments.luau
                                                              ^
                                                              source.luau
                                                               ^^^^^^
                                                               source.luau variable.other.readwrite.luau
                                                                     ^
                                                                     source.luau punctuation.arguments.end.luau
                                                                      ^
                                                                      source.luau punctuation.arguments.end.luau
>  	else
 ^^^
 source.luau
    ^^^^
    source.luau keyword.control.luau
>  		return Promise.reject(...)
 ^^^^
 source.luau
     ^^^^^^
     source.luau keyword.control.luau
           ^
           source.luau
            ^^^^^^^
            source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^^^^^^
                    source.luau entity.name.function.luau
                          ^
                          source.luau punctuation.arguments.begin.luau
                           ^^^
                           source.luau keyword.other.unit.luau
                              ^
                              source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>--[[
 ^^^^
 source.luau comment.block.luau
>  Converts an event into a Promise with an optional predicate
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.luau comment.block.luau
>]]
 ^^
 source.luau comment.block.luau
>function Promise.fromEvent(event, predicate)
 ^^^^^^^^
 source.luau meta.function.luau keyword.control.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^
          source.luau meta.function.luau entity.name.function.luau
                 ^
                 source.luau meta.function.luau
                  ^^^^^^^^^
                  source.luau meta.function.luau entity.name.function.luau
                           ^
                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                            ^^^^^
                            source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                 ^
                                 source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                  ^
                                  source.luau meta.function.luau meta.parameter.luau
                                   ^^^^^^^^^
                                   source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                            ^
                                            source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  predicate = predicate or function()
 ^^
 source.luau
   ^^^^^^^^^
   source.luau variable.other.readwrite.luau
            ^
            source.luau
             ^
             source.luau keyword.operator.assignment.luau
              ^
              source.luau
               ^^^^^^^^^
               source.luau variable.other.readwrite.luau
                        ^
                        source.luau
                         ^^
                         source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                           ^
                           source.luau
                            ^^^^^^^^
                            source.luau meta.function.luau keyword.control.luau
                                    ^
                                    source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                     ^
                                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	return true
 ^^^
 source.luau
    ^^^^^^
    source.luau keyword.control.luau
          ^
          source.luau
           ^^^^
           source.luau constant.language.boolean.true.luau
>  end
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
>
 ^
 source.luau
>  return Promise._new(debug.traceback(nil, 2), function(resolve, reject, onCancel)
 ^^
 source.luau
   ^^^^^^
   source.luau keyword.control.luau
         ^
         source.luau
          ^^^^^^^
          source.luau variable.other.readwrite.luau
                 ^
                 source.luau
                  ^^^^
                  source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^^^^^^^^^^^^^^^
                       source.luau support.function.luau
                                      ^
                                      source.luau punctuation.arguments.begin.luau
                                       ^^^
                                       source.luau constant.language.nil.luau
                                          ^
                                          source.luau punctuation.separator.arguments.luau
                                           ^
                                           source.luau
                                            ^
                                            source.luau constant.numeric.decimal.luau
                                             ^
                                             source.luau punctuation.arguments.end.luau
                                              ^
                                              source.luau punctuation.separator.arguments.luau
                                               ^
                                               source.luau
                                                ^^^^^^^^
                                                source.luau meta.function.luau keyword.control.luau
                                                        ^
                                                        source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                                         ^^^^^^^
                                                         source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                ^
                                                                source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                                 ^
                                                                 source.luau meta.function.luau meta.parameter.luau
                                                                  ^^^^^^
                                                                  source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                        ^
                                                                        source.luau meta.function.luau meta.parameter.luau punctuation.separator.arguments.luau
                                                                         ^
                                                                         source.luau meta.function.luau meta.parameter.luau
                                                                          ^^^^^^^^
                                                                          source.luau meta.function.luau meta.parameter.luau variable.parameter.function.luau
                                                                                  ^
                                                                                  source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  	local connection
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^
          source.luau variable.other.readwrite.luau
>  	local shouldDisconnect = false
 ^^^
 source.luau
    ^^^^^
    source.luau storage.modifier.local.luau
         ^
         source.luau
          ^^^^^^^^^^^^^^^^
          source.luau variable.other.readwrite.luau
                          ^
                          source.luau
                           ^
                           source.luau keyword.operator.assignment.luau
                            ^
                            source.luau
                             ^^^^^
                             source.luau constant.language.boolean.false.luau
>
 ^
 source.luau
>  	local function disconnect()
 ^^^
 source.luau
    ^^^^^
    source.luau meta.function.luau storage.modifier.local.luau
         ^
         source.luau meta.function.luau
          ^^^^^^^^
          source.luau meta.function.luau keyword.control.luau
                  ^
                  source.luau meta.function.luau
                   ^^^^^^^^^^
                   source.luau meta.function.luau entity.name.function.luau
                             ^
                             source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                              ^
                              source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		connection:Disconnect()
 ^^^^
 source.luau
     ^^^^^^^^^^
     source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^^^^^^^^^^
                source.luau entity.name.function.luau
                          ^
                          source.luau punctuation.arguments.begin.luau
                           ^
                           source.luau punctuation.arguments.end.luau
>  		connection = nil
 ^^^^
 source.luau
     ^^^^^^^^^^
     source.luau variable.other.readwrite.luau
               ^
               source.luau
                ^
                source.luau keyword.operator.assignment.luau
                 ^
                 source.luau
                  ^^^
                  source.luau constant.language.nil.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	-- We use shouldDisconnect because if the callback given to Connect is called before
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- Connect returns, connection will still be nil. This happens with events that queue up
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>  	-- events when there's nothing connected, such as RemoteEvents
 ^^^
 source.luau
    ^^
    source.luau comment.line.double-dash.luau
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      source.luau comment.line.double-dash.luau
>
 ^
 source.luau
>  	connection = event:Connect(function(...)
 ^^^
 source.luau
    ^^^^^^^^^^
    source.luau variable.other.readwrite.luau
              ^
              source.luau
               ^
               source.luau keyword.operator.assignment.luau
                ^
                source.luau
                 ^^^^^
                 source.luau variable.other.readwrite.luau
                      ^
                      source.luau
                       ^^^^^^^
                       source.luau entity.name.function.luau
                              ^
                              source.luau punctuation.arguments.begin.luau
                               ^^^^^^^^
                               source.luau meta.function.luau keyword.control.luau
                                       ^
                                       source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                                        ^^^
                                        source.luau meta.function.luau meta.parameter.luau variable.parameter.function.varargs.luau
                                           ^
                                           source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		local callbackValue = predicate(...)
 ^^^^
 source.luau
     ^^^^^
     source.luau storage.modifier.local.luau
          ^
          source.luau
           ^^^^^^^^^^^^^
           source.luau variable.other.readwrite.luau
                        ^
                        source.luau
                         ^
                         source.luau keyword.operator.assignment.luau
                          ^
                          source.luau
                           ^^^^^^^^^
                           source.luau entity.name.function.luau
                                    ^
                                    source.luau punctuation.arguments.begin.luau
                                     ^^^
                                     source.luau keyword.other.unit.luau
                                        ^
                                        source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  		if callbackValue == true then
 ^^^^
 source.luau
     ^^
     source.luau keyword.control.luau
       ^
       source.luau
        ^^^^^^^^^^^^^
        source.luau variable.other.readwrite.luau
                     ^
                     source.luau
                      ^^
                      source.luau keyword.operator.comparison.luau
                        ^
                        source.luau
                         ^^^^
                         source.luau constant.language.boolean.true.luau
                             ^
                             source.luau
                              ^^^^
                              source.luau keyword.control.luau
>  			resolve(...)
 ^^^^^
 source.luau
      ^^^^^^^
      source.luau entity.name.function.luau
             ^
             source.luau punctuation.arguments.begin.luau
              ^^^
              source.luau keyword.other.unit.luau
                 ^
                 source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  			if connection then
 ^^^^^
 source.luau
      ^^
      source.luau keyword.control.luau
        ^
        source.luau
         ^^^^^^^^^^
         source.luau variable.other.readwrite.luau
                   ^
                   source.luau
                    ^^^^
                    source.luau keyword.control.luau
>  				disconnect()
 ^^^^^^
 source.luau
       ^^^^^^^^^^
       source.luau entity.name.function.luau
                 ^
                 source.luau punctuation.arguments.begin.luau
                  ^
                  source.luau punctuation.arguments.end.luau
>  			else
 ^^^^^
 source.luau
      ^^^^
      source.luau keyword.control.luau
>  				shouldDisconnect = true
 ^^^^^^
 source.luau
       ^^^^^^^^^^^^^^^^
       source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^
                        source.luau keyword.operator.assignment.luau
                         ^
                         source.luau
                          ^^^^
                          source.luau constant.language.boolean.true.luau
>  			end
 ^^^^^
 source.luau
      ^^^
      source.luau keyword.control.luau
>  		elseif type(callbackValue) ~= "boolean" then
 ^^^^
 source.luau
     ^^^^^^
     source.luau keyword.control.luau
           ^
           source.luau
            ^^^^
            source.luau support.function.luau
                ^
                source.luau punctuation.arguments.begin.luau
                 ^^^^^^^^^^^^^
                 source.luau variable.other.readwrite.luau
                              ^
                              source.luau punctuation.arguments.end.luau
                               ^
                               source.luau
                                ^^
                                source.luau keyword.operator.comparison.luau
                                  ^
                                  source.luau
                                   ^
                                   source.luau string.quoted.double.luau
                                    ^^^^^^^
                                    source.luau string.quoted.double.luau
                                           ^
                                           source.luau string.quoted.double.luau
                                            ^
                                            source.luau
                                             ^^^^
                                             source.luau keyword.control.luau
>  			error("Promise.fromEvent predicate should always return a boolean")
 ^^^^^
 source.luau
      ^^^^^
      source.luau support.function.luau
           ^
           source.luau punctuation.arguments.begin.luau
            ^
            source.luau string.quoted.double.luau
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             source.luau string.quoted.double.luau
                                                                       ^
                                                                       source.luau string.quoted.double.luau
                                                                        ^
                                                                        source.luau punctuation.arguments.end.luau
>  		end
 ^^^^
 source.luau
     ^^^
     source.luau keyword.control.luau
>  	end)
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau punctuation.arguments.end.luau
>
 ^
 source.luau
>  	if shouldDisconnect and connection then
 ^^^
 source.luau
    ^^
    source.luau keyword.control.luau
      ^
      source.luau
       ^^^^^^^^^^^^^^^^
       source.luau variable.other.readwrite.luau
                       ^
                       source.luau
                        ^^^
                        source.luau keyword.operator.logical.luau keyword.operator.wordlike.luau
                           ^
                           source.luau
                            ^^^^^^^^^^
                            source.luau variable.other.readwrite.luau
                                      ^
                                      source.luau
                                       ^^^^
                                       source.luau keyword.control.luau
>  		return disconnect()
 ^^^^
 source.luau
     ^^^^^^
     source.luau keyword.control.luau
           ^
           source.luau
            ^^^^^^^^^^
            source.luau entity.name.function.luau
                      ^
                      source.luau punctuation.arguments.begin.luau
                       ^
                       source.luau punctuation.arguments.end.luau
>  	end
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
>
 ^
 source.luau
>  	onCancel(function()
 ^^^
 source.luau
    ^^^^^^^^
    source.luau entity.name.function.luau
            ^
            source.luau punctuation.arguments.begin.luau
             ^^^^^^^^
             source.luau meta.function.luau keyword.control.luau
                     ^
                     source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.begin.luau
                      ^
                      source.luau meta.function.luau meta.parameter.luau punctuation.definition.parameters.end.luau
>  		disconnect()
 ^^^^
 source.luau
     ^^^^^^^^^^
     source.luau entity.name.function.luau
               ^
               source.luau punctuation.arguments.begin.luau
                ^
                source.luau punctuation.arguments.end.luau
>  	end)
 ^^^
 source.luau
    ^^^
    source.luau keyword.control.luau
       ^
       source.luau punctuation.arguments.end.luau
>  end)
 ^^
 source.luau
   ^^^
   source.luau keyword.control.luau
      ^
      source.luau punctuation.arguments.end.luau
>end
 ^^^
 source.luau keyword.control.luau
>
 ^
 source.luau
>return Promise
 ^^^^^^
 source.luau keyword.control.luau
       ^
       source.luau
        ^^^^^^^
        source.luau variable.other.readwrite.luau